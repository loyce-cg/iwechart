{"version":3,"sources":["build/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import * as Mail from \"pmc-mail\";\nimport {ChatWindowController} from \"../window/chat/ChatWindowController\";\nimport {ChatMessage} from \"../main/ChatMessage\";\nimport {ChatPlugin, MailPlugin, MailPluginActionEvent} from \"../main/ChatPlugin\";\nimport { ChatMessagesController } from \"../component/chatmessages/ChatMessagesController\";\nimport { PrivateConversationsController } from \"../component/privateconversations/PrivateConversationsController\";\nimport { VideoConferenceController } from \"../component/videoconference/VideoConferenceController\";\nimport { VideoConferenceWindowController } from \"../window/videoConference/VideoConferenceWindowController\";\nimport { NoSectionsController } from \"../component/nosections/NoSectionsController\";\nimport { DesktopPickerController } from \"../component/desktoppicker/DesktopPickerController\";\nimport { ConnectionStatsTooltipController } from \"../component/connectionstatstooltip/ConnectionStatsTooltipController\";\n\nlet Logger = Mail.Logger.get(\"privfs-chat-plugin.Plugin\");\n\nexport class Plugin {\n    register(_mail: typeof Mail, app: Mail.app.common.CommonApplication) {\n        let chatPlugin = app.addComponent(\"chat-plugin\", new ChatPlugin(app));\n        \n        // i18n: main\n        chatPlugin.registerTexts(app.localeService);\n        \n        // i18n: components\n        ChatMessagesController.registerTexts(app.localeService);\n        PrivateConversationsController.registerTexts(app.localeService);\n        VideoConferenceController.registerTexts(app.localeService);\n        NoSectionsController.registerTexts(app.localeService);\n        DesktopPickerController.registerTexts(app.localeService);\n        ConnectionStatsTooltipController.registerTexts(app.localeService);\n        \n        // i18n: windows\n        ChatWindowController.registerTexts(app.localeService);\n        VideoConferenceWindowController.registerTexts(app.localeService);\n        \n        app.ioc.registerComponent(\"chatmessages\", ChatMessagesController);\n        app.ioc.registerComponent(\"privateconversations\", PrivateConversationsController);\n        app.ioc.registerComponent(\"videoconference\", VideoConferenceController);\n        app.ioc.registerComponent(\"nosections\", NoSectionsController);\n        app.ioc.registerComponent(\"desktoppicker\", DesktopPickerController);\n        app.ioc.registerComponent(\"connectionstatstooltip\", ConnectionStatsTooltipController);\n\n        app.localeService.sinkPollingTasks.push(app.localeService.i18n(\"plugin.chat.app.task.sinkPolling.chats\"));\n        \n        app.options.notifications.value.push({\n            userPreferencesKey: \"chats\",\n            defaultValue: true,\n            tags: () => {\n                return [Mail.mail.MessageTagsFactory.getMessageTypeTag(Mail.mail.section.ChatModuleService.CHAT_MESSAGE_TYPE)];\n            },\n            i18nKey: \"plugin.chat.window.settings.section.notifications.chats.label\"\n        });\n        \n        app.addEventListener<Mail.Types.event.InstanceRegisteredEvent<Mail.window.sectionsummary.SectionSummaryWindowController>>(\"instanceregistered\", event => {\n            if (event.instance && event.instance.className == \"com.privmx.core.window.sectionsummary.SectionSummaryWindowController\") {\n                event.instance.addViewStyle({path: \"window/component/chatmessages/template/main.css\", plugin: \"chat\"});\n                event.instance.addViewScript({path: \"build/view.js\", plugin: \"chat\"});\n                app.ioc.create(ChatMessagesController, [event.instance, event.instance.personsComponent]).then(ele => {\n                    event.instance.registerModule(\"chat\", ele);\n                });\n            }\n        }, \"chat\", \"ethernal\");\n                \n        app.addEventListener<Mail.Types.event.InstanceRegisteredEvent<Mail.window.settings.whitelist.WhitelistController>>(\"instanceregistered\", event => {\n            if (event.instance && event.instance.className == \"com.privmx.core.window.settings.whitelist.WhitelistController\") {\n                event.instance.addMessageInfoGetter(indexEntry => {\n                    return ChatMessage.isChatMessage(indexEntry) ? {\n                        special: true,\n                        title: app.localeService.i18n(\"plugin.chat.window.settings.section.whitelist.table.lastMessage.chatMsg\")\n                    } : null;\n                });\n            }\n        }, \"chat\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.GrantAccessToSharedDbEvent>(\"grantaccesstoshareddb\", (event) => {\n            // jezeli user nie jest zalogowany to znaczy, ze event zostal wygenerowany w trakcie procesu rejestracji team keepera,\n            // a w takim momencie proba ladowania sekcji zakonczy sie zawieszonym promisem.. co pozniej bedzie widoczne, jako niekonczaca sie kreciolka\n            // na ekranie kafli po pierwszym zalogowaniu uzytkownika\n            if (! app.isLogged()) {\n                return;\n            }\n            chatPlugin.loadChannels().fail(e => {\n                Logger.error(\"Error during loading channels\", e);\n            });\n        }, \"chat\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.MailStatsEvent>(\"mailstats\", event => {\n            chatPlugin.refreshChatUnreadCount(event.mailStats);\n        }, \"chat\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.SinkIndexManagerReady>(\"sinkindexmanagerready\", event => {\n            event.result = chatPlugin.loadChannels().fail(e => {\n                Logger.error(\"Error during loading channels\", e);\n            });\n        }, \"chat\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.AfterLoginEvent>(\"afterlogin\", () => {\n            chatPlugin.onLogin().fail(e => {\n                Logger.error(\"Error after login\", e);\n            });\n            app.addCountModel(chatPlugin.chatUnreadCountModel);\n            let cnt = <Mail.window.container.ContainerWindowController>app.windows.container;\n            let entry = cnt.registerAppWindow({\n                id: \"chat\",\n                label: app.localeService.i18n(\"plugin.chat.component.navbar.menu.chat.label\"),\n                icon: \"privmx-icon-chat\",\n                controllerClass: ChatWindowController,\n                count: chatPlugin.chatUnreadCountModel,\n                countFullyLoaded: chatPlugin.chatUnreadCountFullyLoadedModel,\n                historyPath: \"/chat\"\n            });\n            cnt.initApp = entry.id;\n            Mail.Q().then(() => {\n                return app.mailClientApi.checkLoginCore();\n            })\n            .then(() => {\n                app.eventDispatcher.dispatchEvent<Mail.Types.event.PluginModuleReadyEvent>({type: \"plugin-module-ready\", name: Mail.Types.section.NotificationModule.CHAT});\n            })\n            .fail(e => {\n                Logger.error(\"Error during additional login steps\", e);\n            });\n        }, \"chat\", \"ethernal\");\n        \n        app.addEventListener<{type: \"focusChanged\", target: any, windowId: string}>(\"focusChanged\", event => {\n            chatPlugin.activeWindowFocused = event.windowId;\n        }, \"chat\", \"ethernal\")\n        \n        app.addEventListener<Mail.Types.event.PluginLoadedEvent>(\"pluginsloaded\", () => {\n            let mailPlugin = app.getComponent<MailPlugin>(\"mail-plugin\");\n            if (mailPlugin) {\n                chatPlugin.mailPlugin = mailPlugin;\n                mailPlugin.eventDispatcher.addEventListener<MailPluginActionEvent>(\"select\", event => {\n                    if (event.entryType == \"chat\") {\n                        let cnt = <Mail.window.container.ContainerWindowController>app.windows.container;\n                        cnt.redirectToAppWindow(\"chat\", Mail.app.common.Context.create({\n                            contextType: \"section\",\n                            contextId: event.entryId,\n                            moduleName: Mail.Types.section.NotificationModule.CHAT,\n                            hostHash: app.sessionManager.getLocalSession().hostHash,\n                        }));\n                    }\n                });\n                mailPlugin.addViewScript({path: \"build/view.js\", plugin: \"chat\"});\n                mailPlugin.addViewStyle({path: \"window/mail/template/main.css\", plugin: \"chat\"});\n            }\n            chatPlugin.notes2PluginPresent = app.getComponent(\"notes2-plugin\") != null;\n            chatPlugin.tasksPluginPresent = app.getComponent(\"tasks-plugin\") != null;\n        }, \"chat\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.InstanceRegisteredEvent<Mail.window.message.MessageWindowController>>(\"instanceregistered\", event => {\n            if (event.instance && event.instance.className == \"com.privmx.core.window.message.MessageWindowController\") {\n                let messageController = event.instance;\n                messageController.onCustomAction(event => {\n                    if (event.actionType == \"open-chat\" && messageController.indexEntry != null && chatPlugin.conversationService) {\n                        let container = <Mail.window.container.ContainerWindowController>app.windows.container;\n                        container.redirectToAppWindow(\"chat\", Mail.app.common.Context.create({\n                            contextType: \"conversation\",\n                            contextId: chatPlugin.conversationService.getConversationId(messageController.indexEntry),\n                            moduleName: Mail.Types.section.NotificationModule.CHAT,\n                            hostHash: app.sessionManager.getLocalSession().hostHash,\n                        }));\n                    }\n                });\n                messageController.addViewScript({path: \"build/view.js\", plugin: \"chat\"});\n            }\n        }, \"chat\", \"ethernal\");\n\n        app.addEventListener<Mail.Types.event.BeforeLogoutPlugin>(\"beforelogout\", () => {\n            chatPlugin.reset();\n        }, \"chat\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.AfterLogoutPlugin>(\"afterlogout\", () => {\n            // chatPlugin.reset();\n        }, \"chat\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.SinkPollingResultEvent>(\"sinkpollingresult\", event => {\n            chatPlugin.onPollingResult(event.entries);\n        }, \"chat\", \"ethernal\");\n    }\n}\n(<any>Plugin.prototype).className = \"com.privmx.plugin.chat.build.Plugin\";"],"sourceRoot":"../../src"}