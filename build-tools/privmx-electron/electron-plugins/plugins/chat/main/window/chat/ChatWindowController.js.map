{"version":3,"sources":["window/chat/ChatWindowController.ts"],"names":[],"mappings":"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","file":"ChatWindowController.js","sourcesContent":["import {component, mail, privfs, utils, window, Types, Q, app, Logger as RootLogger} from \"pmc-mail\";\nimport {ChatMessagesController, MessagesFilterUpdater, ChatUpdateSearchStatsEvent, UpdateVoiceChatUsersEvent} from \"../../component/chatmessages/ChatMessagesController\";\nimport {ChatMessage} from \"../../main/ChatMessage\";\nimport {ChatType} from \"../../main/Types\";\nimport {ChatPlugin, ChatComponentFactory, ChatValidMessageTypeForUnreadChangeEvent, ChatValidMessageTypeForDisplayChangeEvent, GUISettings, RequestOpenChatEvent, UpdateChatSidebarSpinnersEvent, MarkedChatsAsReadEvent } from \"../../main/ChatPlugin\";\nimport Inject = utils.decorators.Inject;\nimport Dependencies = utils.decorators.Dependencies;\nimport { PrivateConversationsController } from \"../../component/privateconversations/PrivateConversationsController\";\nimport { i18n } from \"./i18n/index\";\nimport { NoSectionsController } from \"../../component/nosections/NoSectionsController\";\nconst Logger = RootLogger.get(\"privfs-chat-plugin.ChatWindowController\");\nexport interface Model {\n    hashmail: string;\n    domain: string;\n    activeElementInfo: ActiveElementInfo;\n}\n\nexport interface ActiveElementInfo {\n    elementId?: string;\n    parentId?: string;\n    conversationId?: string;\n    channelId?: string;\n    guiSettings?: GUISettings;\n    viewSettings?: { [key: string]: any };\n    hostHash: string;\n}\n\ninterface SearchResults {\n    [sectionId: string]: {\n        count: number,\n        allSearched: boolean,\n    }\n}\n\n@Dependencies([\"chatmessages\", \"conv2list\", \"remoteconv2list\", \"remotesectionlist\", \"persons\", \"extlist\", \"splitter\", \"sectionlist\", \"sectionstabs\", \"sidebar\", \"privateconversations\",\"nosections\", \"videoconference\"])\nexport class ChatWindowController extends window.base.BaseAppWindowController {\n    \n    static textsPrefix: string = \"plugin.chat.window.chat.\";\n    \n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    static MY_PRIVATE = \"my\";\n    \n    @Inject identity: privfs.identity.Identity;\n    @Inject personService: mail.person.PersonService;\n    @Inject sinkIndexManager: mail.SinkIndexManager;\n    @Inject messageService: mail.MessageService;\n    @Inject sectionManager: mail.section.SectionManager;\n    @Inject conv2Service: mail.section.Conv2Service;\n    @Inject localStorage: Types.utils.IStorage;\n    @Inject collectionFactory: mail.CollectionFactory;\n    @Inject contactService: mail.contact.ContactService;\n    sidebarOptions: component.sidebar.SidebarOptions;\n    sidebar: component.sidebar.SidebarController;\n    loading: component.loading.LoadingController;\n    personsComponent: component.persons.PersonsController;\n    sectionsSplitter: component.splitter.SplitterController;\n    previewSplitter: component.splitter.SplitterController;\n    // videoConference: VideoConferenceController;\n    messages: {[id: string]: ChatMessagesController};\n    remoteServers: {[hostHash: string]: component.remotehostlist.HostEntry};\n    privateConversations: PrivateConversationsController;\n    noSections: NoSectionsController;\n    disabledSection: component.disabledsection.DisabledSectionController;\n    activeMessages: ChatMessagesController;\n    chatPlugin: ChatPlugin;\n    componentFactory: ChatComponentFactory;\n    messagesCollection: utils.collection.SortedCollection<mail.SinkIndexEntry>;\n    searchResults: { [hostHash: string]: SearchResults } = {};\n    searchCountFilterUpdater: MessagesFilterUpdater;\n    isSearchOn: boolean = false;\n    sectionTooltip: component.sectiontooltip.SectionTooltipController;\n    openChannelViewLock: boolean = false;\n    \n    constructor(parentWindow: window.container.ContainerWindowController) {\n        super(parentWindow, __filename, __dirname, {\n            isPublic: false,\n            subs: {\n                \"splitter-vertical\": {defaultValue: 340},\n                \"splitter-vertical2\": {defaultValue: 340},\n                \"chat-channels-splitter-vertical\": {defaultValue: 200},\n                \"chat-splitter-horizontal\": {defaultValue: 170},\n                \"left-panel-sections-splitter-proportional\": { defaultValue: JSON.stringify({handlePos:250,totalSize:1000}) },\n                \"enter-sends\": {defaultValue: true}\n            }\n        });\n        this.ipcMode = true;\n        this.chatPlugin = this.app.getComponent(\"chat-plugin\");\n        this.setPluginViewAssets(\"chat\");\n        this.openWindowOptions.fullscreen = true;\n        this.openWindowOptions.cssClass = \"app-window\";\n        this.openWindowOptions.title = this.i18n(\"plugin.chat.window.chat.title\");\n        this.searchCountFilterUpdater = new MessagesFilterUpdater();\n        this.searchCountFilterUpdater.onUpdate = this.onSearchCountFilterUpdate.bind(this);\n        this.sectionTooltip = this.addComponent(\"sectiontooltip\", this.componentFactory.createComponent(\"sectiontooltip\", [this]));      \n        this.loading = this.addComponent(\"loading\", this.componentFactory.createComponent(\"loading\", [this]));  \n        this.enableTaskBadgeAutoUpdater();\n    }\n        \n    onPrimarySectionChange(event: Types.utils.collection.CollectionEvent<mail.section.SectionService>) {\n        let hostHash = this.app.sessionManager.getLocalSession().hostHash;\n        this.sidebar.toggleCustomElements(this.chatPlugin.chatPrimarySections[hostHash].list.length > 0);\n    }\n    \n    init(): Q.IWhenable<void> {\n        let localSession = this.app.sessionManager.getLocalSession();\n        return this.app.mailClientApi.checkLoginCore().then(() => {\n            return this.app.mailClientApi.prepareSectionManager();\n        })\n        .then(() => {\n            return Q.all([\n                this.app.mailClientApi.privmxRegistry.getIdentityProvider(),\n                this.sectionManager.isSectionsLimitReached()\n            ])\n        })\n        .then(res => {\n            let [identityProvider, isSectionsLimitReached] = res;\n            let sidebarOptions: component.sidebar.SidebarOptions = {\n                sectionsLimitReached: isSectionsLimitReached,\n                customElementList: {\n                    baseCollection: new utils.collection.MutableCollection([{\n                        id: ChatWindowController.MY_PRIVATE,\n                        icon: {\n                            type: \"hashmail\",\n                            value: this.identity.hashmail\n                        },\n                        label: this.i18n(\"plugin.chat.window.chat.my-messages\"),\n                        private: true,\n                        emphasized: true,\n                    }]),\n                    unreadProvider: null,\n                    elementsCountProvider: null,\n                    searchCountProvider: null,\n                    searchAllSearchedProvider: null,\n                },\n                conv2List: {\n                    unreadProvider: c2s => this.getUnreadFromConv2(localSession, c2s),\n                    elementsCountProvider: c2s => this.getConv2ElementsCount(localSession, c2s),\n                    searchCountProvider: c2s => this.getConv2SearchCount(localSession, c2s),\n                    searchAllSearchedProvider: c2s => this.getConv2SearchAllSearched(localSession, c2s),\n                    withSpinnerProvider: c2s => this.getConv2WithSpinner(localSession, c2s),\n                    activeVoiceChatInfoProvider: c2s => this.getConvActiveVoiceChatInfo(localSession, c2s),\n                },\n                sectionList: {\n                    baseCollection: this.chatPlugin.chatSections[localSession.hostHash],\n                    unreadProvider: section => this.getUnread(localSession, section),\n                    elementsCountProvider: section => this.getSectionElementsCount(localSession, section),\n                    searchCountProvider: section => this.getSectionSearchCount(localSession, section),\n                    searchAllSearchedProvider: section => this.getSectionSearchAllSearched(localSession, section),\n                    withSpinnerProvider: section => this.getSectionWithSpinner(localSession, section),\n                    activeVoiceChatInfoProvider: section => this.getSectionActiveVoiceChatInfo(localSession, section),\n\n                    moduleName: Types.section.NotificationModule.CHAT,\n                    sorter: (a, b) => {\n                        let res = b.getChatLastDate() - a.getChatLastDate();\n                        return res == 0 ? component.sectionlist.SectionListController.nameSectionSorter(a, b) : res;\n                    }\n                },\n                customSectionList: {\n                    baseCollection: this.chatPlugin.chatPrimarySections[localSession.hostHash],\n                    unreadProvider: section => this.getUnread(localSession, section),\n                    elementsCountProvider: section => this.getSectionElementsCount(localSession, section),\n                    searchCountProvider: section => this.getSectionSearchCount(localSession, section),\n                    searchAllSearchedProvider: section => this.getSectionSearchAllSearched(localSession, section),\n                    withSpinnerProvider: section => this.getSectionWithSpinner(localSession, section),\n                    moduleName: Types.section.NotificationModule.CHAT,\n                    sorter: (a, b) => {\n                        let res = b.getChatLastDate() - a.getChatLastDate();\n                        return res == 0 ? component.sectionlist.SectionListController.nameSectionSorter(a, b) : res;\n                    }\n                },\n                remoteHostList: {\n                    elementCountsAggregationStrategy: component.remotehostlist.ElementCountsAggregationStrategy.ALL,\n                },\n                \n                conv2ListEnabled: true,\n                conv2Splitter: this.settings.create(\"left-panel-sections-splitter-proportional\"),\n                sidebarButtons: []       \n            };\n            if (identityProvider.getRights().indexOf(\"normal\") != -1) {\n                sidebarOptions.sidebarButtons.push(\n                    {\n                        id: \"new-section\",\n                        label: this.i18n(\"plugin.chat.window.chat.sidebar.newsection\"),\n                        title: this.i18n(\"plugin.chat.window.chat.sidebar.newsection\"),\n                        icon: \"ico-comment\",\n                        windowOpener: true,\n                        onSectionList: true\n                    },\n                    {\n                        id: \"new-chat\",\n                        label: this.i18n(\"plugin.chat.window.chat.button.newChat.label\"),\n                        title: this.i18n(\"plugin.chat.window.chat.button.newChat.title\"),\n                        icon: \"ico-comment\",\n                        windowOpener: true,\n                    }\n                );\n            }\n            if (identityProvider.getType() == \"basic\") {\n                sidebarOptions.sidebarButtons.push(\n                    <any>{\n                        id: \"new-chat\",\n                        label: this.i18n(\"plugin.chat.window.chat.button.newChat.label\"),\n                        title: this.i18n(\"plugin.chat.window.chat.button.newChat.titleForBasic\"),\n                        icon: \"ico-comment\",\n                        windowOpener: true,\n                        disabled: true,\n                    }    \n                )\n            }\n            \n            this.sidebarOptions = sidebarOptions;\n            this.sidebar = this.addComponent(\"sidebar\", this.componentFactory.createComponent(\"sidebar\", [this, sidebarOptions]));\n            this.bindEvent(this.sidebar, \"elementbeforeactivate\", this.onBeforeActivateSidebarElement.bind(this));\n            this.bindEvent(this.sidebar, \"elementactivated\", this.onActivatedSidebarElement.bind(this));\n            this.bindEvent(this.sidebar, \"sidebarbuttonaction\", this.onSidebarButtonAction.bind(this));\n            this.sidebar.usersListTooltip.getContent = (sectionId: string): string => {\n                return this.app.getUsersListTooltipContent(this.app.sessionManager.getLocalSession(), sectionId);\n            }\n\n            this.chatPlugin.chatPrimarySections[localSession.hostHash].changeEvent.add(this.onPrimarySectionChange.bind(this));\n            this.bindEvent<Types.event.SectionStateChangedEvent>(this.sectionManager.sectionAccessManager.eventDispatcher, \"section-state-changed\", event => {\n                if (this.activeMessages && this.activeMessages.chatInfo && this.activeMessages.chatInfo.type == ChatType.CHANNEL && this.activeMessages.chatInfo.section.getId() == event.sectionId) {\n                    Q().then(() => {\n                        return this.sectionManager.load();\n                    })\n                    .then(() => {\n                        if (! this.areAnySectionsExceptPrivate()) {\n                            this.openNoSectionsView();\n                            return;\n                        }\n                        console.log(\"check available - there are some sections..\");\n                        let section = this.sectionManager.getSection(event.sectionId);\n                        let moduleEnabled = section.isChatModuleEnabled();\n                        if (! moduleEnabled) {\n                            this.openDisabledSectionView(localSession, section);\n                        }\n                        else {\n                            this.refreshActive(localSession);\n                        }\n                    })\n                }\n            });\n                    \n            this.bindEvent(this.app, \"reopen-section\", (event: component.disabledsection.ReopenSectionEvent) => {\n                this.openChannelView(localSession, event.element.getId(), true);\n            });\n            \n            this.bindEvent<Types.event.SectionsLimitReachedEvent>(this.app, \"sectionsLimitReached\", event => {\n                this.sidebar.onSectionsLimitReached(event.reached);\n            });\n\n            this.bindEvent(this.app, \"requestopenchat\", (event: RequestOpenChatEvent) => {\n                let hashmails = event.hashmails.filter(x => this.personService.getPerson(x) != null && this.personService.getPerson(x).contact != null);\n                if (hashmails.length == 0) {\n                    this.alert(this.i18n(\"plugin.chat.window.chat.cantCreateConversationWithoutUsers\"));\n                    return;\n                }\n                if (event.showContactsWindow) {\n                    this.openNewChat(hashmails);\n                }\n                else {\n                    let convId = this.conv2Service.getConvIdFromHashmails(hashmails);\n                    const context = app.common.Context.create({\n                        moduleName: Types.section.NotificationModule.CHAT,\n                        contextType: \"conversation\",\n                        contextId: convId,\n                        hostHash: this.app.sessionManager.getLocalSession().hostHash\n                    });\n                    this.contextHistory.append(context); \n                    this.openChatOrConversationView(convId, true);\n                }\n            });\n\n            this.bindEvent(this.app, \"focusLost\", () => {\n                this.callViewMethod(\"pauseTimeAgoRefresher\");\n            });\n            \n            this.bindEvent<UpdateChatSidebarSpinnersEvent>(this.app, \"update-chat-sidebar-spinners\", e => {\n                this.sidebar.updateSidebarSpinners({\n                    conv2SectionId: e.conv2SectionId,\n                    customElementId: e.customElementId,\n                    sectionId: e.sectionId,\n                    hosts: e.hostHash ? [this.app.sessionManager.getSessionByHostHash(e.hostHash).host] : Object.values(this.app.sessionManager.sessions).map(x => x.host),\n                });\n            });\n            \n            this.personsComponent = this.addComponent(\"personsComponent\", this.componentFactory.createComponent(\"persons\", [this]));\n            this.privateConversations = this.addComponent(\"private-conversations\", this.componentFactory.createComponent(\"privateconversations\", [this]));\n            this.disabledSection = this.addComponent(\"disabled-section\", this.componentFactory.createComponent(\"disabledsection\", [this, Types.section.NotificationModule.CHAT]));\n            this.noSections = this.addComponent(\"no-sections\", this.componentFactory.createComponent(\"nosections\", [this]));\n            this.sectionsSplitter = this.addComponent(\"sectionsSplitter\", this.componentFactory.createComponent(\"splitter\", [this, this.settings.create(\"splitter-vertical\")]));\n            this.previewSplitter = this.addComponent(\"previewSplitter\", this.componentFactory.createComponent(\"splitter\", [this, this.settings.create(\"splitter-vertical2\")]));\n            this.messages = {};\n            \n            this.registerChangeEvent(this.sinkIndexManager.sinkIndexCollection.changeEvent, this.onSinkChange);\n            this.registerChangeEvent(this.sinkIndexManager.messagesCollection.changeEvent, events => {\n                let map: {[sid: string]: boolean} = {};\n                utils.Event.applyEvents(events, event => {\n                    if (event.element) {\n                        map[event.element.index.sink.id] = true;\n                    }\n                });\n                for (let sid in map) {\n                    this.refreshSidebarBySid(sid);\n                }\n            }, \"multi\");\n            this.chatPlugin.chatSections[localSession.hostHash].changeEvent.add(event => {\n                if (event.element && event.type == \"remove\" && this.activeMessages && this.activeMessages.chatInfo && this.activeMessages.chatInfo.section && this.activeMessages.chatInfo.section.getId() == event.element.getId()) {\n                    this.refreshActive(localSession);\n                }\n            });\n            \n            this.bindEvent(this.app, \"focusChanged\", (event) => {\n                let windowId = (<any>event).windowId;\n                this.chatPlugin.activeWindowFocused = windowId == \"main-window\" || windowId == \"focus-restored\" ? this.parent.activeModel.get() : windowId;\n                if (windowId == \"chat\" || (windowId == \"main-window\" && this.parent.activeModel.get() == \"chat\") ) {\n                    setTimeout(() => {\n                        this.refreshActivePanelThumbs();\n                        if ((<any>event).windowId == \"main-window\") {\n                            this.callViewMethod(\"resumeTimeAgoRefresher\");\n                        }\n                        this.callViewMethod(\"grabFocus\", true);\n                    }, 200);\n                }\n            });\n\n\n            this.bindEvent(this.app, \"focusLost\", (event) => {\n                this.chatPlugin.activeWindowFocused = null;\n            });\n\n        \n            this.bindEvent(this, \"chatupdatesearchstatsevent\", this.onChatUpdateSearchStatsEvent.bind(this));\n            \n            \n            this.bindEvent(this.app, \"onToggleMaximize-notify\", () => {\n                setTimeout(() => {\n                    this.callViewMethod(\"grabFocus\", false);\n                }, 10);\n            });\n            \n            this.registerChangeEvent(this.app.searchModel.changeEvent, this.onFilterMessages, \"multi\");\n            if (this.app.searchModel.data.visible && this.app.searchModel.data.value != \"\") {\n                this.onFilterMessages();\n            }\n            this.bindEvent<ChatValidMessageTypeForUnreadChangeEvent>(this.app, \"chatvalidmessagetypeforunreadchange\", () => {\n                this.sidebar.refresh();\n            });\n            this.bindEvent<ChatValidMessageTypeForDisplayChangeEvent>(this.app, \"chatvalidmessagetypefordisplaychange\", () => {\n                this.searchCountFilterUpdater.previousFilter = null;\n                this.searchCountFilterUpdater.updateFilter(this.app.searchModel.get(), true);\n            });\n\n\n            this.bindEvent<Types.event.VoiceChatUsersPresenceChangeEvent>(this.app, \"voice-chat-users-presence-change\", event => { \n                this.updateActiveVoiceChatUsersView(event.hostHash, event.sectionId);\n            });\n\n            this.bindEvent<UpdateVoiceChatUsersEvent>(this.app, \"update-voice-chat-users\", event => {\n                this.onUpdateVoiceChatUsers(event);\n            })\n\n            this.app.dispatchEvent({type: \"focusChanged\", windowId: \"chat\"});\n        })\n        .then(() => {\n            let tasksPlugin = this.app.getComponent(\"tasks-plugin\");\n            return tasksPlugin.projectsReady;\n        });\n    }\n\n    async onUpdateVoiceChatUsers(event: UpdateVoiceChatUsersEvent): Promise<void> { \n        if (! this.app.serverConfigForUser.privmxStreamsEnabled) {\n            return;\n        }\n        if (event.sectionId) {\n            const session = this.app.sessionManager.getSessionByHostHash(event.hostHash);\n            let section = this.getSectionServiceFromConvIdOrSectionId(session, event.sectionId);\n            if (!section) {\n                return;\n            }\n            try {\n                let api = this.app.sessionManager.getVoiceChatServiceApi(event.hostHash);\n                let data = await api.getRoomInfo(section);\n                session.webSocketNotifier._notifyVoiceChatUsersChange(session, data.users, event.sectionId);    \n            }\n            catch (e) {\n                Logger.warn(\"voice chat unavailable\");\n            }             \n        }\n    }\n\n    getSectionServiceFromConvIdOrSectionId(session: mail.session.Session, sectionOrConvId: string): mail.section.SectionService {\n        let conv = session.conv2Service.collection.find(x => x.section && (x.section.getId() == sectionOrConvId || x.id == sectionOrConvId));\n        let sectionService: mail.section.SectionService;\n        if (conv) {\n            sectionService = conv.section;\n        }\n        else {\n            sectionService = session.sectionManager.getSection(sectionOrConvId);\n        }\n        return sectionService;\n    }\n    \n    getUsergroupIdByMessagesId(session: mail.session.Session, id: string): string {\n        if (id.indexOf(\"c2:\") == 0) {\n            let conv2Section = session.conv2Service.collection.find(x => x.id == id);\n            let convSectionId = conv2Section && conv2Section.section  ? conv2Section.section.getId() : null;\n            return convSectionId;\n        }\n        return id;\n    }\n\n    getActiveVoiceChatUsers(hostHash: string, sectionId: string): Types.webUtils.PersonSimpleModel[] {\n        let session = this.app.sessionManager.getSessionByHostHash(hostHash); \n        let section = session.sectionManager.getSection(sectionId);\n        let users = (<any>session.webSocketNotifier).getVoiceChatCachedUsers(session, sectionId);\n        return mail.WebSocketNotifier.getListeningPeople(session, sectionId, users)\n    }\n\n    updateActiveVoiceChatUsersView(hostHash: string, sectionId: string): void {\n        let session: mail.session.Session;\n        try {\n            session = this.app.sessionManager.getSessionByHostHash(hostHash);\n        } catch (e) {\n            console.log(\"cannot get session\", e);\n        }\n    \n        // console.log(\"status check\", this.activeMessages ? \"activeMessages ok\" : \"activeMessages fail\", this.activeMessages.session ? \"session ok\" : \"session fail\", \"sectionId\", sectionId);\n\n        if (this.activeMessages && this.activeMessages.session && this.activeMessages.session.hostHash == hostHash) {\n            this.activeMessages.afterViewLoaded.promise.then(() => {\n                if(this.getUsergroupIdByMessagesId(session, this.activeMessages.getId()) == this.getUsergroupIdByMessagesId(session, sectionId)) {\n                    let users = this.getActiveVoiceChatUsers(hostHash, sectionId);\n                    let personModelUsers = users.map<app.common.voicechat.PersonModel>(x => {\n                        return {\n                            name: x.name,\n                            hashmail: x.hashmail,\n                            networkInfo: {ping: 0}\n                        }\n                    })\n            \n                    let usersStr = JSON.stringify(personModelUsers);\n                    this.activeMessages.callViewMethod(\"updateActiveVoiceChatUsers\", usersStr);        \n                    this.activeMessages.toggleIsVoiceChatActiveInThisSection(this.app.voiceChatService.isVoiceChatActive(session, sectionId));\n    \n                }\n            })\n        }\n        else {\n            // Logger.warn(\"doesnt meet criteria in updateActiveVoiceChatUsersView\",sectionId);\n        }\n\n    }\n\n    getModel(): Model {\n        return {\n            hashmail: this.identity.hashmail,\n            domain: this.identity.host,\n            activeElementInfo: this.getActiveElementInfo(),\n        };\n    }\n    \n    //===========================\n    //       VIEW EVENTS\n    //===========================\n    \n    onViewLoad(): void {\n        if (! this.areAnySectionsExceptPrivate()) {\n            this.openNoSectionsView();\n            return;\n        }\n\n        this.activateMessages();\n    }\n\n    activateMessages():void {\n        let activeElementInfo = this.getActiveElementInfo();\n        this.callViewMethod(\"activateMessages\", activeElementInfo);\n        this.callViewMethod(\"changeIsSearchOn\", this.isSearchOn);\n        \n        this.initSpellChecker();\n        let localSession = this.app.sessionManager.getLocalSession();\n        this.sidebar.toggleCustomElements(this.chatPlugin.chatPrimarySections[localSession.hostHash].list.length > 0);\n    }\n\n    onViewDragDrop(fileHandle: Types.app.FileHandle[])  {\n        let active = this.sidebar.getActive();\n        if (active.type == component.sidebar.SidebarElementType.CONVERSATION) {\n            if (active.conv2.hasDeletedUserOnly()) {\n                return;\n            }\n        }\n        return Q().then(() => {\n            let filesActions: Q.Promise<any>[] = [];\n            fileHandle.forEach(x => {\n                filesActions.push(this.onDragDropSingle(x));\n            })\n            return Q.all(filesActions);\n        })\n        .fail(this.errorCallback);\n    }\n    onDragDropSingle(fileHandle: Types.app.FileHandle) {\n        let formatter = new utils.Formatter();\n        let content = this.app.createContent(fileHandle);\n        let limit = this.app.getMaxFileSizeLimit();\n        if (content.getSize() > limit) {\n            return Q.reject<void>(this.i18n(\"plugin.chat.window.chat.error.maxFileSizeExceeded.detailed\", formatter.bytesSize(limit))).thenResolve(null);\n        }\n        else {\n            this.activeMessages.sendMessage({attachments: [content]});\n        }\n    }\n    \n    onViewUserAction() {\n        if (this.activeMessages) {\n            this.activeMessages.onViewUserAction();\n        }\n    }\n    \n    //===========================\n    //          MISC\n    //===========================\n    \n    applyHistoryState(processed: boolean, state: string) {\n        let localSession = this.app.sessionManager.getLocalSession();\n        let context = this.contextHistory.getCurrent();\n\n        let handled: boolean = false;\n        if (context) {\n            if (this.app.switchModuleWithContext() || state) {\n                \n                if (context.getType() == \"section\") {\n                    let contextSection = this.chatPlugin.sectionManager.getSection(context.getSectionIdFromContextId());\n                    if (contextSection && contextSection.isChatModuleEnabled()) {\n                        this.openChannelView(localSession, context.getSectionIdFromContextId());\n                        handled = true;\n                    }\n                }\n                else\n                if (context.getType() == \"conversation\") {\n                    this.openChatOrConversationView(context.getContextId());\n                    handled = true;\n                }\n                else\n                if (context.getType() == \"custom\") {\n                    if (context.getContextId() == \"my\") {\n                        if (this.chatPlugin.chatPrimarySections[localSession.hostHash].list.length > 0) {\n                            this.openChannelView(localSession, this.chatPlugin.chatPrimarySections[localSession.hostHash].get(0).getId());\n                        }\n                        else {\n                            this.openPrivateConversationsView();\n                        }\n                        handled = true;\n                    }\n                }\n            }\n        }\n        this.app.resetModuleSwitchingModifier();\n        if (handled) {\n            return;\n        }\n        if (state) {\n            if (state == ChatWindowController.MY_PRIVATE) {\n                this.openPrivateConversationsView();\n            }\n            else if (this.getConversationIfExists(state) == null)  {\n                this.openChannelView(localSession, state);\n            }\n            else {\n                this.openChatOrConversationView(state);\n            }\n        }\n        else {\n            this.openLastActiveChat().fail(this.errorCallback);\n        }\n    }\n    \n    openLastActiveChat(): Q.Promise<void> {\n        const moduleName = Types.section.NotificationModule.CHAT;\n        let localSession = this.app.sessionManager.getLocalSession();\n        return Q().then(() => {\n            return this.localStorage.get(\"last-active-chat\");\n        })\n        .then((lastActiveChat: string) => {\n            if (lastActiveChat == ChatWindowController.MY_PRIVATE) {\n                const context = app.common.Context.create({\n                    moduleName: moduleName,\n                    contextType: \"custom\",\n                    contextId: ChatWindowController.MY_PRIVATE,\n                    hostHash: this.app.sessionManager.getLocalSession().hostHash\n                });\n                this.contextHistory.append(context); \n                this.openPrivateConversationsView();\n                return;\n            }\n            if (this.getConversationIfExists(lastActiveChat) != null) {\n                const context = app.common.Context.create({\n                    moduleName: moduleName,\n                    contextType: \"conversation\",\n                    contextId: lastActiveChat,\n                    hostHash: this.app.sessionManager.getLocalSession().hostHash\n                });\n                this.contextHistory.append(context); \n                this.openChatOrConversationView(lastActiveChat);\n                return;\n            }\n            let section = this.sectionManager.getSection(lastActiveChat);\n            if (section == null || !section.isChatModuleEnabled()) {\n                section = this.sidebar.sectionList.sectionsCollection.get(0);\n            }\n            if (section) {\n                const context = app.common.Context.create({\n                    moduleName: moduleName,\n                    contextType: \"section\",\n                    contextId: \"section:\" + section.getId(),\n                    hostHash: this.app.sessionManager.getLocalSession().hostHash\n                });\n                this.contextHistory.append(context); \n                return this.openChannelView(localSession, section.getId());\n            }\n            if (lastActiveChat == null) {\n                return this.openAnyChat();\n            }\n        });\n    }\n\n    openAnyChat(): void {\n        const firstConv = this.chatPlugin.conv2Service.collection ? this.chatPlugin.conv2Service.collection.get(0): null;\n        if (firstConv) {\n            const context = app.common.Context.create({\n                moduleName: Types.section.NotificationModule.CHAT,\n                contextType: \"conversation\",\n                contextId: firstConv.id,\n                hostHash: this.app.sessionManager.getLocalSession().hostHash\n            });\n            this.contextHistory.append(context); \n            this.openChatOrConversationView(firstConv.id);\n        }     \n    }\n    \n    reopenChat(): void {\n        let active = this.sidebar.getActive();\n        if (!active) {\n            return;\n        }\n        if (active.type == component.sidebar.SidebarElementType.CONVERSATION) {\n            this.openChatOrConversationView(active.conv2.id);\n        }\n        else if (active.type == component.sidebar.SidebarElementType.SECTION) {\n            let session = this.app.sessionManager.getLocalSession();\n            this.openChannelView(session, active.section.getId());\n        }\n        else if (active.type == component.sidebar.SidebarElementType.REMOTE_SECTION) {\n            let session = this.app.sessionManager.getSessionByHostHash(active.hostHash);\n            this.openRemoteChannelView(active.hostHash, active.section.getId());\n        }\n        else if (active.type == component.sidebar.SidebarElementType.CUSTOM_ELEMENT) {\n            if (active.customElement.id == ChatWindowController.MY_PRIVATE) {\n                this.openPrivateConversationsView();\n            }\n        }\n    }\n    \n\n\n    getActiveId(): string {\n        let active = this.sidebar.getActive();\n        let localSession = this.app.sessionManager.getLocalSession();\n        let session = active && active.hostHash && this.app.sessionManager.isSessionExistsByHostHash(active.hostHash)\n            ? this.app.sessionManager.getSessionByHostHash(active.hostHash)\n            : localSession;\n        if (active != null && active.type == component.sidebar.SidebarElementType.CONVERSATION) {\n            return this.getConversationId(session, active.conv2);\n        }\n        if (active != null && active.type == component.sidebar.SidebarElementType.SECTION) {\n            return this.getChannelId(session, active.section);\n        }\n        if (active != null && active.type == component.sidebar.SidebarElementType.REMOTE_SECTION) {\n            return this.getChannelId(session, active.section);\n        }        \n        if (active != null && active.type == component.sidebar.SidebarElementType.REMOTE_CONVERSATION) {\n            return this.getConversationId(session, active.conv2);\n        }        \n        if (active != null && active.type == component.sidebar.SidebarElementType.CUSTOM_SECTION) {\n            return this.getChannelId(session, active.section);\n        }\n        return null;\n    }\n    \n    getActiveElementInfo(): ActiveElementInfo {\n        let active = this.sidebar.getActive();\n        let localSession = this.app.sessionManager.getLocalSession();\n        let session = active && active.hostHash && this.app.sessionManager.isSessionExistsByHostHash(active.hostHash)\n            ? this.app.sessionManager.getSessionByHostHash(active.hostHash)\n            : localSession;\n        let hostHash = session.hostHash;\n        let activeElement: ActiveElementInfo = { hostHash: hostHash };\n        activeElement.guiSettings = this.chatPlugin.getGUISettings();\n        activeElement.viewSettings = this.chatPlugin.getViewSettings();\n        if (active != null && active.type == component.sidebar.SidebarElementType.CONVERSATION) {\n            activeElement.elementId = active.conv2.id;\n            activeElement.conversationId = this.getConversationId(session, active.conv2);\n        }\n        if (active != null && (active.type == component.sidebar.SidebarElementType.SECTION || active.type == component.sidebar.SidebarElementType.CUSTOM_SECTION) ) {\n            activeElement.elementId = active.section.getId();\n            activeElement.parentId = active.section.getRoot().getId();\n            activeElement.channelId = this.getChannelId(session, active.section);\n        }\n        if (active != null && (active.type == component.sidebar.SidebarElementType.REMOTE_SECTION) ) {\n            activeElement.elementId = active.section.getId();\n            activeElement.parentId = active.section.getRoot().getId();\n            activeElement.channelId = this.getChannelId(session, active.section);\n        }\n        if (active != null && active.type == component.sidebar.SidebarElementType.REMOTE_CONVERSATION) {\n            activeElement.elementId = active.conv2.id;\n            activeElement.conversationId = this.getConversationId(session, active.conv2);\n        }\n\n        return activeElement;\n    }\n    \n    refreshActive(session: mail.session.Session) {\n        if (! this.areAnySectionsExceptPrivate()) {\n            this.openNoSectionsView();\n            return;\n        }\n        let section = session.sectionManager.getSection(this.getActiveElementInfo().elementId);\n        if (section && !section.isChatModuleEnabled()) {\n            return;\n        }\n        let id = this.getActiveId();\n        let prevActive = this.activeMessages;\n        let messagesChatController = this.messages[id];\n        this.activeMessages = messagesChatController;\n        this.callViewMethod(\"activateMessages\", this.getActiveElementInfo(), this.getActiveId());\n        if (messagesChatController) {\n            this.localStorage.set(\"last-active-chat\", messagesChatController.getId());\n        }\n        if (this.activeMessages) {\n            this.activeMessages.activate();\n        }\n        this.chatPlugin.activeMessages = this.activeMessages;\n        if (prevActive && prevActive != this.activeMessages) {\n            prevActive.deactivate();\n        }\n        \n        // let currentSection = this.activeMessages.chatInfo.section ? this.activeMessages.chatInfo.section: null;\n        // let conv = this.activeMessages.chatInfo.conversation ? this.activeMessages.chatInfo.conversation: null;\n\n        // let currId = currentSection ? currentSection.getId(): conv.id;\n        // this.updateActiveVoiceChatUsersView(session.hostHash, currId);\n        this.updateActiveVoiceChatUsersView(session.hostHash, this.activeMessages.getId())\n        this.refreshActivePanelThumbs();\n    }\n    \n    //===========================\n    //      CONVERSATION\n    //===========================\n    \n    getConversationId(session: mail.session.Session, conversation: mail.section.Conv2Section): string {\n        return \"messages-conversation-\" + session.hostHash + \"-\" + conversation.id;\n    }\n\n    // getOrCreateConversation(conversation: mail.section.Conv2Section): ChatMessagesController {\n    //     let id = this.getConversationId(conversation);\n    //     if (!(id in this.messages)) {\n    //         let baseCollection = conversation.messagesCollection;\n    //         conversation.prepareMessagesCollection().fail(e => {\n    //             this.getLogger().error(\"Error during preparing messages\", e);\n    //         });\n    //         let collection = new utils.collection.FilteredCollection<mail.SinkIndexEntry>(baseCollection, entry => {\n    //             return ChatMessage.isChatMessage(entry) || this.chatPlugin.isMailMessage(entry);\n    //         });\n    //         this.messages[id] = this.addComponent(id, this.componentFactory.createComponent(\"chatmessages\", [this]));\n    //         this.messages[id].init();\n    //         this.messages[id].setChatData({\n    //             type: ChatType.CONVERSATION,\n    //             section: null,\n    //             conversation: conversation\n    //         }, collection);\n\n\n    //         this.messages[id].disableFileLinksForNonExistantFiles();\n    //         if (conversation && conversation.section && conversation.section.getChatModule()) {\n    //             this.messages[id].setConversationFilesChangeListener();\n    //             let chatModule = conversation.section.getChatModule();\n    //             chatModule.chatMessagesCollection.changeEvent.add(() => {\n    //                 if (chatModule.sink) {\n    //                     this.refreshSidebarBySid(chatModule.sink.id);\n                        \n    //                 }\n    //             }, \"multi\");\n    //         }\n    //     }\n    //     return this.messages[id];\n    // }\n\n    getOrCreateConversation(conversation: mail.section.Conv2Section): Q.Promise<ChatMessagesController> {\n        return this.getOrCreateRemoteConversation(this.app.sessionManager.getLocalSession().hostHash, conversation);\n    }\n\n    openChatOrConversationView(conversationId: string, force?: boolean, focus?: boolean): Q.Promise<mail.section.Conv2Section> {\n        if (this.openChannelViewLock) {\n            return Q(null);\n        }\n        this.openChannelViewLock = true;\n        return Q().then(() => {\n            if (focus !== false) {\n                this.onViewFocus();\n            }\n            let active = this.sidebar.getActive();\n            if (active != null && active.type == component.sidebar.SidebarElementType.CONVERSATION && active.conv2.id == conversationId) {\n                if (focus !== false && this.activeMessages) {\n                    this.activeMessages.focus();\n                }\n                return active.conv2;\n            }\n            let conversation = this.conv2Service.collection.find(x => x.id == conversationId);\n            if (conversation == null) {\n                if (force && conversationId) {\n                    let users = this.conv2Service.getUsersFromConvId(conversationId);\n                    conversation = this.conv2Service.getOrCreateConv(users, true);\n                    if (conversation == null) {\n                        console.log(\"exit with conv null\")\n                        return null;\n                    }\n                }\n                else {\n                    console.log(\"exit with conv null (2)\")\n                    return null;\n                }\n            }\n            this.chatPlugin.activeSinkId = conversation.sinkIndex ? conversation.sinkIndex.sink.id : null;\n            let session = this.app.sessionManager.getLocalSession();\n            this.chatPlugin.activeSinkHostHash = session.hostHash;\n            return this.getOrCreateConversation(conversation)\n            .then(messagesController => {\n                this.sidebar.setActive({\n                    type: component.sidebar.SidebarElementType.CONVERSATION,\n                    conv2: conversation,\n                }, false);\n                return conversation;\n        \n            })\n    \n        })\n        .fin(() => {\n            this.openChannelViewLock = false;\n        })\n    }\n    \n    getConversationIfExists(conversationId: string, force?: boolean): mail.section.Conv2Section {\n        let conversation = this.conv2Service.collection.find(x => x.id == conversationId);\n        if (conversation) {\n            return conversation;\n        }\n        if (force && conversationId) {\n            let users = this.conv2Service.getUsersFromConvId(conversationId);\n            conversation = this.conv2Service.getOrCreateConv(users, true);\n            if (conversation == null) {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n        return conversation;\n    }\n    \n    //===========================\n    //          CHANNEL\n    //===========================\n    \n    getChannelId(session: mail.session.Session, section: mail.section.SectionService): string {\n        return \"messages-channel-\" + session.hostHash + \"-\" + section.getId();\n    }\n    \n    getOrCreateChannel(section: mail.section.SectionService): Q.Promise<ChatMessagesController> {\n        return Q().then(() => {\n            return section.getChatModule().sinkIndex == null ? section.getChatModule().getSinkIndex() : Q.resolve();\n        })\n        .then(() => {\n            let id = this.getChannelId(this.app.sessionManager.getLocalSession(), section);\n            if (!(id in this.messages) || ! this.messages[id].getSection().getChatModule().sinkIndex) {\n                this.messages[id] = this.addComponent(id, this.componentFactory.createComponent(\"chatmessages\", [this]));\n                this.messages[id].init();\n                \n                return this.messages[id].setSession(this.app.sessionManager.getLocalSession())\n                .then(() => {\n                    this.messages[id].setSectionData(section);\n                    if (section && section.getChatModule()) {\n                        let chatModule = section.getChatModule();\n                        chatModule.chatMessagesCollection.changeEvent.add(() => {\n                            if (chatModule.sink) {\n                                this.refreshSidebarBySid(chatModule.sink.id);\n                            }\n                        }, \"multi\");\n                    }\n                    return this.messages[id];\n                })\n            }\n            return this.messages[id];\n        })\n    }\n    \n    isSectionPrimary(session: mail.session.Session, section: mail.section.SectionService) {\n        return this.chatPlugin.chatPrimarySections[session.hostHash].contains(section);\n    }\n    \n    openChannelView(session: mail.session.Session, sectionId: string, fromDisabled?: boolean) {\n        if (this.openChannelViewLock) {\n            return;\n        }\n        let active = this.sidebar.getActive();\n        if (fromDisabled !== true && active != null\n           && (active.type == component.sidebar.SidebarElementType.SECTION || active.type == component.sidebar.SidebarElementType.CUSTOM_SECTION) && active.section.getId() == sectionId) {\n            return Q.resolve(null);\n        }\n        let section = this.sectionManager.getSection(sectionId);\n        if (section == null) {\n            return Q.resolve(null);\n        }\n        this.openChannelViewLock = true;\n        return Q().then(() => {\n            if (! this.areAnySectionsExceptPrivate()) {\n                this.openNoSectionsView();\n                return;\n            }\n            if (!section.isChatModuleEnabled()) {\n                this.openDisabledSectionView(session, section);\n                this.openChannelViewLock = false;\n                return;\n            }\n            else {\n                return section.getChatModule().getSinkIndex().then(sinkIndex => {\n                    section.getChatModule().sinkIndex = sinkIndex;\n                    return;\n                })\n                .then(() => {\n                    return this.getOrCreateChannel(section);\n                })\n                .then(() => {\n                    this.sidebar.setActive({\n                        type: this.isSectionPrimary(session, section) ? component.sidebar.SidebarElementType.CUSTOM_SECTION : component.sidebar.SidebarElementType.SECTION,\n                        section: section\n                    }, false);\n\n                    this.chatPlugin.activeSinkId = section.getChatSink().id;\n                    this.chatPlugin.activeSinkHostHash = this.app.sessionManager.getLocalSession().hostHash;\n                     this.refreshActive(session);\n                    \n                    this.openChannelViewLock = false;\n                    return;\n                })\n            }\n        })\n        .fin(() => {\n            this.openChannelViewLock = false;\n        })\n    }\n    \n    openDisabledSectionView(session: mail.session.Session, section: mail.section.SectionService) {\n        console.log(\"on openDisabledSectionView\")\n        this.sidebar.setActive({\n            type: this.isSectionPrimary(session, section) ? component.sidebar.SidebarElementType.CUSTOM_SECTION : component.sidebar.SidebarElementType.SECTION,\n            section: section\n        }, false);\n        this.chatPlugin.activeSinkId = section.getChatSink().id;\n        this.chatPlugin.activeSinkHostHash = this.app.sessionManager.getLocalSession().hostHash;\n        this.disabledSection.setSection(section);\n        this.callViewMethod(\"openDisabledSectionView\");\n    }\n    \n    openPrivateConversationsView(): void {\n        this.chatPlugin.activeSinkId = null;\n        this.chatPlugin.activeSinkHostHash = null;\n        this.sidebar.setActive({\n            type: component.sidebar.SidebarElementType.CUSTOM_ELEMENT,\n            customElement: this.sidebar.customElementList.customElementsCollection.find(x => x.id == ChatWindowController.MY_PRIVATE)\n        }, false);\n        this.callViewMethod(\"openPrivateConversations\");\n    }\n\n    openNoSectionsView(): void {\n        this.chatPlugin.activeSinkId = null;\n        this.chatPlugin.activeSinkHostHash = null;\n        this.callViewMethod(\"openNoSections\");\n    }\n\n\n\n    //===========================\n    // Remote Channels\n    //===========================\n\n    getOrCreateRemoteChannel(hostHash:string, section: mail.section.SectionService): Q.Promise<ChatMessagesController> {\n        return Q().then(() => {\n            let id = this.getChannelId(this.app.sessionManager.getSessionByHostHash(hostHash), section);\n            if (!(id in this.messages) || ! this.messages[id].getSection().getChatModule().sinkIndex) {\n                    this.messages[id] = this.addComponent(id, this.componentFactory.createComponent(\"chatmessages\", [this]));\n                    this.messages[id].init();\n                    return this.messages[id].setSession(this.app.sessionManager.getSessionByHostHash(hostHash))\n                    .then(() => {\n                        this.messages[id].setSectionData(section);\n                        if (section && section.getChatModule()) {\n                            let chatModule = section.getChatModule();\n                            chatModule.chatMessagesCollection.changeEvent.add(() => {\n                                if (chatModule.sink) {\n                                    this.refreshSidebarBySidRemote(hostHash, chatModule.sink.id);\n                                }\n                            }, \"multi\");\n                        }\n                        return this.messages[id];\n                    });\n            }\n            return this.messages[id];\n        })\n    }\n\n    getOrCreateRemoteConversation(hostHash: string, conversation: mail.section.Conv2Section): Q.Promise<ChatMessagesController> {\n        return Q().then(() => {\n            let id = this.getConversationId(this.app.sessionManager.getSessionByHostHash(hostHash), conversation);\n            // console.log(\"getOrCreateRemoteConversation id\", id);\n            if (!(id in this.messages)) {\n                let baseCollection = conversation.messagesCollection;\n                let collection = new utils.collection.FilteredCollection<mail.SinkIndexEntry>(baseCollection, entry => {\n                    return ChatMessage.isChatMessage(entry) || this.chatPlugin.isMailMessage(entry);\n                });\n                this.messages[id] = this.addComponent(id, this.componentFactory.createComponent(\"chatmessages\", [this]));\n                // console.log(\"before init\");\n                this.messages[id].init();\n                // console.log(\"before setSession\");\n                return this.messages[id].setSession(this.app.sessionManager.getSessionByHostHash(hostHash))\n                .then(() => {\n                    // console.log(\"after setSession\");\n                    conversation.prepareMessagesCollection().fail(e => {\n                        this.getLogger().error(\"Error during preparing messages\", e);\n                    });\n                    \n                    // console.log(\"getOrCreateRemoteConversation: setChatData\");\n                    this.messages[id].setChatData({\n                        type: ChatType.CONVERSATION,\n                        section: null,\n                        conversation: conversation\n                    }, collection);\n                    \n                    // console.log(1);\n                    // console.log(2)\n                    if (conversation && conversation.section && conversation.section.getChatModule()) {\n                        // console.log(\"2.1\")\n                        this.messages[id].setConversationFilesChangeListener();\n                        let chatModule = conversation.section.getChatModule();\n                        // console.log(\"2.2\", chatModule.chatMessagesCollection)\n                        if (chatModule.chatMessagesCollection) {\n                            chatModule.chatMessagesCollection.changeEvent.add(() => {\n                                // console.log(\"on add..\")\n                                if (chatModule.sink) {\n                                    // console.log(3)\n                                    this.refreshSidebarBySidRemote(hostHash, chatModule.sink.id);\n                                    // console.log(4)\n                                }\n                            }, \"multi\");    \n                        }\n                        // console.log(\"2.3\");\n                    }\n                    // console.log(\"getOrCreateRemoteConversation after..\");\n                    return this.messages[id];\n                });\n            }\n            return this.messages[id];\n        });\n    }\n\n\n    openRemoteChannelView(hostHash: string, sectionId: string, fromDisabled?: boolean) {\n        if (this.openChannelViewLock) {\n            return;\n        }\n        // console.log(1)\n        let active = this.sidebar.getActive();\n        let session = this.app.sessionManager.getSessionByHostHash(hostHash);\n        // console.log(2)\n\n        if (fromDisabled !== true && active != null\n           && (active.type != component.sidebar.SidebarElementType.HOST && active.section && active.section.getId() == sectionId)) {\n            return Q.resolve(null);\n        }\n        // console.log(3)\n\n        return Q().then(() => {\n            // console.log(4)\n\n            return session.mailClientApi.privmxRegistry.getSectionManager().then(sm => {\n                // console.log(5)\n\n                return sm.load().thenResolve(sm);\n            })\n        })\n        .then(sectionManager => {\n            let section = sectionManager.getSection(sectionId);\n            if (section == null) {\n                return Q.resolve(null);\n            }\n            this.openChannelViewLock = true;\n            return Q().then(() => {\n                if (!section.isChatModuleEnabled()) {\n                    this.openDisabledSectionView(session, section);\n                    this.openChannelViewLock = false;\n                    return;\n                }\n                else {\n                    // console.log(6)\n\n                    return section.getChatModule().getSinkIndex().then(sinkIndex => {\n                        section.getChatModule().sinkIndex = sinkIndex;\n                        return;\n                    })\n                    .then(() => {\n                        // console.log(7)\n\n                        return this.getOrCreateRemoteChannel(hostHash, section);\n                    })\n                    .then(() => {\n                        // console.log(8)\n\n                        this.sidebar.setActive({\n                            type: component.sidebar.SidebarElementType.REMOTE_SECTION,\n                            section: section,\n                            hostHash: hostHash\n                        }, false);\n                        this.chatPlugin.activeSinkId = section.getChatSink().id;\n                        this.chatPlugin.activeSinkHostHash = session.hostHash;\n                        this.refreshActive(session);\n                        \n                        this.openChannelViewLock = false;\n                        return;\n                    })\n                }\n            })\n                \n        })\n\n        .fin(() => {\n            this.openChannelViewLock = false;\n        })\n    }\n\n    openRemoteChatOrConversationView(hostHash: string, conversationId: string, force?: boolean, focus?: boolean): Q.Promise<mail.section.Conv2Section> {\n        // console.log(\"on openRemoteConversationView\");\n        return Q().then(() => {\n            if (focus !== false) {\n                this.onViewFocus();\n            }\n            let active = this.sidebar.getActive();\n            if (active != null && active.type == component.sidebar.SidebarElementType.REMOTE_CONVERSATION && active.conv2.id == conversationId) {\n                if (focus !== false && this.activeMessages) {\n                    this.activeMessages.focus();\n                }\n                return active.conv2;\n            }\n            let session = this.app.sessionManager.getSessionByHostHash(hostHash);\n            let conversation = session.conv2Service.collection.find(x => x.id == conversationId);\n            if (conversation == null) {\n                if (force && conversationId) {\n                    let users = session.conv2Service.getUsersFromConvId(conversationId);\n                    conversation = session.conv2Service.getOrCreateConv(users, true);\n                    if (conversation == null) {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n            this.chatPlugin.activeSinkId = conversation.sinkIndex ? conversation.sinkIndex.sink.id : null;\n            this.chatPlugin.activeSinkHostHash = session.hostHash;\n            // console.log(\"openRemoteConversation: before getOrCreateRemoteConversation\")\n            return this.getOrCreateRemoteConversation(hostHash, conversation)\n            .then(() => {\n                // console.log(\"openRemoteConversation: after getOrCreateRemoteConversation\")\n                this.sidebar.setActive({\n                    type: component.sidebar.SidebarElementType.REMOTE_CONVERSATION,\n                    conv2: conversation,\n                    hostHash: session.hostHash\n                }, false);\n                return conversation;\n        \n            })\n    \n        })\n    }\n    \n    refreshRemoteConversation(session: mail.session.Session, conversation: mail.section.Conv2Section): void {\n        if (this.networkIsDown()) {\n            this.showOfflineError();\n            return;\n        }\n        let controller = this;\n        conversation.persons.forEach(person => {\n            if (person.hasContact()) {\n                session.sectionManager.contactService.refreshContact(person.getHashmail(), true)\n                .fail(controller.logErrorCallback);\n            }\n        });\n    }\n\n\n\n    expandRemoteSectionsList(hostEntry: component.remotehostlist.HostEntry): void {\n        let session: mail.session.Session;\n        let hostHash = this.app.sessionManager.getHashFromHost(hostEntry.host);\n        let checkSessionExists: boolean = this.app.sessionManager.isSessionExistsByHostHash(hostHash);\n        if ( checkSessionExists && hostEntry.sectionList != null && hostEntry.conv2List != null) {\n            this.callViewMethod(\"expandRemoteSectionsList\", hostEntry.host, hostHash);\n            return;\n        }\n\n\n        Q().then(() => {\n            this.sidebar.callViewMethod(\"showHostLoading\", hostHash, true);\n            if (!checkSessionExists) {\n                return this.app.sessionManager.createRemoteSession(hostEntry.host)\n                .then(() => {\n                    return this.app.sessionManager.init(hostHash);\n                })        \n                .fail(() => {\n                    this.sidebar.callViewMethod(\"showHostLoading\", hostHash, false);\n                    return this.errorCallback;\n                });\n            }\n        })\n        .then(() => {\n            session = this.app.sessionManager.getSessionByHostHash(hostHash);\n            return this.chatPlugin.prepareSession(session);\n        })\n        .then(() => {\n            return Q.all(session.sectionManager.sectionsCollection.list.map(x => x.getChatSinkIndex()));\n        })\n        .then(() => {\n            this.registerRemoteChangeEvents(session);\n            if (! this.remoteServers) {\n                this.remoteServers = {};\n            }\n                \n            this.initRemoteHostComponents(hostEntry, session);\n            this.callViewMethod(\"expandRemoteSectionsList\", hostEntry.host, hostHash);\n        })\n        .then(() => {\n            this.updateSidebarHostElement(session);\n        });\n\n    }\n\n    checkRemoteHostComponentsInitialized(hostHash: string): boolean {\n        let ret = (hostHash in this.remoteServers) && this.remoteServers[hostHash].sectionList != null && this.remoteServers[hostHash].conv2List != null;\n        return ret;\n    }\n\n    initRemoteHostComponents(hostEntry: component.remotehostlist.HostEntry, session: mail.session.Session): void {\n        let hostHash = session.hostHash;\n        if (this.checkRemoteHostComponentsInitialized(hostHash)) {\n            return;\n        }\n\n        let sectionsListOptions: component.remotesectionlist.RemoteSectionListOptions = {\n            baseCollection: session.sectionManager.filteredCollection,\n            unreadProvider: section => this.getUnread(session, section),\n            elementsCountProvider: section => this.getSectionElementsCount(session, section),\n            searchCountProvider: section => this.getSectionSearchCount(session, section),\n            searchAllSearchedProvider: section => this.getSectionSearchAllSearched(session, section),\n            withSpinnerProvider: section => this.getSectionWithSpinner(session, section),\n            sorter: (a, b) => {\n                let res = b.getChatLastDate() - a.getChatLastDate();\n                return res == 0 ? component.sectionlist.SectionListController.nameSectionSorter(a, b) : res;\n            },\n            moduleName: Types.section.NotificationModule.CHAT,\n            checkShowAllAvailSections: false,\n            session: session\n        }\n\n        let conv2ListOptions: component.remoteconv2list.RemoteConv2ListOptions = {\n            unreadProvider: c2s => this.getUnreadFromConv2(session, c2s),\n            elementsCountProvider: c2s => this.getConv2ElementsCount(session, c2s),\n            searchCountProvider: c2s => this.getConv2SearchCount(session, c2s),\n            searchAllSearchedProvider: c2s => this.getConv2SearchAllSearched(session, c2s),\n            withSpinnerProvider: c2s => this.getConv2WithSpinner(session, c2s),\n            session: session,\n        };\n        let hostList = hostEntry;\n        hostList.sectionList = this.addComponent(\"remoteSectionsList-\" + hostHash, this.componentFactory.createComponent(\"remotesectionlist\", [this, sectionsListOptions]));\n        hostList.sectionList.ipcMode = true;\n        hostList.conv2List = this.addComponent(\"remoteConv2List-\" + hostHash, this.componentFactory.createComponent(\"remoteconv2list\", [this, conv2ListOptions]));\n        hostList.conv2List.ipcMode = true;\n        this.remoteServers[hostHash] = hostList;\n        this.sidebar.registerRemoteSectionsList(hostHash, hostList.sectionList);\n        this.sidebar.registerRemoteConv2List(hostHash, hostList.conv2List);\n    }\n\n\n    //===========================\n    //      SIDEBAR EVENTS\n    //===========================\n    \n    onBeforeActivateSidebarElement(event: component.sidebar.ElementBeforeActivateEvent) {\n        const moduleName = \"chat\";\n        event.result = false;\n        if (event.element.type == component.sidebar.SidebarElementType.HOST) {\n            this.expandRemoteSectionsList(event.element.host);\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.REMOTE_SECTION) {\n            const context = app.common.Context.create({\n                moduleName: moduleName,\n                contextType: \"remote-section\",\n                contextId: \"section:\" + event.element.section.getId(),\n                hostHash: event.element.hostHash\n                \n            });\n            this.contextHistory.append(context);            \n            this.openRemoteChannelView(event.element.hostHash, event.element.section.getId());\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.REMOTE_CONVERSATION) {\n            const context = app.common.Context.create({\n                moduleName: moduleName,\n                contextType: \"remote-conversation\",\n                contextId: event.element.conv2.id,\n                hostHash: event.element.hostHash\n            });\n            this.contextHistory.append(context);            \n            this.openRemoteChatOrConversationView(event.element.hostHash, event.element.conv2.id, false);\n        }\n\n        else if (event.element.type == component.sidebar.SidebarElementType.CONVERSATION) {\n            const context = app.common.Context.create({\n                moduleName: moduleName,\n                contextType: \"conversation\",\n                contextId: event.element.conv2.id,\n                hostHash: this.app.sessionManager.getLocalSession().hostHash\n            });\n            this.contextHistory.append(context);            \n            this.openChatOrConversationView(event.element.conv2.id, false);\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.SECTION) {\n            const context = app.common.Context.create({\n                moduleName: moduleName,\n                contextType: \"section\",\n                contextId: event.element.section.getId(),\n                hostHash: this.app.sessionManager.getLocalSession().hostHash\n            });\n            this.contextHistory.append(context);            \n            this.openChannelView(this.app.sessionManager.getLocalSession(), event.element.section.getId());\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.CUSTOM_SECTION) {\n            const context = app.common.Context.create({\n                moduleName: moduleName,\n                contextType: \"custom\",\n                contextId: event.element.section.getId(),\n                hostHash: this.app.sessionManager.getLocalSession().hostHash\n            });\n            this.contextHistory.append(context);            \n            this.openChannelView(this.app.sessionManager.getLocalSession(), event.element.section.getId());\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.CUSTOM_ELEMENT) {\n            const context = app.common.Context.create({\n                moduleName: moduleName,\n                contextType: \"custom\",\n                contextId: event.element.customElement.id,\n                hostHash: this.app.sessionManager.getLocalSession().hostHash\n            });\n            this.contextHistory.append(context);            \n\n            if (event.element.customElement.id == ChatWindowController.MY_PRIVATE) {\n                this.openPrivateConversationsView();\n            }\n        }\n    }\n    \n    onActivatedSidebarElement(event: component.sidebar.ElementActivatedEvent) {\n        let localSession = this.app.sessionManager.getLocalSession();\n        if (event.element.type == component.sidebar.SidebarElementType.HOST) {\n        }\n        if (event.element.type == component.sidebar.SidebarElementType.CONVERSATION) {\n            this.refreshActive(localSession);\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.SECTION) {\n            this.refreshActive(localSession);\n        }\n        if (event.element.type == component.sidebar.SidebarElementType.REMOTE_CONVERSATION) {\n            let session = this.app.sessionManager.getSessionByHostHash(event.element.hostHash);\n            this.refreshActive(session);\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.REMOTE_SECTION) {\n            let session = this.app.sessionManager.getSessionByHostHash(event.element.hostHash);\n            this.refreshActive(session);\n        }\n\n        else if (event.element.type == component.sidebar.SidebarElementType.CUSTOM_SECTION) {\n            this.refreshActive(localSession);\n        }\n    }\n    \n    onSidebarButtonAction(event: component.sidebar.SidebarButtonActionEvent) {\n        if (event.sidebarButton.id == \"new-chat\" && !(<any>event.sidebarButton).disabled) {\n            this.openNewChat();\n        }\n        if (event.sidebarButton.id == \"new-section\") {\n            this.openSectionsWindow();\n        }\n\n    }\n\n    \n    //===========================\n    //          UTILS\n    //===========================\n    \n    onSinkChange(event: Types.utils.collection.CollectionEvent<mail.SinkIndex>) {\n        if (event.element == null) {\n            return;\n        }\n        this.refreshSidebarBySid(event.element.sink.id);\n    }\n    \n    registerRemoteChangeEvents(session: mail.session.Session): void {\n        this.registerChangeEvent(session.sectionManager.sinkIndexManager.sinkIndexCollection.changeEvent, event => {\n            if (event.element) {\n                this.refreshSidebarBySidRemote(session.hostHash, event.element.sink.id)\n            }\n        });\n        this.registerChangeEvent(session.sectionManager.sinkIndexManager.messagesCollection.changeEvent, events => {\n            let map: {[sid: string]: boolean} = {};\n            utils.Event.applyEvents(events, event => {\n                if (event.element) {\n                    map[event.element.index.sink.id] = true;\n                }\n            });\n            for (let sid in map) {\n                this.refreshSidebarBySidRemote(session.hostHash, sid);\n            }\n        }, \"multi\");\n    }\n    \n    refreshSidebarBySid(sid: string) {\n        // console.log(\"on refreshSidebarBySinkId\")\n        let section = this.sectionManager.getSectionBySinkId(sid);\n        if (section == null) {\n            return;\n        }\n        let convIndex = this.sidebar.conv2List.conversationCollection.indexOfBy(x => x.section == section);\n        if (convIndex != -1) {\n            this.sidebar.conv2List.conversationCollection.triggerUpdateAt(convIndex);\n            return;\n        }\n        let sectionIndex = this.sidebar.sectionList.sectionsCollection.indexOfBy(x => x.getId() == section.getId());\n        if (sectionIndex != -1) {\n            this.sidebar.sectionList.sortedCollection.triggerBaseUpdateElement(section);\n            return;\n        }\n        let customSectionIndex = this.sidebar.customSectionList.sectionsCollection.indexOfBy(x => x.getId() == section.getId());\n        if (customSectionIndex != -1) {\n            this.sidebar.customSectionList.sortedCollection.triggerBaseUpdateElement(section);\n            return;\n        }\n        // console.log(\"refreshSidebarBySinkId end.\")\n    }\n    \n    refreshSidebarBySidRemote(hostHash: string, sid: string) {\n        if (hostHash == this.app.sessionManager.getLocalSession().hostHash) {\n            return this.refreshSidebarBySid(sid);\n        }\n        // console.log(\"on refreshSidebarBySinkId\")\n        let session = this.app.sessionManager.getSessionByHostHash(hostHash);\n        let section = session.sectionManager.getSectionBySinkId(sid);\n        if (section == null) {\n            return;\n        }\n        let convIndex = this.sidebar.remoteConv2Lists[hostHash].conversationCollection.indexOfBy(x => x.section == section);\n        if (convIndex != -1) {\n            this.sidebar.remoteConv2Lists[hostHash].conversationCollection.triggerUpdateAt(convIndex);\n            this.updateSidebarHostElement(session);\n            return;\n        }\n        let sectionIndex = this.sidebar.remoteSectionsLists[hostHash].sortedCollection.indexOfBy(x => x.getId() == section.getId());\n        if (sectionIndex != -1) {\n            this.sidebar.remoteSectionsLists[hostHash].sortedCollection.triggerBaseUpdateElement(section);\n            this.updateSidebarHostElement(session);\n            return;\n        }\n    }\n    \n    updateSidebarHostElement(session: mail.session.Session): void {\n        if (this.app.sessionManager.getLocalSession() == session) {\n            return;\n        }\n        let element = this.sidebar.hostList.hostsSortedCollection.find(x => x.host == session.host);\n        if (element) {\n            this.sidebar.hostList.hostsSortedCollection.triggerBaseUpdateElement(element);\n        }\n    }\n    \n    openNewChat(hashmails: string[] = []): void {\n        this.app.ioc.create(window.selectcontacts.SelectContactsWindowController, [this, {\n            message: this.i18n(\"plugin.chat.window.chat.selectContacts.header.newChat.text\"),\n            editable: true,\n            hashmails: hashmails,\n            fromServerUsers: true\n        }])\n        .then(win => {\n            let singletonSuffix = !hashmails || hashmails.length == 0 || !this.activeMessages ? \"new-conv2\" : this.activeMessages.getId();\n            this.app.openSingletonWindow(\"selectContacts-\" + singletonSuffix , win);\n            win.getPromise().then(hashmails => {\n                let convId = this.conv2Service.getConvIdFromHashmails(hashmails);\n                const context = app.common.Context.create({\n                    moduleName: Types.section.NotificationModule.CHAT,\n                    contextType: \"conversation\",\n                    contextId: convId,\n                    hostHash: this.app.sessionManager.getLocalSession().hostHash\n                });\n                this.contextHistory.append(context); \n                this.openChatOrConversationView(convId, true);\n            });\n        });\n    }\n    \n    openSectionsWindow(): void {\n        // this.app.openSingletonWindow(\"sections\", window.sections.SectionsWindowController);\n        this.app.openNewSectionDialogFromSidebar();\n    }\n    \n    \n    //=======================\n    //   SECTION COUNTERS\n    //=======================\n    \n    getUnread(session: mail.session.Session, section: mail.section.SectionService): number {\n        if (!section.hasChatModule()) {\n            return 0;\n        }\n        let mailStats = this.chatPlugin.mailStats[session.hostHash];\n        if (!mailStats) {\n            return 0;\n        }\n        let stats = mailStats.getStats(section.getChatSink().id);\n        return this.chatPlugin.getUnreadCountFromStats(stats);\n    }\n    \n    getSectionElementsCount(session: mail.session.Session, section: mail.section.SectionService): number {\n        if (!section.hasChatModule() || section.getChatModule().sinkIndex == null) {\n            return 0;\n        }\n        return section.getChatModule().sinkIndex.getMessagesCount();\n    }\n    \n    getSectionSearchCount(session: mail.session.Session, section: mail.section.SectionService): number {\n        let id = section.getId();\n        let searchResults = this.getSearchResults(session);\n        if (searchResults && (id in searchResults)) {\n            return searchResults[id].count;\n        }\n        return 0;\n    }\n    \n    getSectionSearchAllSearched(session: mail.session.Session, section: mail.section.SectionService): boolean {\n        let id = section.getId();\n        let searchResults = this.getSearchResults(session);\n        if (searchResults && (id in searchResults)) {\n            return searchResults[id].allSearched;\n        }\n        return true;\n    }\n    \n    getSectionWithSpinner(session: mail.session.Session, section: mail.section.SectionService): boolean {\n        let sws = this.chatPlugin.sectionsWithSpinner;\n        if (sws[session.hostHash] && sws[session.hostHash][\"__all__\"]) {\n            return true;\n        }\n        if (!sws[session.hostHash]) {\n            return false;\n        }\n        return !!sws[session.hostHash][section.getId()];\n    }\n    \n    getSectionActiveVoiceChatInfo(session: mail.session.Session, section: mail.section.SectionService) {\n        let users = this.getActiveVoiceChatUsers(session.hostHash, section.getId());\n        let ret = {\n            active: users.length > 0,\n            users: users\n        }\n        return ret;\n    }\n\n    //=======================\n    // CONVERSATION COUNTERS\n    //=======================\n    \n    getUnreadFromConv2(session: mail.session.Session, conv2Section: mail.section.Conv2Section): number {\n        return conv2Section.section == null ? 0 : this.getUnread(session, conv2Section.section);\n    }\n    \n    getConv2ElementsCount(session: mail.session.Session, conv2Section: mail.section.Conv2Section): number {\n        if (conv2Section.section == null) {\n            return 0;\n        }\n        if (!conv2Section.section.hasChatModule() || conv2Section.section.getChatModule().sinkIndex == null) {\n            return 0;\n        }\n        return conv2Section.section.getChatModule().sinkIndex.getMessagesCount();\n    }\n    \n    getConv2SearchCount(session: mail.session.Session, conv2Section: mail.section.Conv2Section): number {\n        let id = conv2Section.id;\n        let searchResults = this.getSearchResults(session);\n        if (searchResults && (id in searchResults)) {\n            return searchResults[id].count;\n        }\n        return 0;\n    }\n    \n    getConv2SearchAllSearched(session: mail.session.Session, conv2Section: mail.section.Conv2Section): boolean {\n        let id = conv2Section.id;\n        let searchResults = this.getSearchResults(session);\n        if (searchResults && (id in searchResults)) {\n            return searchResults[id].allSearched;\n        }\n        return true;\n    }\n\n    getConvActiveVoiceChatInfo(session: mail.session.Session, conv2: mail.section.Conv2Section) {\n        let users = this.getActiveVoiceChatUsers(session.hostHash, conv2.id);\n        return {\n            active: users.length > 0,\n            users: users\n        }\n    }\n\n\n    //=======================\n    //   REMOTE COUNTERS\n    //=======================\n    \n    getRemoteUnread(host: string): number {\n        return 0;\n    }\n    \n    getRemoteSectionElementsCount(host: string): number {\n        return 0;\n    }\n    \n    getRemoteSectionSearchCount(host: string): number {\n        return 0;\n    }\n    \n    getRemoteSectionSearchAllSearched(host: string): boolean {\n        return true;\n    }\n\n    \n    getConv2WithSpinner(session: mail.session.Session, conv2Section: mail.section.Conv2Section): boolean {\n        let sws = this.chatPlugin.sectionsWithSpinner;\n        if (sws[session.hostHash] && sws[session.hostHash][\"__all__\"]) {\n            return true;\n        }\n        if (!sws[session.hostHash]) {\n            return false;\n        }\n        return !!sws[conv2Section.id];\n    }\n    \n    //=======================\n    //        SEARCH\n    //=======================\n    \n    onFilterMessages(): void {\n        this.searchCountFilterUpdater.updateFilter(this.app.searchModel.get());\n    }\n    \n    onSearchCountFilterUpdate(): boolean {\n        let sm = this.app.searchModel.get();\n        let searchStr = sm.visible && sm.value && sm.value.length >= MessagesFilterUpdater.MIN_CHARS_NUM ? sm.value : \"\";\n        let localSession = this.app.sessionManager.getLocalSession();\n        for (let session of this.chatPlugin.getReadySessions()) {\n            let sections: mail.section.SectionService[] = [];\n            this.chatPlugin.chatSections[session.hostHash].forEach(x => sections.push(x));\n            session.conv2Service.collection.list.forEach(x => sections.push(x.section));\n            sections.forEach(section => {\n                if (!section) {\n                    return;\n                }\n                let isUserGroup = section.isUserGroup();\n                let id = section.getId();\n                let count = 0;\n                let allSearched = true;\n                if (searchStr != \"\") {\n                    let sinkIndex = session.sectionManager.sinkIndexManager.getIndexBySink(section.getChatSink());\n                    \n                    let seqLoaded = Math.max(0, section.getChatModule().sinkIndex.cursor.seq - ChatMessagesController.MESSAGES_TO_LOAD);\n                    let conv2Section: mail.section.Conv2Section = isUserGroup ? session.conv2Service.collection.find(x => x.section && x.section.getId() == id) : null;\n                    let messagesId = isUserGroup\n                        ? this.getConversationId(session, conv2Section)\n                        : this.getChannelId(session, section);\n                    if (messagesId in this.messages) {\n                        seqLoaded = this.messages[messagesId].takeCollectionSeq;\n                    }\n                    allSearched = seqLoaded == 0;\n                    for (let i = sinkIndex.entries.indexMap.length - 1; i >= seqLoaded; --i) {\n                        let idx = sinkIndex.entries.indexMap[i];\n                        if (idx === null || idx === undefined) {\n                            continue;\n                        }\n                        let entry = sinkIndex.entries.list[idx];\n                        if (!entry || typeof(entry.getMessage) != \"function\") {\n                            continue;\n                        }\n                        if (this.chatPlugin.filterMessagesForDisplay(entry) && ChatMessagesController.meetsFilter(entry, searchStr)) {\n                            count++;\n                        }\n                    }\n                }\n                if (isUserGroup) {\n                    this.updateConversationSearchResults(session, id, count, allSearched);\n                }\n                else {\n                    this.updateChannelSearchResults(session, id, count, allSearched);\n                }\n            });\n            if (session.hostHash != localSession.hostHash) {\n                this.sidebar.remoteSectionsLists[session.hostHash].sortedCollection.refresh();\n                this.sidebar.remoteConv2Lists[session.hostHash].sortedCollection.refresh();\n            }\n        }\n        this.sidebar.sectionList.sortedCollection.refresh();\n        this.sidebar.conv2List.sortedCollection.refresh();\n        this.isSearchOn = searchStr != \"\";\n        this.callViewMethod(\"changeIsSearchOn\", this.isSearchOn);\n        return true;\n    }\n    \n    updateConversationSearchResults(session: mail.session.Session, sectionId: string, count: number, allSearched: boolean) {\n        let convId = session.conv2Service.collection.find(x => x.section && x.section.getId() == sectionId).id;\n        let searchResults = this.getSearchResults(session);\n        if (convId in searchResults && searchResults[convId].count == count && searchResults[convId].allSearched == allSearched) {\n            return;\n        }\n        searchResults[convId] = { count, allSearched };\n        let isLocalSession = session.hostHash == this.app.sessionManager.getLocalSession().hostHash;\n        let collection = isLocalSession ? this.sidebar.conv2List.sortedCollection : (this.sidebar.remoteConv2Lists[session.hostHash] ? this.sidebar.remoteConv2Lists[session.hostHash].sortedCollection : null);\n        if (collection) {\n            let idx = collection.indexOfBy(cm => cm.id == convId);\n            if (idx >= 0) {\n                collection.triggerUpdateAt(idx);\n            }\n        }\n    }\n    \n    updateChannelSearchResults(session: mail.session.Session, sectionId: string, count: number, allSearched: boolean) {\n        let searchResults = this.getSearchResults(session);\n        if (sectionId in searchResults && searchResults[sectionId].count == count && searchResults[sectionId].allSearched == allSearched) {\n            return;\n        }\n        searchResults[sectionId] = { count, allSearched };\n        let isLocalSession = session.hostHash == this.app.sessionManager.getLocalSession().hostHash;\n        let collection = isLocalSession ? this.sidebar.sectionList.sortedCollection : (this.sidebar.remoteSectionsLists[session.hostHash] ? this.sidebar.remoteSectionsLists[session.hostHash].sortedCollection : null);\n        if (collection) {\n            let idx = collection.indexOfBy(cm => cm.getId() == sectionId);\n            if (idx >= 0) {\n                collection.triggerUpdateAt(idx);\n            }\n        }\n    }\n    \n    getSearchResults(session: mail.session.Session): SearchResults {\n        if (!this.searchResults[session.hostHash]) {\n            this.searchResults[session.hostHash] = {};\n        }\n        return this.searchResults[session.hostHash];\n    }\n    \n    onChatUpdateSearchStatsEvent(event: ChatUpdateSearchStatsEvent): void {\n        let session = this.app.sessionManager.getSessionByHostHash(event.hostHash);\n        if (!session) {\n            return;\n        }\n        let sectionId = event.sectionId;\n        let section = this.chatPlugin.chatSections[session.hostHash].find(x => x.getId() == sectionId);\n        let count = event.searchCount;\n        let allSearched = event.allSearched;\n        if (!section) {\n            return;\n        }\n        if (section.isUserGroup()) {\n            this.updateConversationSearchResults(session, sectionId, count, allSearched);\n        }\n        else {\n            this.updateChannelSearchResults(session, sectionId, count, allSearched);\n        }\n    }\n    \n    handleFilePaste(element: app.common.clipboard.ClipboardElement): boolean {\n        if (app.common.clipboard.Clipboard.FORMAT_SYSTEM_FILES in element.data && this.activeMessages) {\n            this.activeMessages.tryPaste(element, \"text\" in element.data ? element.data.text : null);\n            return true;\n        }\n        else if (element.data.file && element.data.file.element instanceof mail.section.OpenableSectionFile) {\n            let osf: mail.section.OpenableSectionFile = element.data.file.element;\n            osf.getBuffer().then(buff => {\n                this.activeMessages.pasteFile(osf.mimeType, buff, osf.path);\n            });\n            return true;\n        }\n        else if (element.data.files && element.data.files.filter((x: any) => !x || !(x.element instanceof mail.section.OpenableSectionFile)).length == 0) {\n            let prom = Q();\n            element.data.files.forEach((x: any) => {\n                let osf: mail.section.OpenableSectionFile = x.element;\n                prom = prom.then(() => {\n                    return osf.getBuffer().then(buff => {\n                        return this.activeMessages.pasteFile(osf.mimeType, buff, osf.path);\n                    });\n                });\n            });\n            return true;\n        }\n        return false;\n    }\n    \n    refreshActivePanelThumbs(): void {\n        if (this.activeMessages && this.activeMessages.thumbs) {\n            (<any>this.activeMessages.thumbs).processThumbs();\n        }\n    }\n\n    areAnySectionsExceptPrivate(): boolean {\n        let sectionsCount = this.chatPlugin.chatRootSections[this.app.sessionManager.getLocalSession().hostHash].list.filter(x => !x.isPrivate()).length;\n        let conversationsCount = this.chatPlugin.conv2Service.collection.list.length;\n        return sectionsCount > 0 || conversationsCount > 0;\n    }\n    \n    // onJoinVideoConference(event: Types.event.JoinVideoConferenceEvent): void {\n    //     this.callViewMethod(\"openVideoConferencePanel\");\n    //     let session = this.app.sessionManager.getSessionByHostHash(event.hostHash);\n    //     let section = event.section ? event.section : (event.conversation ? event.conversation.section : null);\n    //     if (session && section) {\n    //         this.videoConference.connect(session, section)\n    //         .fail(e => {\n    //             this.videoConference.disconnect();\n    //         });\n    //     }\n    // }\n    \n    // onLeaveVideoConference(event: Types.event.LeaveVideoConferenceEvent): void {\n    //     this.closeVideoConferencePanel();\n    // }\n    \n    // closeVideoConferencePanel(): void {\n    //     this.callViewMethod(\"closeVideoConferencePanel\");\n    // }\n    \n}\n\n\n(<any>ChatWindowController.prototype).className = \"com.privmx.plugin.chat.window.chat.ChatWindowController\";"],"sourceRoot":"../../../src"}