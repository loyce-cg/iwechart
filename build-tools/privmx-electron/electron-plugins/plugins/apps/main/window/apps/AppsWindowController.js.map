{"version":3,"sources":["window/apps/AppsWindowController.ts"],"names":[],"mappings":"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","file":"AppsWindowController.js","sourcesContent":["import {window, utils, mail, component, Q, Types} from \"pmc-mail\";\nimport Inject = utils.decorators.Inject;\nimport { i18n } from \"./i18n/index\";\nimport { UpdateAppsSpinnersEvent } from \"../../main/AppsPlugin\";\nimport { State, StatisticsChangeEvent, UsageStatisticsService } from \"../../usagestatistics/UsageStatisticsService\";\n\nexport interface SectionModel {\n    primary: boolean,\n    id: string,\n    name: string,\n    private: boolean,\n    breadcrumb: string\n    pinned: boolean;\n}\n\nexport interface ViewModel {\n    instanceName: string;\n    appWindows: {\n        id: string,\n        icon: string,\n        label: string,\n        count: number,\n        action: string\n    }[];\n    chatFullyLoaded: boolean;\n    notes2FullyLoaded: boolean;\n    tasksFullyLoaded: boolean;\n    calendarFullyLoaded: boolean;\n    appVersion?: string;\n    isElectron: boolean;\n}\n\nexport class AppsWindowController extends window.base.BaseAppWindowController {\n    \n    static textsPrefix: string = \"plugin.apps.window.apps.\";\n    \n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    @Inject sectionManager: mail.section.SectionManager;\n    @Inject userConfig: Types.app.ConfigEx;\n    sections: utils.collection.BaseCollection<mail.section.SectionService>;\n    sortedSectionsCollection: utils.collection.SortedCollection<SectionModel>;\n    sectionList: component.extlist.ExtListController<SectionModel>;\n    fullyLoadedModule: {[id: string]: any} = {};\n    userGuide: component.userguide.UserGuideController;\n    basicTooltip: component.tooltip.TooltipController;\n    pinnedSectionIds: string[] = [];\n    allSpinnersHidden: boolean = false;\n    session: mail.session.Session;\n    usageStats: UsageStatisticsService;\n    currentUsageStats: StatisticsChangeEvent;\n    \n    refreshBadgesLoaded(): void {\n        for (let id in this.fullyLoadedModule) {\n            this.callViewMethod(\"scheduleSetAppWindowBadgeFullyLoaded\", id, this.fullyLoadedModule[id]);\n        }\n    }\n    \n    constructor(parentWindow: window.container.ContainerWindowController) {\n        super(parentWindow, __filename, __dirname, null);\n        this.ipcMode = true;\n        this.session = this.app.sessionManager.getLocalSession();\n        this.setPluginViewAssets(\"apps\");\n        this.openWindowOptions.fullscreen = true;\n        this.openWindowOptions.cssClass = \"app-window\";\n        this.basicTooltip = this.addComponent(\"basicTooltip\", this.componentFactory.createComponent(\"tooltip\", [this]));\n        this.basicTooltip.getContent = (id: string) => {\n            let dblClick: boolean = this.app.userPreferences.getUnreadBadgeUseDoubleClick();\n            return this.app.localeService.i18n(`markAllAsRead.tooltip.${dblClick?'double':'single'}Click`);\n        };\n\n        this.refreshPinnedSectionIdsList();\n        this.app.userPreferences.eventDispatcher.addEventListener<Types.event.UserPreferencesChangeEvent>(\"userpreferenceschange\", (event) => {\n            this.onUserPreferencesChange(event);\n        });\n\n        this.navBar.activeLogo = false;\n    }\n\n    updateStatisticsInView(event: StatisticsChangeEvent): void {\n        this.callViewMethod(\"updateStatistics\", event.messages, event.tasks, event.files);\n    }\n    \n    registerBadgesEvents(): void {\n        this.parent.appWindows.forEach(x => {\n            if (x.count) {\n                this.registerChangeEvent(x.count.changeEvent, () => {\n                    this.callViewMethod(\"setAppWindowBadge\", x.id, x.count.get());\n                }, \"multi\");\n            }\n            if (x.countFullyLoaded) {\n                this.registerChangeEvent(x.countFullyLoaded.changeEvent, () => {\n                    this.fullyLoadedModule[x.id] = x.countFullyLoaded.get();\n                    this.refreshBadgesLoaded();\n                    // this.callViewMethod(\"scheduleSetAppWindowBadgeFullyLoaded\", x.id, x.countFullyLoaded.get());\n\n                }, \"multi\");\n            }\n        });\n    }\n\n    registerBadgesEvents_old(): void {\n        this.parent.appWindows.forEach(x => {\n            if (x.count) {\n                this.registerChangeEvent(x.count.changeEvent, () => {\n                    this.callViewMethod(\"setAppWindowBadge\", x.id, x.count.get());\n                }, \"multi\");\n            }\n            if (x.countFullyLoaded) {\n                this.registerChangeEvent(x.countFullyLoaded.changeEvent, () => {\n                    this.callViewMethod(\"scheduleSetAppWindowBadgeFullyLoaded\", x.id, x.countFullyLoaded.get());\n                }, \"multi\");\n            }\n        });\n    }\n    \n    init() {\n        return Q().then(() => {\n            return this.app.mailClientApi.prepareSectionManager();\n        })\n        .then(() => {\n            this.sections = this.addComponent(\"sections\", new utils.collection.FilteredCollection(this.sectionManager.filteredCollection , x => {\n                return x.hasAccess() && !x.isPrivateOrUserGroup() && (x.isChatModuleEnabled() || x.isKvdbModuleEnabled() || x.isFileModuleEnabled());\n            }));\n            let transformCollection = this.addComponent(\"transformCollection\", new utils.collection.TransformCollection<SectionModel, mail.section.SectionService>(this.sections, s => {\n                  let parents: mail.section.SectionService[] = [];\n                  let lastParent = s.getParent();\n                  while (lastParent) {\n                    parents.unshift(lastParent);\n                    lastParent = lastParent.getParent();\n                  }\n                  let breadcrumb = \"\";\n                  parents.forEach(p => {\n                    breadcrumb += p.getName() + \" / \";\n                  });\n                \n                    return {\n                        primary: s.sectionData.primary,\n                        id: s.getId(),\n                        name: s.getName(),\n                        private: s.getScope() == \"private\",\n                        breadcrumb: breadcrumb,\n                        pinned: this.pinnedSectionIds.indexOf(s.getId()) >= 0,\n                    };\n            }));\n            \n            this.sortedSectionsCollection = this.addComponent(\"sortedList\", new utils.collection.SortedCollection(transformCollection, utils.Utils.makeMultiComparatorSorter(this.sectionComparator_isPrimary.bind(this), this.sectionComparator_isPinned.bind(this))));\n\n            this.sectionList = this.addComponent(\"sectionList\", this.componentFactory.createComponent(\"extlist\", [this, this.sortedSectionsCollection]));\n            this.sectionList.ipcMode = true;\n            this.bindEvent(this.app, \"first-login-info-closed\", this.showFilesUserGuide.bind(this));\n            return this.app.mailClientApi.loadUserPreferences();\n        })\n        .then(() => {\n            this.registerBadgesEvents();\n        })\n        .then(() => {\n            this.usageStats = new UsageStatisticsService(this.app, this.app.sessionManager.getLocalSession());       \n            this.usageStats.eventDispatcher.addEventListener<StatisticsChangeEvent>(\"statistics-change\", event => {\n                this.currentUsageStats = event;\n                this.updateStatisticsInView(event);\n            });\n        })\n        .then(() => {\n            this.app.addEventListener<UpdateAppsSpinnersEvent>(\"update-apps-spinners\", e => {\n                this.callViewMethod(\"updateSpinners\", e.sectionId, e.moduleName, e.state, true);\n            });\n        });\n    }\n    \n    getModel(): ViewModel {\n        let chatFullyLoaded: boolean = false;\n        let notes2FullyLoaded: boolean = false;\n        let tasksFullyLoaded: boolean = false;\n        let calendarFullyLoaded: boolean = false;\n        this.parent.appWindows.forEach(x => {\n            if (x.countFullyLoaded && x.countFullyLoaded.get()) {\n                if (x.id == \"chat\") {\n                    chatFullyLoaded = true;\n                }\n                else if (x.id == \"notes2\") {\n                    notes2FullyLoaded = true;\n                }\n                else if (x.id == \"tasks\") {\n                    tasksFullyLoaded = true;\n                }\n                else if (x.id == \"calendar\") {\n                    calendarFullyLoaded = true;\n                }\n            }\n        });\n        return {\n            instanceName: this.userConfig.instanceName,\n            appWindows: this.getAppWindows(),\n            chatFullyLoaded: chatFullyLoaded,\n            notes2FullyLoaded: notes2FullyLoaded,\n            tasksFullyLoaded: tasksFullyLoaded,\n            calendarFullyLoaded: calendarFullyLoaded,\n            appVersion: this.app.getVersion().ver,\n            isElectron: this.app.isElectronApp()\n        };\n    }\n    \n    onViewSetAllSpinnersHidden(allSpinnersHidden: boolean): void {\n        this.allSpinnersHidden = allSpinnersHidden;\n    }\n\n    onViewLoad(): void {\n        if (this.currentUsageStats) {\n            this.updateStatisticsInView(this.currentUsageStats);\n        }\n    }\n    \n    onActivate(): void {\n        this.usageStats.refresh().catch(e => {\n            this.logError(e);\n        });\n    }\n\n    getAppWindows() {\n        return this.parent.appWindows\n            .filter(x => x.visible !== false)\n            .map(x => {\n                return {\n                    id: x.id,\n                    icon: x.icon,\n                    label: x.label,\n                    count: x.count ? x.count.get() : 0,\n                    action: x.action,\n                    order: x.order ? x.order : 0,\n                };\n            }).sort((a, b) => {\n                return a.order - b.order;\n            });\n    }\n    \n    onViewSectionClick(id: string): void {\n        let selected = this.sectionManager.getSection(id);\n        let singletonId = \"sectionsummarywindow-\"+id;\n        let registered = this.app.manager.getSingleton(singletonId);\n\n        if (registered) {\n            registered.controller.nwin.focus();\n            registered.controller.reopenWithParams([this, selected]);\n            return;\n        }\n        this.app.ioc.create(window.sectionsummary.SectionSummaryWindowController, [this, this.session, selected]).then(win => {\n            this.app.openChildWindow(win);\n            this.app.manager.registerSingleton(singletonId, win.manager);\n        });\n    }\n    \n    onViewAppWindowOpen(appWindowId: string): void {\n        this.parent.redirectToAppWindow(appWindowId);\n    }\n    \n    onNwinInitialized(): Q.Promise<void> {\n        return super.onNwinInitialized()\n        .then(() => {\n            this.refreshBadgesLoaded();\n        })\n    }\n\n    isFirstAdmin(): Q.Promise<boolean> {\n        return Q().then(() => {\n            return this.app.mailClientApi.privmxRegistry.getIdentityProvider()\n        })\n        .then(identityProvider => {\n            if (! identityProvider.isAdmin()) {\n                return false;\n            }\n            else {\n                return this.app.mailClientApi.privmxRegistry.getUserAdminService().then(admService => admService.refreshUsersCollection().thenResolve(admService))\n                .then(adminService => {\n                    return adminService.usersCollection.size() == 1;                \n                })     \n            }\n        })\n    }\n\n    isStartingContentAvailable(): Q.Promise<boolean> {\n        return Q().then(() => {\n            return this.sectionManager.load()\n        })\n        .then(() => {\n            const privateSectionId = this.sectionManager.getMyPrivateSection().getId();\n            if (this.sectionManager.sectionsCollection.list.length == 1 && this.sectionManager.sectionsCollection.list[0].getId() == privateSectionId) {\n                return false;\n            }\n            return true;\n        })\n    }\n\n    async showFilesUserGuide() {\n        return Q().then(() => {\n            return Q.all([\n                this.isFirstAdmin(),\n                this.isStartingContentAvailable()\n            ])\n        })\n        .then(res => {\n            let [firstAdmin, startingContent] = res;\n            return firstAdmin && startingContent ? this.retrieveFromView(\"getFilesPos\") : null;\n        })\n        .then((result: {x: number, y: number}) => {\n            if (! result) {\n                return;\n            }\n            this.userGuide = this.addComponent(\"userguide\", this.componentFactory.createComponent(\"userguide\", [this, {\n                width: 200,\n                height: 200,\n                centerX: result.x,\n                centerY: result.y,\n                shape: \"rounded-rectangle\",\n                text: this.i18n(\"plugin.apps.window.apps.filesUserGuide.text\"),\n                side: \"bottom\",\n            }]));\n            this.userGuide.ipcMode = true;\n            this.userGuide.setOnClick(() => {\n                this.userGuide.close();\n                this.callViewMethod(\"closeFilesUserGuide\");\n                this.removeComponent(\"userguide\");\n                this.parent.redirectToAppWindow(\"notes2\");        \n            });\n\n            this.callViewMethod(\"showFilesUserGuide\");\n        })\n    }\n    \n    onViewModuleBadgeClick(moduleName: \"chat\"|\"notes2\"|\"tasks\"|\"calendar\"): void {\n        if (!this.fullyLoadedModule[moduleName] || moduleName == \"calendar\" || !this.allSpinnersHidden) {\n            return;\n        }\n        this.dispatchEvent<Types.event.TryMarkAsReadEvent>({\n            type: \"try-mark-as-read\",\n            moduleName: moduleName,\n        });\n    }\n    \n    onViewSectionBadgeClick(sectionId: string): void {\n        if (!this.fullyLoadedModule[\"chat\"] || !this.fullyLoadedModule[\"notes2\"] || !this.fullyLoadedModule[\"tasks\"] || !this.fullyLoadedModule[\"calendar\"] || !this.allSpinnersHidden) {\n            return;\n        }\n        this.dispatchEvent<Types.event.TryMarkAsReadEvent>({\n            type: \"try-mark-as-read\",\n            sectionId,\n        });\n    }\n    \n    sectionComparator_isPrimary(a: SectionModel, b: SectionModel): number {\n        let ap = a.primary ? 1 : 0;\n        let bp = b.primary ? 1 : 0;\n        return bp -ap;\n    }\n    \n    sectionComparator_isPinned(a: SectionModel, b: SectionModel): number {\n        let ap = this.getIsPinned(a) ? 1 : 0;\n        let bp = this.getIsPinned(b) ? 1 : 0;\n        return bp - ap;\n    }\n    \n    getIsPinned(sectionModel: SectionModel): boolean {\n        return this.pinnedSectionIds.indexOf(sectionModel.id) >= 0;\n    }\n    \n    refreshPinnedSectionIdsList(): void {\n        let prevStr = JSON.stringify(this.pinnedSectionIds);\n        this.pinnedSectionIds = this.app.userPreferences.getPinnedSectionIds();\n        let newStr = JSON.stringify(this.pinnedSectionIds);\n        if (prevStr != newStr && this.sortedSectionsCollection) {\n            this.sortedSectionsCollection.rebuild();\n        }\n    }\n    \n    onUserPreferencesChange(event: Types.event.UserPreferencesChangeEvent) {\n        super.onUserPreferencesChange(event);\n        this.refreshPinnedSectionIdsList();\n    }\n}\n\n(<any>AppsWindowController.prototype).className = \"com.privmx.plugin.apps.window.apps.AppsWindowController\";"],"sourceRoot":"../../../src"}