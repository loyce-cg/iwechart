{"version":3,"sources":["usagestatistics/UsageStatisticsService.ts"],"names":[],"mappings":"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","file":"UsageStatisticsService.js","sourcesContent":["import { app, mail, utils, Types } from \"pmc-mail\"\nexport interface State {\n    messages: number;\n    files: number;\n    tasks: number;\n}\n\nexport interface StatisticsChangeEvent extends State {\n    type: \"statistics-change\";\n}\nexport class UsageStatisticsService {\n    private static readonly PREFERENCES_MAIN_KEY = \"usage-statistics-service\";\n    private static readonly STATE_KEY = UsageStatisticsService.PREFERENCES_MAIN_KEY + \":state\";\n    private loadedModules: {[name: string]: boolean} = {};\n    private currentState: State = {files: null, messages: null, tasks: null};\n    private stateModifiedTime: number = 0;\n    private initializeDefer: Promise<void>;\n    private refreshLock: boolean = false;\n    eventDispatcher: utils.EventDispatcher;\n\n\n    constructor(private app: app.common.CommonApplication, private session: mail.session.Session) {\n        this.eventDispatcher = new utils.EventDispatcher();\n        this.bindToModulesLoadEvents();\n    }\n    \n    private bindToModulesLoadEvents(): void {\n        this.app.bindEvent<Types.event.PluginModuleReadyEvent>(this.app, \"plugin-module-ready\", event => {\n            this.setModuleLoaded(event.name);                \n        })\n    }\n\n    private async setModuleLoaded(moduleName: string): Promise<void> {\n        this.loadedModules[moduleName] = true;\n        if (moduleName == \"chat\") {\n            this.getSectionsMessagesCount();\n        }\n        if (moduleName == \"tasks\") {\n            this.getTasksCount();\n        }\n\n        if (moduleName == \"notes2\") {\n            this.getFilesAndDirsCount();\n        }\n    }\n\n    private async getSectionsMessagesCount(): Promise<number> {\n        if (\"chat\" in this.loadedModules) {\n            const manager = await this.session.mailClientApi.privmxRegistry.getSinkIndexManager();\n            const messages = manager.sinkIndexCollection.list.filter(x => x.sink.acl == \"shared\").reduce((a, b) => a + b.getReadableMessagesCount(), 0)    \n            this.updateMessagesState(messages);\n            return messages;\n        }\n        else {\n            return this.currentState.messages;\n        }\n    }\n\n    private async updateMessagesState(messages: number): Promise<void> {\n        if (this.currentState.messages != messages) {\n            this.currentState.messages = messages;\n            await this.saveState(this.currentState);\n        }\n    }\n\n    private async getTasksCount(): Promise<number> {\n        if (\"tasks\" in this.loadedModules) {\n            let tasks = await this.app.components[\"tasks-plugin\"];\n            const allTasks = await tasks.getTasks(this.session, null);\n            const tasksCount = Object.keys(allTasks).length;\n            this.updateTasksState(tasksCount);\n            return tasksCount;    \n        }\n        else {\n            return this.currentState.tasks;\n        }\n    }\n\n    private async updateTasksState(tasks: number): Promise<void> {\n        if (this.currentState.tasks != tasks) {\n            this.currentState.tasks = tasks;\n            await this.saveState(this.currentState);\n        }\n    }\n    \n    private async getAllFileTrees() {\n        const list = await Promise.all(this.session.sectionManager.filteredCollection.list.map(x => x.getFileTree()));\n        return list.filter(x => !!x);\n    }\n    \n    private sumFilesAndDirsInFileTrees(fileTrees: mail.filetree.nt.Tree[]) {\n        return fileTrees.reduce((a, b) => a + b.collection.size(), 0);\n    }\n\n    private async getFilesAndDirsCount(): Promise<number> {\n        if (\"notes2\" in this.loadedModules) {\n            const fileTrees = await this.getAllFileTrees();\n            const filesCount = this.sumFilesAndDirsInFileTrees(fileTrees);\n            this.updateFilesState(filesCount);\n            return filesCount;    \n        }\n        else {\n            return this.currentState.files;\n        }\n    }\n\n    private async updateFilesState(files: number): Promise<void> {\n        if (this.currentState.files != files) {\n            this.currentState.files = files;\n            await this.saveState(this.currentState);\n        }\n    }\n\n    public async init(): Promise<void> {\n        if (! this.initializeDefer) {\n            this.initializeDefer = new Promise<void>(async(resolve) => {\n                return this.loadState()\n                .then(result => {\n                    this.currentState = result;\n                    this.dispatchChangeEvent();\n                    resolve();\n                })\n            });    \n        }\n        \n        return this.initializeDefer;\n    }\n\n\n\n    private async loadState(): Promise<State> {\n        const prefs = await this.session.mailClientApi.privmxRegistry.getUserPreferences();\n        const stateRaw = prefs.getValue(UsageStatisticsService.STATE_KEY, null);\n        const state = stateRaw ? <State>JSON.parse(stateRaw): <State>{messages: null, files: null, tasks: null};\n        return state;\n    }\n\n    private async saveState(state: State): Promise<void> {\n        let currTime = Date.now();\n        if (currTime < this.stateModifiedTime) {\n            return;\n        }\n        this.dispatchChangeEvent();\n        this.stateModifiedTime = currTime;\n        const prefs = await this.session.mailClientApi.privmxRegistry.getUserPreferences();\n        await prefs.set(UsageStatisticsService.STATE_KEY, JSON.stringify(state), true);\n    }\n\n    private dispatchChangeEvent(): void {\n        this.eventDispatcher.dispatchEvent<StatisticsChangeEvent>(<StatisticsChangeEvent>{\n            type: \"statistics-change\",\n            messages: this.currentState.messages,\n            files: this.currentState.files,\n            tasks: this.currentState.tasks\n        });\n    }\n\n    public async refresh(): Promise<void> {\n        if (this.refreshLock) {\n            return;\n        }\n        this.refreshLock = true;\n        await this.init();\n        await this.getFilesAndDirsCount();\n        await this.getTasksCount();\n        await this.getSectionsMessagesCount();    \n        this.refreshLock = false;\n    }\n}\n(<any>UsageStatisticsService.prototype).className = \"com.privmx.plugin.apps.usagestatistics.UsageStatisticsService\";"],"sourceRoot":"../../src"}