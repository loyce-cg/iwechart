{"version":3,"sources":["window/editor/EditorWindowController.ts"],"names":[],"mappings":"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","file":"EditorWindowController.js","sourcesContent":["import {app, mail, utils, window as wnd, Types, privfs, Q, component, Logger as RootLogger} from \"pmc-mail\";\nimport {MindmapHelpWindowController} from \"../mindmaphelp/MindmapHelpWindowController\";\nimport {EditorPlugin, NotesPreferences, PartialTasksPlugin} from \"../../main/EditorPlugin\";\nimport Dependencies = utils.decorators.Dependencies;\nimport { LocalFfWatcher } from \"../../main/LocalFsWatcher\";\nimport {i18n} from \"./i18n/index\";\nconst Logger = RootLogger.get(\"EditorWindowController\");\nexport interface Options {\n    docked: boolean;\n    newFile: boolean;\n    entry: app.common.shelltypes.OpenableElement;\n    editMode: boolean;\n    preview?: boolean;\n    action: app.common.shelltypes.ShellOpenAction;\n}\n\nexport interface EntryModel {\n    extl: string;\n    fileName: string;\n    title: string;\n    mimeType: string;\n    canBeEditable: boolean;\n    boundTasksStr: string;\n    hostHash: string;\n    sectionId: string;\n}\n\nexport interface Model {\n    currentViewId: number;\n    previewMode: boolean;\n    printMode: boolean;\n    docked: boolean;\n    initialStyleName: string;\n}\n\n@Dependencies([\"notification\", \"editorbuttons\"])\nexport class EditorWindowController extends wnd.base.BaseWindowController {\n    \n    static textsPrefix: string = \"plugin.editor.window.editor.\";\n    \n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    static DirtyWindowsModel = new utils.Model<EditorWindowController[]>([]);\n    \n    // @Inject client: privfs.core.Client;\n    // @Inject identity: privfs.identity.Identity\n    // @Inject contactService: mail.contact.ContactService;\n    // @Inject sectionManager: mail.section.SectionManager;\n\n\n    currentViewId: number;\n    docked: boolean;\n    newFile: boolean;\n    openableElement: app.common.shelltypes.OpenableElement;\n    openableEditableElement: app.common.shelltypes.OpenableElement;\n    openableFileElement: app.common.shelltypes.OpenableFile;\n    editMode: boolean;\n    previewMode: boolean;\n    handle: privfs.fs.descriptor.Handle;\n    mimeType: string;\n    openingStartEditModeQuestion: boolean;\n    lockInterval: NodeJS.Timer;\n    autoSaveInterval: NodeJS.Timer;\n    releasingLock: boolean;\n    editorPlugin: EditorPlugin;\n    notesPreferences: NotesPreferences;\n    personsComponent: component.persons.PersonsController;\n    notifications: component.notification.NotificationController;\n    editorButtons: component.editorbuttons.EditorButtonsController;\n    taskTooltip: component.tasktooltip.TaskTooltipController;\n    taskChooser: component.taskchooser.TaskChooserController;\n    prepareToPrintDeferred: Q.Deferred<void> = null;\n    viewLoadedDeferred: Q.Deferred<void> = Q.defer();\n    printMode: boolean;\n    isPrinting: boolean = false;\n    isSavingAsPdf: boolean = false;\n    watcher: LocalFfWatcher;\n    tasksPlugin: PartialTasksPlugin;\n    initialStyleName: string = component.mindmap.Mindmap.DEFAULT_STYLE_NAME;\n    prepareBeforeShowingDeferred: Q.Deferred<void> = null;\n    lastRecoveryFilePath: string;\n    taskChangedHandlerBound: any;\n    updatedFullFileName: string = null;\n    isRenaming: boolean = false;\n    afterViewLoadedDeferred: Q.Deferred<void> = Q.defer();\n    editorOpenDate: number;\n    lastDescriptorInfo: any;\n\n    constructor(parentWindow: Types.app.WindowParent, public session: mail.session.Session, public options: Options) {\n        super(parentWindow, __filename, __dirname);\n        this.ipcMode = true;\n        this.tasksPlugin = this.app.getComponent(\"tasks-plugin\");\n        this.taskChangedHandlerBound = this.taskChangedHandler.bind(this);\n        this.tasksPlugin.watch(this.session, \"task\", \"*\", \"*\", this.taskChangedHandlerBound);\n        if (options.action == app.common.shelltypes.ShellOpenAction.PRINT) {\n            this.addViewScript({path: \"build/pdf/html2pdf.js/dist/html2pdf.bundle.min.js\"});\n        }\n        this.personsComponent = this.addComponent(\"persons\", this.componentFactory.createComponent(\"persons\", [this]));\n        this.notifications = this.addComponent(\"notifications\", this.componentFactory.createComponent(\"notification\", [this]));\n        this.editorButtons = this.addComponent(\"editorbuttons\", this.componentFactory.createComponent(\"editorbuttons\", [this]));\n        this.editorButtons.setSession(this.session);\n        this.taskTooltip = this.addComponent(\"tasktooltip\", this.componentFactory.createComponent(\"tasktooltip\", [this]));\n        this.taskTooltip.getContent = (taskId: string): string => {\n            return this.tasksPlugin.getTaskTooltipContent(this.session, taskId);\n        };\n        this.taskChooser = this.addComponent(\"taskchooser\", this.componentFactory.createComponent(\"taskchooser\", <any>[this, this.app, {\n            createTaskButton: false,\n            includeTrashed: false,\n            popup: true,\n            session: this.session\n        }]));\n        this.currentViewId = 1;\n        this.docked = !!options.docked;\n        this.newFile = options.newFile;\n        this.openableElement = options.entry;\n        this.openableEditableElement = this.openableElement && this.openableElement.isEditable() ?  this.openableElement : null;\n        this.openableFileElement = this.openableElement instanceof app.common.shelltypes.OpenableFile ? this.openableElement : null;\n        this.previewMode = !!options.preview || (this.openableEditableElement == null && this.openableElement != null);//this.openableEditableElement == null || !!options.preview;\n        this.editMode = !this.previewMode && !!options.editMode && this.openableEditableElement != null;\n        this.editorPlugin = this.app.getComponent(\"editor-plugin\");\n        this.setPluginViewAssets(\"editor\");\n        if (this.docked) {\n            this.openWindowOptions.widget = false;\n            this.openWindowOptions.decoration = false;\n        }\n        else {\n            this.printMode = options.action == app.common.shelltypes.ShellOpenAction.PRINT;\n            let availWidth = this.app.isElectronApp() ? this.app.getScreenResolution().width : window.innerWidth;\n            let windowWidth = Math.min(1200, 0.8 * availWidth);\n            let title = this.getTitle();\n            this.openWindowOptions = {\n                toolbar: false,\n                maximized: false,\n                show: false,\n                hidden: this.printMode,\n                position: \"center\",\n                minWidth: 450,\n                minHeight: 215,\n                width: this.printMode ? (this.app.isElectronApp() ? 700 : 760) : windowWidth,\n                height: \"75%\",\n                resizable: true,\n                title: title,\n                icon: this.openableElement ? this.app.shellRegistry.resolveIcon(this.openableElement.getMimeType()) : \"application/x-stt\",\n                preTitleIcon: this.getPreTitleIcon(),\n                keepSpinnerUntilViewLoaded: true,\n                manualSpinnerRemoval: true,\n            };\n            if (this.printMode) {\n                this.openWindowOptions.widget = false;\n            }\n        }\n\n\n        let client = this.session.sectionManager.client;\n        this.registerPmxEvent(client.storageProviderManager.event, this.onStorageEvent);\n        if (this.app.isElectronApp() && this.openableElement && (<any>this.openableElement).openableElementType == \"LocalOpenableElement\") {\n            this.watcher = new LocalFfWatcher();\n            this.watcher.watch(this.openableElement.getElementId(), this.onChangeLocalContent.bind(this));\n        }\n        \n        this.editorOpenDate = Date.now();\n\n        this.bindEvent<Types.event.FileLockChangedEvent>(this.app, \"file-lock-changed\", event => {\n            if (this.openableFileElement) {\n                const did = this.openableFileElement.handle.descriptor.ref.did;\n                if (did == event.did) {\n                    this.updateLockUnlockButtons();\n                }\n            }\n        });\n\n        this.enableTaskBadgeAutoUpdater();\n        this.prepareBeforeShowing();\n        this.bindEvent<Types.event.FileRenamedEvent>(this.app, \"fileRenamed\", event => {\n            if (!this.openableElement) {\n                return;\n            }\n            let newFullFileName: string = null;\n            if (event.isLocal) {\n                if (this.app.isElectronApp() && (<any>this.openableElement).openableElementType == \"LocalOpenableElement\") {\n                    if (event.oldPath == this.openableElement.getElementId() || (this.updatedFullFileName && event.oldPath == this.updatedFullFileName)) {\n                        newFullFileName = event.newPath;\n                        (<any>this.openableElement).reopenRenamed(event.newPath.substr(event.newPath.lastIndexOf(\"/\") + 1));\n                    }\n                }\n            }\n            else {\n                if (this.openableElement instanceof mail.section.OpenableSectionFile && (this.openableElement.path == event.oldPath || (this.updatedFullFileName && event.oldPath == this.updatedFullFileName))) {\n                    let hostHash = event.hostHash || this.app.sessionManager.getLocalSession().hostHash;\n                    if (hostHash == this.session.hostHash) {\n                        newFullFileName = event.newPath;\n                        let id = this.openableElement.id;\n                        this.openableElement.name = event.newPath.substr(event.newPath.lastIndexOf(\"/\") + 1);\n                        this.openableElement.id = id.substr(0, id.indexOf(\"|/\") + 2) + this.openableElement.name;\n                        this.openableElement.path = newFullFileName;\n                    }\n                }\n            }\n            if (newFullFileName) {\n                let newFileName: string = newFullFileName.substr(newFullFileName.lastIndexOf(\"/\") + 1);\n                this.updateFileName(newFileName, newFullFileName, this.getTitle(newFullFileName));\n            }\n        });\n    }\n\n    getButtonsStateWithUpdatedLock(): Q.Promise<component.editorbuttons.ButtonsState> {\n        return Q().then(() => {\n            let state = this.getButtonsState();\n            return Q.all([\n                this.newFile ? Q.resolve(false) : this.isFileLocked(), // jezeli nowy plik, to nie sprawdzaj lockow, tylko zworc wartosci domyslne\n                this.newFile ? Q.resolve(false) : this.canUnlockFile()\n            ])\n            .then(res => {\n                let [locked, canUnlock] = res;\n                state.lock = !locked;\n                state.unlock = locked && canUnlock;\n                return state;\n            })\n        })\n    }\n    \n    getButtonsState(): component.editorbuttons.ButtonsState {\n        let state = this.editorButtons.getDefaultButtonsState();\n        state.enabled = this.previewMode;\n        state.print = true;\n        state.saveAsPdf = true;\n        // state.unlock = false;\n        // if (this.openableElement && this.app.isElectronApp()) {\n        //     let entryName = this.openableElement.getName();\n        //     let entryExtl = entryName.substr(entryName.lastIndexOf(\".\"))\n        //     if ((<any>this.openableElement.mimeType).startsWith(\"text/\") || entryExtl == \".stx\" || entryExtl == \".txt\") {\n        //         state.unlock = (<any>this.app).externalFilesService.isElementRegisteredAndLocked(this.openableElement.getElementId());\n        //     }\n        // }\n        return state;\n    }\n    \n    init() {\n        return this.editorPlugin.getNotesPreferences().then(notesPreferences => {\n            this.notesPreferences = notesPreferences;\n        })\n    }\n    \n    onStorageEvent(event: privfs.types.descriptor.DescriptorNewVersionEvent): void {\n        if (event.type == \"descriptor-new-version\" && this.openableFileElement && event.descriptor.ref.id == this.openableFileElement.handle.ref.id) {\n            this.onChangeContent();\n        }\n    }\n    \n    onChangeContent(): void {\n        this.getEntryModel().then(model => {\n            if (model) {\n                this.callViewMethod(\"setBoundTasksStr\", model.boundTasksStr);\n            }\n        });\n        if (!this.previewMode || this.handle == null) {\n            return;\n        }\n        let currentViewId = this.currentViewId;\n        let handle = this.handle;\n        this.addTaskEx(this.i18n(\"plugin.editor.window.editor.task.reload.text\"), true, () => {\n            return Q().then(() => {\n                return handle.isModifiedRemote();\n            })\n            .then(modified => {\n                if (!modified) {\n                    return;\n                }\n                return Q().then(() => {\n                    handle.updateToLastVersion();\n                    return handle.read().then(c => c.getText());\n                })\n                .then(text => {\n                    this.updateCachedStyleName(text);\n                    this.updateTaskStatuses(text);\n                    this.callViewMethod(\"updateContentPreview\", currentViewId, text);\n                });\n            });\n        });\n    }\n    \n    onChangeLocalContent(): void {\n        if (!this.previewMode) {\n            return;\n        }\n        let currentViewId = this.currentViewId;\n        this.addTaskEx(this.i18n(\"plugin.editor.window.editor.task.reload.text\"), true, () => {\n            return Q().then(() => {\n                return Q().then(() => {\n                    return this.openableElement.getContent()\n                })\n                .then(content => {\n                    return content.buffer.toString(\"utf8\");\n                })\n                .then(text => {\n                    this.updateTaskStatuses(text);\n                    this.callViewMethod(\"updateContentPreview\", currentViewId, text);\n                });\n            })\n            .fail((e) => {})\n        });\n    }\n    \n    getModel(): Model {\n        return {\n            currentViewId: this.currentViewId,\n            previewMode: this.previewMode,\n            printMode: this.printMode,\n            docked: this.docked,\n            initialStyleName: this.initialStyleName,\n        };\n    }\n    \n    prepareBeforeShowing(): Q.Promise<void> {\n        if (this.prepareBeforeShowingDeferred) {\n            return this.prepareBeforeShowingDeferred.promise.isFulfilled() ? null : this.prepareBeforeShowingDeferred.promise;\n        }\n        this.prepareBeforeShowingDeferred = Q.defer();\n        return Q()\n        .then(() => {\n            return super.prepareBeforeShowing();\n        })\n        .then(() => {\n            let el = this.options && this.options.entry && this.options.entry instanceof mail.section.OpenableSectionFile ? this.options.entry : null;\n            if (el && el.section && el.handle && el.handle.ref) {\n                return el.section.getFileTree().then(tree => {\n                    let entry = tree.collection.find(x => x && x.ref && x.ref.did == el.handle.ref.did);\n                    if (entry) {\n                        return this.app.fileStyleResolver.getStyle(entry);\n                    }\n                })\n                .then(style => {\n                    if (style && style.styleName && style.styleName in component.mindmap.Mindmap.AVAILABLE_STYLES) {\n                        this.initialStyleName = style.styleName;\n                        this.openWindowOptions.backgroundColor = component.mindmap.Mindmap.STYLE_BACKGROUNDS[style.styleName];\n                        let opts = (<any>this.loadWindowOptions);\n                        if (!opts.extraBodyAttributes) {\n                            opts.extraBodyAttributes = {};\n                        }\n                        opts.extraBodyAttributes[\"data-style-name\"] = style.styleName;\n                    }\n                    this.prepareBeforeShowingDeferred.resolve();\n                });\n            }\n            else {\n                this.prepareBeforeShowingDeferred.resolve();\n            }\n        });\n    }\n    \n    onViewLoad(): void {\n        this.viewLoadedDeferred.resolve();\n        this.stopLockInterval();\n        this.addTask(this.i18n(\"plugin.editor.window.editor.task.load.text\"), true, () => {\n            let currentViewId = this.currentViewId;\n            let openableElement = this.openableElement;\n            let openableFileElement = this.openableFileElement;\n            if (openableElement == null) {\n                return;\n            }\n            return Q().then(() => {\n                return this.getButtonsStateWithUpdatedLock()\n                .then(buttonsState => {\n                    this.editorButtons.callViewMethod(\"setButtonsState\", buttonsState)\n                })\n            })\n            .then(() => {\n                if (openableFileElement == null && openableElement) {\n                    return Q().then(() => {\n                        return openableElement.getContent()\n                    })\n                    .then(content => {\n                        return content.buffer.toString(\"utf8\");\n                    });\n                }\n                else {\n                    return Q().then(() => {\n                        return openableFileElement.fileSystem.openFile(openableFileElement.path, privfs.fs.file.Mode.READ_WRITE);\n                    })\n                    .then(handle => {\n                        if (this.currentViewId != currentViewId) {\n                            return;\n                        }\n                        this.handle = handle;\n                        if (!this.editMode) {\n                            return;\n                        }\n                    })\n                    .then(() => {\n                        // this.editorPlugin.setContainerEventsReadStatus(this.entry, true, false);\n                        return this.handle && this.currentViewId == currentViewId ? this.handle.read().then(c => c.getText()) : null;\n                    });\n                }\n            })\n            .then(text => {\n                this.updateCachedStyleName(text);\n                if (this.currentViewId != currentViewId) {\n                    return;\n                }\n                return this.getEntryModel().then(model => {\n                    this.updateTaskStatuses(text || \"\");\n                    this.callViewMethod(\"load\", currentViewId, text, this.docked, this.editMode, model, this.newFile, this.notesPreferences);\n                    this.startLockInterval();\n                    this.startAutoSaveInterval();\n                })\n                .then(() => {\n                    return this.updateLockUnlockButtons();\n                })\n            })\n            .then(() => {\n                let descriptor = this.handle.descriptor;\n                this.lastDescriptorInfo = {did: descriptor.ref.did, version: descriptor.lastVersion.raw.signature, serverDate: descriptor.lastVersion.raw.serverDate, modifier: descriptor.lastVersion.raw.modifier}\n        \n                this.afterViewLoadedDeferred.resolve();\n            })\n            .fail(e => {\n                if (!(this.previewMode && e && e.errorObject && e.errorObject.code == 12289)) {\n                    this.logError(e);\n                    this.errorAlert(this.prepareErrorMessage(e), e)\n                    .then(() => {\n                        this.close(true);\n                    });\n                }\n                this.startLockInterval();\n                return Q.reject(e);\n            })\n            .fin(() => {\n                this.nwin.removeSpinner();\n            });\n        });\n        this.initSpellChecker();\n    }\n    \n    onViewReload(): void {\n        this.addTaskEx(this.i18n(\"plugin.editor.window.editor.task.reload.text\"), true, () => {\n            if (this.editMode || this.openableFileElement == null) {\n                return;\n            }\n            let currentViewId = this.currentViewId;\n            return Q().then(() => {\n                return this.handle.isModifiedRemote();\n            })\n            .then(modified => {\n                if (!modified) {\n                    this.callViewMethod(\"reset\");\n                    return;\n                }\n                return Q().then(() => {\n                    this.handle.updateToLastVersion();\n                    return this.handle.read().then(c => c.getText());\n                })\n                .then(text => {\n                    this.updateTaskStatuses(text);\n                    this.callViewMethod(\"setContent\", currentViewId, text);\n                });\n            })\n            .then(() => {\n                // this.notesService.setContainerEventsReadStatus(this.entry, true, false);\n            });\n        });\n    }\n    \n    onViewMimeTypeDetect(mimeType: string): void {\n        this.mimeType = mimeType;\n    }\n    \n    onViewNewFileFlagConsumed(): void {\n        this.newFile = false;\n    }\n    \n    onViewEnterEditModeByChange(data: string): void {\n        if (this.previewMode) {\n            return;\n        }\n        Q().then(() => {\n            if (this.openingStartEditModeQuestion) {\n                return;\n            }\n            this.openingStartEditModeQuestion = true;\n            return Q().then(() => {\n                return this.confirm(this.i18n(\"plugin.editor.window.editor.enteringEditMode.question\"));\n            })\n            .then(result => {\n                if (result.result != \"yes\") {\n                    return;\n                }\n                return this.enterEditMode(data);\n            })\n            .fin(() => {\n                this.openingStartEditModeQuestion = false;\n            });\n        });\n    }\n    \n    onViewEnterEditMode(): void {\n        this.enterEditMode();\n    }\n    \n    onViewSave(): void {\n        let text: string;\n        this.addTaskEx(this.i18n(\"plugin.editor.window.editor.task.save.text\"), true, () => {\n            return Q().then(() => {\n                return this.hasChangesToSave();\n            })\n            .then(hasChangesToSave => {\n                if (!hasChangesToSave) {\n                    return;\n                }\n                this.callViewMethod(\"showSavingBanner\");\n                return Q().then(() => {\n                    return this.retrieveFromView<string>(\"getState\");\n                })\n                .then(t => {\n                    text = t;\n                    return this.save(text);\n                })\n                .then(() => {\n                    this.callViewMethod(\"confirmSave\", text);\n                    this.callViewMethod(\"hideSavingBanner\");\n                })\n                .fail(e => {\n                    this.callViewMethod(\"hideSavingBanner\");\n                    return this.onError(e);\n                });\n            });\n        });\n    }\n    \n    onViewHistory(): void {\n        if (this.openableFileElement) {\n            this.app.dispatchEvent<Types.event.OpenHistoryViewEvent>({\n                type: \"open-history-view\",\n                parent: this,\n                fileSystem: this.openableFileElement.fileSystem,\n                path: this.openableFileElement.path,\n                hostHash: this.session.hostHash\n            });\n        }\n    }\n    \n    onViewExitEditMode(): void {\n        this.exitEditMode();\n    }\n    \n    onViewExitEditModeAndClose(): void {\n        this.close();\n    }\n    \n    onViewClose(): void {\n        this.close();\n    }\n    \n    onViewOpenMindmapHelp(): void {\n        this.app.openSingletonWindow(\"mindmapHelp\", MindmapHelpWindowController);\n    }\n    \n    onViewDistractionFreeModeToggle(): void {\n        this.nwin.toggleDistractionFreeMode();\n    }\n    \n    onViewDirtyChange(dirty: boolean): void {\n        this.updateDirtyWindowsModel(dirty);\n        this.nwin.setDirty(dirty);\n    }\n    \n    onViewFocusedIn() {\n        this.app.dispatchEvent({type: \"focused-in-preview\"});\n    }\n    \n    onViewEnterFromPreviewToEditMode() {\n        this.enterEditMode();\n    }\n    \n    enterEditMode(data?: string): Q.Promise<void> {\n        return this.addTaskEx(this.i18n(\"plugin.editor.window.editor.task.enterEditMode.text\"), true, () => {\n            if (this.editMode) {\n                return;\n            }\n            return Q().then(() => {\n                // return this.lock();\n            })\n            .then(() => {\n                return this.handle ? this.handle.isModifiedRemote() : false;\n            })\n            .then(modified => {\n                this.app.dispatchEvent<Types.event.FileOpenedEvent>({\n                    type: \"file-opened\",\n                    element: this.openableElement,\n                    applicationId: \"plugin.editor\",\n                    docked: this.docked,\n                    action: app.common.shelltypes.ShellOpenAction.EXTERNAL,\n                    hostHash: this.session.hostHash,\n                });\n                if (!modified) {\n                    return Q().then(() => {\n                        if (data) {\n                            return data;\n                        }\n                        if (this.handle) {\n                            return this.handle.read().then(c => c.getText());\n                        }\n                        else {\n                            return Q().then(() => {\n                                return this.openableElement.getContent()\n                            })\n                            .then(content => {\n                                return content.buffer.toString(\"utf8\");\n                            });\n                        }\n                    })\n                    .then(text => {\n                        this.editMode = true;\n                        this.callViewMethod(\"switchToEditModeAndChangeContent\", text);\n                    });\n                }\n                return Q().then(() => {\n                    this.handle.updateToLastVersion();\n                    return this.handle.read().then(c => c.getText());\n                })\n                .then(text => {\n                    this.editMode = true;\n                    this.callViewMethod(\"switchToEditModeAndChangeContent\", text);\n                });\n            }).fail(e => {\n                if (privfs.core.ApiErrorCodes.is(e, \"DESCRIPTOR_LOCKED\") || e.message == \"locked-in-another-session-by-me\") {\n                    this.editMode = false;\n                    return this.onError(e);\n                }\n                return Q.reject<void>(e);\n            });\n        });\n    }\n    \n    async confirmSaveBeforeSend(): Promise<void> {\n        try {\n            const hasChanges = await this.hasChangesToSave();\n            if (hasChanges) {\n                const confirmResult = await this.confirmEx({\n                    message: this.i18n(\"plugin.editor.window.editor.task.beforeSend.unsavedWarning.text\", [this.openableElement.getName()]),\n                    yes: {label: this.i18n(\"plugin.editor.window.editor.save.confirm.yes.label\")},\n                    no: {label: this.i18n(\"plugin.editor.window.editor.save.confirm.no.label\")},\n                    cancel: {visible: true},\n                });\n                if (confirmResult.result == \"yes\") {\n                    const textToSave = await this.retrieveFromView<string>(\"getState\");\n                    await this.save(textToSave);\n                    this.callViewMethod(\"confirmSave\", textToSave);  \n                }\n            }    \n        }\n        catch (e) {\n            this.logError(e);\n        }\n    }\n\n    exitEditMode(repaintView?: boolean): Q.Promise<boolean> {\n        this.manager.refreshState();\n        let text: string;\n        return Q().then(() => {\n            return this.hasChangesToSave();\n        })\n        .then(hasChangesToSave => {\n            if (!hasChangesToSave) {\n                return Q().then(() => {\n                    // return this.releaseLock();\n                })\n                .then(() => {\n                    this.callViewMethod(\"afterExitedEditMode\");\n                    this.editMode = false;\n                    if (repaintView !== false) {\n                        this.callViewMethod(\"exitEditModeWithoutChange\");\n                    }\n                    return true;\n                });\n            }\n            return Q().then(() => {\n                this.manager.stateChanged(app.BaseWindowManager.STATE_DIRTY);\n                return this.confirmEx({\n                    message: this.i18n(\"plugin.editor.window.editor.task.exitEditMode.unsavedWarning.text\", [this.openableElement.getName()]),\n                    yes: {label: this.i18n(\"plugin.editor.window.editor.save.confirm.yes.label\")},\n                    no: {label: this.i18n(\"plugin.editor.window.editor.save.confirm.no.label\")},\n                    cancel: {visible: true},\n                });\n            })\n            .then(result => {\n                if (result.result == \"yes\") {\n                    return Q().then(() => {\n                        return this.retrieveFromView<string>(\"getState\");\n                    })\n                    .then(t => {\n                        text = t;\n                        return this.saveWithLockRelease(text);\n                    })\n                    .then(() => {\n                        this.editMode = false;\n                        if (repaintView !== false) {\n                            this.callViewMethod(\"exitEditModeWithConfirm\", text);\n                        }\n                        this.manager.stateChanged(app.BaseWindowManager.STATE_IDLE);\n                        return true;\n                    });\n                }\n                else if (result.result == \"no\") {\n                    return Q().then(() => {\n                        return this.releaseLock();\n                    })\n                    .then(() => {\n                        this.editMode = false;\n                        if (repaintView !== false) {\n                            this.callViewMethod(\"exitEditModeWithRevert\");\n                        }\n                        this.manager.stateChanged(app.BaseWindowManager.STATE_IDLE);\n                        return true;\n                    });\n                }\n                return false;\n            })\n            .then(exitedEditMode => {\n                if (exitedEditMode) {\n                    this.callViewMethod(\"afterExitedEditMode\");\n                }\n                return exitedEditMode;\n            });\n        });\n    }\n    \n    beforeClose(force?: boolean): Q.IWhenable<void> {\n        this.manager.stateChanged(app.BaseWindowManager.STATE_CLOSING);\n\n        if (force || this.handle == null) {\n            this.manager.stateChanged(app.BaseWindowManager.STATE_IDLE);\n            clearInterval(this.lockInterval);\n            return;\n        }\n        let controller = this;\n        let defer = Q.defer<void>();\n        Q().then(() => {\n            return controller.exitEditMode(false);\n        })\n        .then(result => {\n            // if close window\n            if (result) {\n                clearInterval(this.lockInterval);\n                this.manager.stateChanged(app.BaseWindowManager.STATE_IDLE);\n                this.tasksPlugin.unWatch(this.session, \"task\", \"*\", \"*\", this.taskChangedHandlerBound);\n                defer.resolve();\n            }\n            else {\n                this.app.manager.cancelClosing();\n                // defer.reject(null);\n                defer.reject();\n            }\n        });\n        return defer.promise;\n    }\n    \n    getEntryModel(): Q.Promise<EntryModel> {\n        return Q().then(() => {\n            if (this.openableElement && this.openableElement instanceof mail.section.OpenableSectionFile) {\n                let osf = (<mail.section.OpenableSectionFile>this.openableElement);\n                if (osf.section) {\n                    return osf.section.getFileTree();\n                }\n            }\n        })\n        .then(tree => {\n            let boundTasksStr: string = null;\n            if (tree) {\n                let id = this.openableElement.getElementId();\n                let el = tree.collection.find(x => x.id == id);\n                if (el) {\n                    boundTasksStr = el.meta.bindedElementId;\n                }\n            }\n            let entryName = this.openableElement ? this.openableElement.getName() : \"\";\n            return {\n                fileName: entryName,\n                title: this.getTitle(),\n                canBeEditable: this.openableElement && this.openableElement.isEditable(),\n                extl: entryName.substr(entryName.lastIndexOf(\".\")),\n                mimeType: this.openableElement ? this.openableElement.getMimeType() : \"\",\n                boundTasksStr: JSON.stringify(this.tasksPlugin.getBindedTasksData(this.session, boundTasksStr)),\n                hostHash: this.session.hostHash,\n                sectionId: this.openableElement && this.openableElement instanceof mail.section.OpenableSectionFile && this.openableElement.section ? this.openableElement.section.getId() : null,\n            };\n        });\n    }\n    \n    refreshName(): void {\n        this.getEntryModel().then(model => {\n            this.callViewMethod(\"updateEntry\", model);\n            this.setTitle(model.title);\n        });\n    }\n    \n    hasChangesToSave(): Q.Promise<boolean> {\n        let isDirty: boolean;\n        return Q().then(() => {\n            return this.retrieveFromView<boolean>(\"isDirty\");\n        })\n        .then(r => {\n            isDirty = r;\n            return this.retrieveFromView<boolean>(\"canGetState\");\n        })\n        .then(canGetState => {\n            return this.editMode && isDirty && canGetState;\n        });\n    }\n    \n    canBeQuietlyClosed(): Q.IWhenable<boolean> {\n        return Q().then(() => {\n            return this.hasChangesToSave();\n        })\n        .then(hasChangesToSave => {\n            return !hasChangesToSave;\n        });\n    }\n    \n    hasOpenedEntry(entry: app.common.shelltypes.OpenableElement): boolean {\n        return entry.equals(this.openableElement);\n    }\n    \n    // save(text: string): Q.Promise<void> {\n    //     return Q().then(() => {\n    //         let content = privfs.lazyBuffer.Content.createFromText(text, this.mimeType);\n    //         if (this.handle) {\n    //             return this.handle.write(content).thenResolve(null);\n    //         }\n    //         if (this.openableEditableElement) {\n    //             return this.openableEditableElement.save(content);\n    //         }\n    //     })\n    // }\n\n    save(text: string): Q.Promise<void> {\n        let content: privfs.lazyBuffer.Content;\n        let saved: boolean = false;\n\n        return Q().then(() => {\n            let obj: { content: string, metaDataStr?: string } = null;\n            try {\n                obj = JSON.parse(text);\n            }\n            catch (e) {}\n            if (obj && obj.content) {\n                return this.app.prepareHtmlMessageBeforeSending(obj.content, this.session).then(newText => {\n                    let { metaData, html } = utils.ContentEditableEditorMetaData.extractMetaFromHtml(newText);\n                    obj.metaDataStr = JSON.stringify(metaData);\n                    obj.content = html;\n                    return JSON.stringify(obj);\n                });\n            }\n            return text;\n        })\n        .then(newText => {\n            text = newText;\n            this.releasingLock = true;\n            content = privfs.lazyBuffer.Content.createFromText(text, this.mimeType);\n            if (this.handle) {\n                return this.handle.write(content)\n                .catch(e => {\n                    if (privfs.core.ApiErrorCodes.is(e, \"DESCRIPTOR_LOCKED\")) {\n                        let identity = this.session.sectionManager.client.identity;\n                        if (e.data.error.data.lockerPub58 == identity.pub58) {\n                            // update lock and save again\n                            return this.handle.lock(true)\n                            .then(() => {\n                                return this.save(text);\n                            })\n                        }\n                        return this.saveFileAsConflicted(content);\n                    }\n                    else\n                    if (privfs.core.ApiErrorCodes.is(e, \"OLD_SIGNATURE_DOESNT_MATCH\")) {\n                        return this.handle.refreshAndUpdateToLastVersion()\n                        .then(() => {\n                            if (this.handle.descriptor.lastVersion.raw.modifier == this.lastDescriptorInfo.modifier) {\n                                Logger.error(\"Error: OLD_SIGNATURE_DOESNT_MATCH\", JSON.stringify(this.gatherInfoForErrorReport(this.lastDescriptorInfo, this.handle.descriptor), null, 2));\n                            }\n                            return this.saveFileAsConflicted(content);\n                        })\n                    }\n                })\n                .then(() => {\n                    saved = true;\n                    if (this.openableElement instanceof mail.section.OpenableSectionFile && this.openableElement.getMimeType() == \"application/x-stt\") {\n                        let openableElement = this.openableElement;\n                        return this.openableElement.section.getFileTree().then(tree => {\n                            let entry = tree.collection.find(x => x.id == openableElement.id);\n                            let obj: any;\n                            try {\n                                obj = JSON.parse(text);\n                            }\n                            catch(e) {}\n                            if (obj) {\n                                let realStyle: app.common.FileStyle = {\n                                    styleName: obj.style && obj.style.name && obj.style.name in component.mindmap.Mindmap.AVAILABLE_STYLES ? obj.style.name : component.mindmap.Mindmap.DEFAULT_STYLE_NAME,\n                                    fontSize: obj.style && obj.style.fontSize && obj.style.fontSize in component.mindmap.Mindmap.AVAILABLE_FONT_SIZES ? obj.style.fontSize : component.mindmap.Mindmap.DEFAULT_FONT_SIZE,\n                                    margin: obj.style && obj.style.margin && obj.style.margin in component.mindmap.Mindmap.AVAILABLE_MARGINS ? obj.style.margin : component.mindmap.Mindmap.DEFAULT_MARGIN,\n                                };\n                                return this.app.fileStyleResolver.setStyle(entry, this.handle, realStyle);\n                            }\n                        });\n                    }\n                    return;\n                })\n                \n            }\n        })\n        .then(() => {\n            if (this.openableEditableElement) {\n                let osf = (<mail.section.OpenableSectionFile>this.openableEditableElement);\n                if (!saved) {\n                    if (osf.section) {\n                        return (<any>osf.section).saveFile(osf.path, content, this.handle, osf, true);\n                    }\n                }\n                else {\n                    // already saved\n                    if (osf.section) {\n                        return (<any>osf.section).getChatModule().sendSaveFileMessage(osf.section.getId(), osf.path);\n                    }\n                }\n            }\n            else if (this.openableElement && (<any>this.openableElement).openableElementType == \"LocalOpenableElement\") {\n                return this.openableElement.save(content);\n            }\n        })\n        .fin(() => {\n            this.releasingLock = false;\n        });\n    }\n\n    saveFileAsConflicted(content: privfs.lazyBuffer.Content): Q.Promise<void> {\n        return Q().then(() => {\n            let openableFile = (this.openableElement as mail.section.OpenableSectionFile);\n            let currentSectionId: string = openableFile.section.getId();\n            let fname = this.createConflictedFileName(openableFile)\n            let newOpenableFile: mail.section.OpenableSectionFile;\n            return openableFile.fileSystem.resolvePath(fname)\n            .then(resolvedPath => {\n                return openableFile.fileSystem.save(resolvedPath.path, content).thenResolve(resolvedPath.path);\n            })\n            .then(newPath => {\n                newOpenableFile = new mail.section.OpenableSectionFile(this.session.sectionManager.getSection(currentSectionId), openableFile.fileSystem, newPath, true);\n                return newOpenableFile.refresh()\n                .then(() => {\n                    return newOpenableFile.fileSystem.openFile(newPath, privfs.fs.file.Mode.READ_WRITE)\n                })\n            })\n            .then(newHandle => {\n                this.handle = newHandle;\n                \n                this.openableElement = newOpenableFile;\n                return this.getEntryModel().then(model => {\n                    let text = content.getText();\n                    this.updateTaskStatuses(text);\n                    let newFullFileName = newOpenableFile.path;\n                    let newFileName: string = newFullFileName.substr(newFullFileName.lastIndexOf(\"/\") + 1);\n                    this.updateFileName(newFileName, newFullFileName, this.getTitle(newFullFileName));\n                    if (this.app.isElectronApp()) {\n                        this.app.filesLockingService.showWarning(newOpenableFile.path);\n                    }\n                });\n            })\n            .fail(e => {\n                return Q.reject(e);\n            })\n        })\n    }\n\n    createConflictedFileName(openableFile: app.common.shelltypes.OpenableFile): string {\n        try {\n            // console.log(\"orig path:\", openableFile.path);\n            let parentPath = openableFile.path.split(\"/\").slice(0, -1).join(\"/\");\n            // console.log(\"parent path: \", parentPath);\n            let fileName = openableFile.getName();\n            // console.log(\"filename:\", fileName);\n            let fileParts = fileName.split(\".\");\n            let ext: string = \"\";\n            if (fileParts.length > 1) {\n                ext = fileParts[fileParts.length - 1];\n                fileName = fileParts.slice(0, -1).join(\".\");\n            }\n            \n            let formatter = new utils.Formatter();\n            let conflictedCopyStr = this.app.localeService.i18n(\"plugin.editor.window.editor.saveAsConflicted.conflictedCopy\");\n            let dateString = formatter.standardDate(new Date()).replace(/:/g, \"-\").replace(/ /g, \"-\");\n            return parentPath + \"/\" + fileName + \" - \" + conflictedCopyStr + \" - \" + dateString + (ext.length > 0 ? \".\" + ext : \"\");\n        } catch (e) {\n            console.log(\"error creating filename\",e);\n        }\n    }\n\n    saveWithLockRelease(text: string): Q.Promise<void> {\n        return Q().then(() => {\n            let content = privfs.lazyBuffer.Content.createFromText(text, this.mimeType);\n            if (this.handle) {\n                this.releasingLock = true;\n                return this.handle.write(content, {releaseLock: true}).thenResolve(null);\n            }\n            if (this.openableEditableElement) {\n                let osf = (<mail.section.OpenableSectionFile>this.openableEditableElement);\n                if (osf.section) {\n                    return (<any>osf.section).saveFile(content, this.handle, osf, true);\n                }\n            }\n        })\n        .fin(() => {\n            this.releasingLock = false;\n        });\n    }\n\n    \n    releaseLock(): Q.Promise<void> {\n        return Q().then(() => {\n            this.releasingLock = true;\n            if (this.handle) {\n                return this.handle.release();\n            }\n        })\n        .fail(e => {\n            if (!privfs.core.ApiErrorCodes.is(e, \"DESCRIPTOR_LOCKED\")) {\n                return Q.reject<void>(e);\n            }\n        })\n        .fin(() => {\n            this.releasingLock = false;\n        });\n    }\n    \n    lockChecker(): void {\n        if (!this.editMode || this.handle == null || this.releasingLock || this.networkIsDown()) {\n            return;\n        }\n        let controller = this;\n        this.addTaskEx(this.i18n(\"plugin.editor.window.editor.task.relock.text\"), true, () => {\n            return controller.lock(false);\n        })\n    }\n    \n    lock(withVersionUpdate: boolean = true): Q.Promise<void> {\n        return Q();\n        // return Q().then(() => {\n        //     if (this.handle) {\n        //         return this.handle.lock(false, withVersionUpdate) //robimy lock, ale bez update wersji..\n        //         .fail(e => {\n        //             return this.lockedByMeInOtherSession(e)\n        //         })\n        //     }\n        // })\n    }\n\n    autoSave(): Q.Promise<void> {\n        return Q().then(() => {\n            if (!this.handle) {\n                this.logError(\"invalid handle on autosave\");\n                return;\n            }\n            let text: string;\n            this.addTaskEx(this.i18n(\"plugin.editor.window.editor.task.autosave.text\"), true, () => {\n                return Q().then(() => {\n                    return this.hasChangesToSave();\n                })\n                .then(hasChangesToSave => {\n                    if (! hasChangesToSave) {\n                        return;\n                    }\n                    // return this.handle.lock(false, false)\n                    return Q().then(() => {\n                        return this.retrieveFromView<string>(\"getState\");\n                    })\n                    .then(t => {\n                        text = t;\n                        return this.save(text)\n                    })\n                    .then(() => {\n                        this.callViewMethod(\"confirmSave\", text);\n                    })\n                })\n            });\n        })\n    }\n\n    saveFileAsRecovery(text: string): Q.Promise<void> {\n        let section: mail.section.SectionService;\n        let osf: mail.section.OpenableSectionFile;\n        let filesService: mail.section.FileSystemModuleService;\n        let recoveryHandle: privfs.fs.descriptor.Handle;\n\n        return Q().then(() => {\n            if (! this.openableEditableElement) {\n                return;\n            }\n\n            osf = (<mail.section.OpenableSectionFile>this.openableEditableElement);\n            section = osf.section;\n            filesService = section.getFileModule();\n\n            return filesService.getFileSystem();\n        })\n        .then(fs => {\n            let content = privfs.lazyBuffer.Content.createFromText(text, this.mimeType);\n\n            if (this.lastRecoveryFilePath) {\n                return Q().then(() => {\n                    return fs.openFile(this.lastRecoveryFilePath, privfs.fs.file.Mode.READ_WRITE, true);\n                })\n                .then(rHandle => {\n                    recoveryHandle = rHandle;\n                    return recoveryHandle.read(false);\n                })\n                .then(readContent => {\n                    let savedText = readContent.getText();\n                    if (savedText != text) {\n                        return recoveryHandle.write(content, {releaseLock: true}).thenResolve(null);\n                    }\n                    else {\n                        return;\n                    }\n                })\n                .fail(e => {\n                    this.logError(e);\n                })\n            }\n            else {\n                let acl = filesService.getDescriptorAcl();\n                let destPath = mail.filetree.nt.Helper.resolvePath(\"/\", osf.getName());\n                return fs.createEx(destPath, content, true, {acl: acl})\n                .then(fInfo => {\n                    this.lastRecoveryFilePath = fInfo.path;\n                })\n            }\n        })\n    }\n    \n    lockedByMeInOtherSession(e: any): Q.Promise<void> {\n        let identity = this.session.sectionManager.identity;\n        return Q().then(() => {\n            if (!privfs.core.ApiErrorCodes.is(e, \"DESCRIPTOR_LOCKED\") || e.data.error.data.lockerPub58 != identity.pub58) {\n                return Q.reject<wnd.msgbox.MsgBoxResult>(e);\n            }\n            let msg = this.i18n(\"plugin.editor.window.editor.error.anotherSessionLock\");\n            return this.confirm(msg);\n        })\n        .then(result => {\n            if (result.result != \"yes\") {\n                throw new Error(\"locked-in-another-session-by-me\");\n            }\n            // if (this.handle) {\n            //     return this.handle.lock(true);\n            // }\n        });\n    }\n    \n    onErrorRethrow(e: any): void {\n        this.onError(e);\n        throw e;\n    }\n    \n    onError(e: any): Q.Promise<any> {\n        return Q().then(() => {\n            if (e.message == \"locked-in-another-session-by-me\") {\n                return;\n            }\n            this.logError(e);\n            if (privfs.core.ApiErrorCodes.is(e, \"DESCRIPTOR_LOCKED\")) {\n                if (this.editMode && !this.releasingLock) {\n                    this.lockedByMeInOtherSession(e);\n                }\n                else {\n                    let pub58 = e.data.error.data.lockerPub58;\n                    // let contact = this.contactService.getContactByPub58(pub58);\n                    let contact = this.session.conv2Service.contactService.getContactByPub58(pub58);\n                    let msg;\n                    if (contact) {\n                        msg = this.i18n(\"plugin.editor.window.editor.error.anotherUserLock.known\", [contact.getDisplayName()]);\n                    }\n                    else {\n                        msg = this.i18n(\"plugin.editor.window.editor.error.anotherUserLock.unknown\", [pub58]);\n                    }\n                    this.alert(msg);\n                }\n            }\n            else if (privfs.core.ApiErrorCodes.is(e, \"OLD_SIGNATURE_DOESNT_MATCH\")) {\n                let controller = this;\n                Q().then(() => {\n                    return controller.handle.refresh();\n                })\n                .then(() => {\n                    let msg = controller.i18n(\"plugin.editor.window.editor.error.modifiedAlready\");\n                    return controller.confirm(msg);\n                })\n                .then(result => {\n                    let lastVersion = controller.handle.updateToLastVersion();\n                    if (result.result != \"yes\") {\n                        return;\n                    }\n                    let currentViewId = this.currentViewId;\n                    return controller.addTaskEx(controller.i18n(\"plugin.editor.window.editor.task.load.text\"), true, () => {\n                        return Q().then(() => {\n                            return controller.handle.read().then(c => c.getText());\n                        })\n                        .then(text => {\n                            this.updateTaskStatuses(text);\n                            controller.callViewMethod(\"setContent\", currentViewId, text);\n                        })\n                        .fail(e => {\n                            controller.handle.currentVersion = lastVersion;\n                            return Q.reject(e);\n                        });\n                    });\n                });\n            }\n            else {\n                return this.errorAlert(this.prepareErrorMessage(e), e);\n            }\n        })\n    }\n    \n    destroy(): void {\n        this.stopAutoSaveInterval();\n        super.destroy();\n        this.stopLockInterval();\n        this.updateDirtyWindowsModel(false);\n    }\n    \n    stopLockInterval(): void {\n        if (this.lockInterval) {\n            clearInterval(this.lockInterval);\n            this.lockInterval = null;\n        }\n    }\n    \n    startLockInterval(): void {\n        if (!this.lockInterval) {\n            this.lockInterval = setInterval(() => {\n                this.lockChecker()\n            }, 60 * 1000);\n        }\n    }\n\n    stopAutoSaveInterval(): void {\n        if (this.autoSaveInterval) {\n            clearInterval(this.autoSaveInterval);\n            this.autoSaveInterval = null;\n        }\n    }\n    \n    startAutoSaveInterval(): void {\n        if (!this.autoSaveInterval) {\n            this.autoSaveInterval = setInterval(() => {\n                this.autoSave()\n            }, 60 * 1000 * 5);\n        }\n    }\n    \n\n    updateDirtyWindowsModel(dirty: boolean): void {\n        dirty = dirty && this.editMode;\n        let dwm = EditorWindowController.DirtyWindowsModel;\n        let data = dwm.get();\n        let idx = data.indexOf(this);\n        if (dirty && idx == -1) {\n            data.push(this);\n        }\n        else if (!dirty && idx != -1) {\n            data.splice(idx, 1);\n        }\n        else {\n            return;\n        }\n        dwm.set(data);\n    }\n    \n    reopen(openableElement: app.common.shelltypes.OpenableElement, force: boolean = false) {\n        if (!this.previewMode && !force) {\n            throw new Error(\"Cannot reopen when not in preview mode\");\n        }\n        let wasNoElement = this.openableElement === null;\n        // if (this.app.isElectronApp()) {\n        //     (<any>this.app).externalFilesService.registerPreview(openableElement.getElementId(), (isLockSet: boolean) => {\n        //         this.editorButtons.refreshButtonsState();\n        //     })\n        // }\n\n        let client = this.session.sectionManager.client;\n        this.registerPmxEvent(client.storageProviderManager.event, this.onStorageEvent);\n        this.currentViewId++;\n        this.openableElement = openableElement;\n        this.openableEditableElement = this.openableElement && this.openableElement.isEditable() ?  this.openableElement : null;\n        this.openableFileElement = this.openableElement instanceof app.common.shelltypes.OpenableFile ? this.openableElement : null;\n        let isText = openableElement.getMimeType() == \"application/x-stt\";\n        this.afterViewLoadedDeferred = Q.defer<void>();\n        return (isText ? this.prepareForDisplay(openableElement) : Q(null))\n        .then((style: app.common.FileStyle) => {\n            return this.viewLoadedDeferred.promise.thenResolve(style);\n        })\n        .then(style => {\n            this.setWindowIcon(this.openableElement);\n            this.refreshName();\n            this.callViewMethod(\"reopen\", this.currentViewId, wasNoElement);\n            if (this.app.isElectronApp() && (<any>this.openableElement).openableElementType == \"LocalOpenableElement\") {\n                this.watcher = new LocalFfWatcher();\n                this.watcher.watch(this.openableElement.getElementId(), this.onChangeLocalContent.bind(this));\n            }\n            if (wasNoElement) {\n                this.updatePreTitleIcon();\n            }\n        })\n        .then(() => {\n            return this.afterViewLoadedDeferred.promise;\n        })\n        .fin(() => {\n            this.editorButtons.refreshButtonsState();\n        });\n    }\n    \n    updateCachedStyleName(text: string): void {\n        if (!(this.openableElement instanceof mail.section.OpenableSectionFile)) {\n            return;\n        }\n        let openableElement: mail.section.OpenableSectionFile = this.openableElement;\n        let isText = this.openableElement.getMimeType() == \"application/x-stt\";\n        if (isText && this.handle) {\n            let obj: any;\n            try {\n                obj = JSON.parse(text);\n            }\n            catch(e) {}\n            if (obj) {\n                let realStyle: app.common.FileStyle = {\n                    styleName: obj.style && obj.style.name && obj.style.name in component.mindmap.Mindmap.AVAILABLE_STYLES ? obj.style.name : component.mindmap.Mindmap.DEFAULT_STYLE_NAME,\n                    fontSize: obj.style && obj.style.fontSize && obj.style.fontSize in component.mindmap.Mindmap.AVAILABLE_FONT_SIZES ? obj.style.fontSize : component.mindmap.Mindmap.DEFAULT_FONT_SIZE,\n                    margin: obj.style && obj.style.margin && obj.style.margin in component.mindmap.Mindmap.AVAILABLE_MARGINS ? obj.style.margin : component.mindmap.Mindmap.DEFAULT_MARGIN,\n                };\n                this.app.fileStyleResolver.cacheStyle(openableElement.id, realStyle);\n            }\n        }\n    }\n    \n    prepareForDisplay(openableElement: app.common.shelltypes.OpenableElement): Q.Promise<app.common.FileStyle> {\n        if (openableElement instanceof mail.section.OpenableSectionFile) {\n            return openableElement.section.getFileTree().then(tree => {\n                let entry = tree.collection.find(x => x.id == openableElement.id);\n                return this.app.fileStyleResolver.getStyle(entry);\n            })\n            .then(style => {\n                this.callViewMethod(\"setStyle\", style.styleName, style.fontSize, style.margin, false);\n                return style;\n            });\n        }\n        return Q(null);\n    }\n    \n    release() {\n        let client = this.session.sectionManager.client;\n        this.unregisterPmxEvent(client.storageProviderManager.event, this.onStorageEvent);\n\n        if (!this.previewMode) {\n            throw new Error(\"Cannot release when not in preview mode\");\n        }\n        // if (this.app.isElectronApp() && this.openableElement) {\n        //     (<any>this.app).externalFilesService.unregisterPreview(this.openableElement.getElementId());\n        // }\n        this.currentViewId++;\n        this.openableElement = null;\n        this.openableEditableElement = null\n        this.openableFileElement = null;\n        this.refreshName();\n        this.callViewMethod(\"release\", this.currentViewId);\n    }\n    \n    afterIframeHide(): void {\n        this.callViewMethod(\"toggleEditorHidden\", true);\n    }\n    \n    afterIframeShow(): void {\n        this.callViewMethod(\"toggleEditorHidden\", false);\n    }\n    \n    onViewClipboardPaste(): void {\n        let supportedFormats = [\"text\", \"MindMapElement\"];\n        let data: app.common.clipboard.ClipboardData = {};\n        supportedFormats.forEach(format => {\n            if (this.app.clipboard.hasFormat(format)) {\n                data[format] = this.app.clipboard.getFormat(format);\n            }\n        });\n        this.callViewMethod(\"clipboardPaste\", data);\n    }\n    \n    onViewClipboardCopy(data: app.common.clipboard.ClipboardData): void {\n        this.app.clipboard.set(data);\n    }\n    \n    onViewDownload(): void {\n        this.editorButtons.onViewExport();\n    }\n    \n    onViewSend(): void {\n        new Promise(async () => {\n            await this.confirmSaveBeforeSend();\n            this.editorButtons.onViewSend();\n        })\n    }\n    \n    saveBeforePrinting(): Q.Promise<void> {\n        let text: string = \"\";\n        return Q().then(() => {\n            return this.hasChangesToSave();\n        })\n        .then(hasChangesToSave => {\n            if (!hasChangesToSave) {\n                return;\n            }\n            return Q().then(() => {\n                return this.retrieveFromView<string>(\"getState\");\n            })\n            .then(t => {\n                text = t;\n                return this.save(text);\n            })\n            .then(() => {\n                this.callViewMethod(\"confirmSave\", text);\n            })\n            .fail(e => {\n                return Q.reject(e);\n            });\n        });\n    }\n    \n    onViewPrint(): void {\n        this.editorButtons.onViewPrint();\n    }\n    \n    onViewSaveAsPdf(): void {\n        if (this.isPrinting || this.isSavingAsPdf) {\n            return;\n        }\n        if (this.openableElement) {\n            this.saveBeforePrinting().then(() => {\n                let notificationId = this.notifications.showNotification(this.i18n(\"plugin.editor.window.editor.notifier.savingAsPdf\"), {autoHide: false, progress: true});\n                let parentController = this.getClosestNotDockedController();\n                let parent = parentController ? parentController.nwin : null;\n                this.app.saveAsPdf(this.session, this.openableElement, parent)\n                .then(() => {\n                    setTimeout(() => {\n                        this.notifications.showNotification(this.i18n(\"plugin.editor.window.editor.notifier.savedAsPdf\"));\n                    }, 500);\n                })\n                .fin(() => {\n                    this.notifications.hideNotification(notificationId);\n                    this.isPrinting = false;\n                })\n                .fail(() => {\n                    // Cancelled by user\n                });\n            });\n        }\n    }\n    \n    onViewPdfOutput(data: string) {\n        let buffer = new Buffer(data, \"binary\");\n        let fileName = mail.filetree.Path.splitFileName(this.openableElement ? this.openableElement.getName() : \"document.stt\").name + \".pdf\";\n        let content = privfs.lazyBuffer.Content.createFromBuffer(buffer, \"application/pdf\", fileName);\n        this.app.directSaveContent(content, this.session);\n        this.onViewSavedAsPdf();\n    }\n    \n    onViewAttachToTask(): void {\n        this.editorButtons.attachToTask(this.handle);\n    }\n    \n    prepareToPrint(scale: boolean = false): Q.Promise<void> {\n        if (this.prepareToPrintDeferred == null) {\n            this.prepareToPrintDeferred = Q.defer();\n            this.viewLoadedDeferred.promise.then(() => {\n                return super.prepareToPrint();\n            })\n            .then(() => {\n                this.callViewMethod(\"prepareToPrint\", scale);\n            });\n        }\n        return this.prepareToPrintDeferred.promise;\n    }\n    \n    onViewPreparedToPrint(): void {\n        if (this.prepareToPrintDeferred) {\n            this.prepareToPrintDeferred.resolve();\n        }\n    }\n    \n    onViewOpenTask(taskIdsStr: string): void {\n        let entryId = this.openableElement.getElementId();\n        taskIdsStr += \"\";\n        let resolved = this.session.sectionManager.resolveFileId(entryId);\n        \n        let taskId: string = \"\";\n        if (taskIdsStr.indexOf(\",\") >= 0) {\n            this.taskChooser.options.onlyTaskIds = taskIdsStr.split(\",\");\n            this.taskChooser.refreshTasks();\n            this.taskChooser.showPopup().then(result => {\n                if (result.taskId) {\n                    this.editorPlugin.openTask(this.session, resolved.section.getId(), result.taskId);\n                }\n            });\n        }\n        else {\n            taskId = taskIdsStr;\n            this.editorPlugin.openTask(this.session, resolved.section.getId(), taskId);\n        }\n    }\n    \n    getTitle(overridePath?: string): string {\n        if (!this.openableElement) {\n            return \"\";\n        }\n        if (this.openableElement instanceof mail.section.OpenableSectionFile) {\n            let parsed = mail.filetree.nt.Entry.parseId(this.openableElement.id);\n            if (parsed) {\n                let section = this.session.sectionManager.getSection(parsed.sectionId);\n                if (section) {\n                    let sectionName = section.getFullSectionName();\n                    let path = parsed.path[0] == \"/\" ? parsed.path.substring(1) : parsed.path;\n                    if (overridePath) {\n                        path = overridePath.substr(1);\n                    }\n                    return sectionName + \"/\" + path;\n                }\n            }\n        }\n        else if ((<any>this.openableElement).openableElementType == \"LocalOpenableElement\") {\n            if (overridePath) {\n                return overridePath;\n            }\n            return this.openableElement.getElementId();\n        }\n        return this.openableElement.getName();\n    }\n    \n    getPreTitleIcon(): Types.app.PreTitleIcon {\n        if (!this.openableElement) {\n            return null;\n        }\n        if (this.openableElement instanceof mail.section.OpenableSectionFile) {\n            let parsed = mail.filetree.nt.Entry.parseId(this.openableElement.id);\n            if (parsed) {\n                let section = this.session.sectionManager.getSection(parsed.sectionId);\n                if (section) {\n                    if (section.isPrivate() && section.getName() == \"<my>\") {\n                        return \"private\";\n                    }\n                    else\n                    if (section.isPrivateOrUserGroup()) {\n                        return \"person\";\n                    }\n                    return section.getScope() == \"public\" ? \"section-public\" : \"section-non-public\";\n                }\n            }\n        }\n        else if ((<any>this.openableElement).openableElementType == \"LocalOpenableElement\") {\n            return \"local\";\n        }\n        return null;\n    }\n    \n    updatePreTitleIcon(): void {\n        let icon = this.getPreTitleIcon();\n        this.nwin.updatePreTitleIcon(icon);\n    }\n    \n    onViewGetTaskStatuses(channelId: number, taskIdsStr: string): void {\n        let taskIds: string[] = JSON.parse(taskIdsStr);\n        let statuses: { [taskId: string]: string } = {};\n        this.tasksPlugin.addTaskStatusesFromTaskIds(this.session, statuses, taskIds);\n        this.sendToViewChannel(channelId, JSON.stringify(statuses));\n    }\n    \n    taskChangedHandler(): void {\n        //@todo this.updateTaskStatuses(false);\n    }\n    \n    updateTaskStatuses(text: string): void {\n        let statuses: { [taskId: string]: string } = {};\n        this.tasksPlugin.addTaskStatusesFromMessage(this.session, statuses, text);\n        this.callViewMethod(\"setTaskStatuses\", JSON.stringify(statuses));\n    }\n    \n    updateFileName(newFileName: string, newFullFileName: string, newTitle: string): void {\n        this.updatedFullFileName = newFullFileName;\n        this.setTitle(newTitle);\n        this.callViewMethod(\"updateFileName\", newFileName, newFullFileName, newTitle);\n    }\n\n\n    private async getEntryFromOpenableFile(openableElement: app.common.shelltypes.OpenableElement): Promise<mail.filetree.nt.Entry> {\n        if (openableElement instanceof mail.section.OpenableSectionFile) {\n            let tree = await openableElement.section.getFileTree();\n            let entry = tree.collection.list.find(x => x.name == openableElement.getName())\n            return entry;    \n        }\n        else\n        if (((<any>this.openableElement).openableElementType == \"LocalOpenableElement\")) {\n            let entry = (<any>openableElement).entry;\n            return entry;\n        }\n    }\n\n    onViewRename(): void {\n        if (this.isRenaming) {\n            return;\n        }\n        this.isRenaming = true;\n        Q().then(() => {\n            return this.getEntryFromOpenableFile(this.openableElement)\n            .then(entry => {\n                return this.promptEx({\n                    width: 400,\n                    height: 140,\n                    title: this.i18n(\"plugin.editor.window.editor.rename.message\"),\n                    input: {\n                        multiline: false,\n                        value: this.openableElement.name\n                    },\n                    selectionMode: entry.isDirectory() ? \"all\" : \"filename\",\n                })    \n            })\n        })\n        .then(result => {\n            if (result.result == \"ok\" && result.value != this.openableElement.name) {\n                let notificationId = this.notifications.showNotification(this.i18n(\"plugin.editor.window.editor.rename.notification.renaming\"), { autoHide: false, progress: true });\n                let notifKey: string = \"renamed\";\n                return Q().then(() => {\n                    if (this.openableElement instanceof mail.section.OpenableSectionFile) {\n                        let osf: mail.section.OpenableSectionFile = this.openableElement;\n                        let newFullFileName: string = \"\";\n                        return osf.section.getFileTree().then(tree => {\n                            return tree.refreshDeep(true).thenResolve(tree);\n                        })\n                        .then(tree => {\n                            if (tree.collection.list.find(x => x.name == result.value)) {\n                                notifKey = \"alreadyExists\";\n                                return true;\n                            }\n                            else {\n                                newFullFileName = osf.path.substr(0, osf.path.lastIndexOf(\"/\")) + \"/\" + result.value;\n                                return tree.fileSystem.rename(osf.path, result.value)\n                                .then(() => {\n                                    this.app.fileRenameObserver.dispatchFileRenamedEvent(osf.handle.ref.did, newFullFileName, osf.path, this.session.hostHash);\n                                })\n                                .thenResolve(true);\n                            }\n                        })\n                        .then(res => {\n                            notifKey = res ? \"renamed\" : \"error\";\n                        })\n                        .fail(() => {\n                            notifKey = \"error\";\n                        });\n                    }\n                    else if ((<any>this.openableElement).openableElementType == \"LocalOpenableElement\") {\n                        let el = <any>this.openableElement;\n                        let oldPath = el.entry.path;\n                        el.rename(result.value)\n                        .then(() => {\n                            let newFullFileName = el.entry.path.substr(0, el.entry.path.lastIndexOf(\"/\")) + \"/\" + result.value;\n                            this.app.fileRenameObserver.dispatchLocalFileRenamedEvent(newFullFileName, oldPath);\n                        });\n                    }\n                })\n                .fin(() => {\n                    this.notifications.hideNotification(notificationId);\n                    if (notifKey) {\n                        setTimeout(() => {\n                            this.notifications.showNotification(this.i18n(`plugin.editor.window.editor.rename.notification.${notifKey}`));\n                        }, 900);\n                    }\n                });\n            }\n        })\n        .fin(() => {\n            this.isRenaming = false;\n        });\n    }\n\n\n    isFileLocked(): Q.Promise<boolean> {\n        return this.app.filesLockingService.isLocked(this.session, this.openableElement);\n    }\n\n    canUnlockFile(): Q.Promise<boolean> {\n        return this.app.filesLockingService.canUnlockFile(this.session, this.openableElement);\n    }\n\n    lockFile(): Q.Promise<void> {\n        return Q().then(() => {\n            if (this.openableElement && !this.openableElement.isLocalFile()) {\n                return this.isFileLocked().then(locked => {\n                    if (locked) {\n                        return;\n                    }\n                    return this.app.filesLockingService.manualLockFile(this.session, this.openableElement);\n                })\n            }\n        })\n    }\n\n    unlockFile(): Q.Promise<void> {\n        if (this.openableElement && !this.openableElement.isLocalFile()) {\n            return this.app.filesLockingService.manualUnlockFile(this.session, this.openableElement);\n        }\n    }\n\n    updateLockUnlockButtons(): Q.Promise<void> {\n        // update toolbar buttons\n        return Q().then(() => {\n            return Q.all([\n                this.newFile ? Q.resolve(false) : this.isFileLocked(), // jezeli nowy plik, to nie sprawdzaj lockow, tylko zworc wartosci domyslne\n                this.newFile ? Q.resolve(false) : this.canUnlockFile()\n            ])\n        })\n        .then(res => {\n            let [canUnlock, locked] = res;\n            this.updateLockInfoOnActionButtons(locked, canUnlock);\n            if (this.editorButtons) {\n                this.editorButtons.updateLockState(locked, canUnlock);\n            }\n        })\n    }\n\n    updateLockInfoOnActionButtons(locked: boolean, canUnlock: boolean) {\n        this.callViewMethod(\"updateLockInfoOnActionButtons\", locked, canUnlock);\n    }\n\n    onViewLockFile(): void {\n        this.lockFile();\n    }\n\n    onViewUnlockFile(): void {\n        this.unlockFile();\n    }\n\n    gatherInfoForErrorReport(oldDescriptorInfo: any, descriptor: privfs.fs.descriptor.Descriptor) {\n        let el = this.options && this.options.entry && this.options.entry instanceof mail.section.OpenableSectionFile ? this.options.entry : null;\n        \n        return {\n            who: this.app.identity.hashmail,\n            host: this.app.identity.host,\n            platform: this.app.getSystemPlatfrom(),\n            appVersion: this.app.getVersion(),\n            descriptor: {did: descriptor.ref.did, version: descriptor.lastVersion.raw.signature, serverDate: descriptor.lastVersion.raw.serverDate, modifier: descriptor.lastVersion.raw.modifier},\n            oldDescriptor: oldDescriptorInfo,\n            sessionHost: this.session.host,\n            filePath: el ? el.path : null,\n            sectionId: el ? el.section.getId() : null,\n            currentViewId: this.currentViewId,\n            editorOpenDate: this.editorOpenDate,\n            editorType: \"text-note-editor\"    \n        }\n    }  \n}\n\n(<any>EditorWindowController.prototype).className = \"com.privmx.plugin.editor.window.editor.EditorWindowController\";"],"sourceRoot":"../../../src"}