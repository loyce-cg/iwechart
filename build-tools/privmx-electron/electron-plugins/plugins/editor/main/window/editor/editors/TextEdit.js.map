{"version":3,"sources":["window/editor/editors/TextEdit.ts"],"names":[],"mappings":"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","file":"TextEdit.js","sourcesContent":["import {Editor, EditorOptions} from \"./Editor\";\nimport {JQuery as $, Types} from \"pmc-web\";\nimport {NotesPreferences} from \"../../../main/EditorPlugin\";\n\nexport interface State {\n    $textarea: JQuery;\n}\n\nexport class TextEdit extends Editor<State> {\n    \n    static clazz = \"TextEdit\";\n    static mimetype = \"text/plain\";\n    \n    $textarea: JQuery;\n    \n    constructor(options: EditorOptions) {\n        super(options);\n    }\n    \n    initContainer(): void {\n        this.$container = $('<div class=\"editor-inner text-editor-container\"></div>');\n    }\n    \n    standardizeNewline(str: string): string {\n        return str.replace(\"\\r\\n\", \"\\n\").replace(\"\\r\", \"\\n\");\n    }\n    \n    createDataFromState(state: string): State {\n        let text = state == null ? \"\" : this.standardizeNewline(state);\n        let $textarea = $(\"<textarea>\").addClass(\"form-control editor-textarea\");\n        $textarea.prop(\"defaultValue\", text);\n        this.bindTextareaEvents($textarea);\n        this.$textarea = $textarea;\n        this.updateTextareaEditable();\n        return {\n            $textarea: $textarea\n        };\n    }\n    \n    getState(): string {\n        return this.standardizeNewline(<string>this.data.$textarea.val());\n    }\n    \n    confirmSave(initState: string): void {\n        super.confirmSave(initState);\n        let text = <string>this.data.$textarea.val();\n        this.data.$textarea.prop(\"defaultValue\", text);\n        this.triggerEvent(\"change\", false);\n    }\n    \n    render(): void {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.$container.html(\"\");\n            this.$container.append(this.data.$textarea);\n        }\n    }\n    \n    isChanged(): boolean {\n        return (this.initState == null ? null : this.standardizeNewline(this.initState)) != this.getState();\n    }\n    \n    focus(): void {\n        if (this.data && this.data.$textarea) {\n            this.data.$textarea.focus();\n        }\n    }\n    \n    setEditMode(editMode: boolean): void {\n        this.editMode = editMode;\n        this.updateTextareaEditable();\n    }\n    \n    updateTextareaEditable(): void {\n        if (this.$textarea) {\n            this.$textarea.prop(\"readonly\", !this.editMode);\n        }\n    }\n    \n    bindTextareaEvents($textarea: JQuery): void {\n        $textarea.on(\"cut paste keydown\", event => {\n            let allowedSingleKeys = [\n                16, // shift\n                17, // ctrl\n                18, // alt\n                19, // pause\n                20, // capslock\n                27, // escape\n                33, // pageup\n                34, // pagedown\n                35, // end,\n                36, // home\n                37, // left\n                38, // up\n                39, // right\n                40, // down\n                44, // printscreen,\n                93, // contextmenu\n                112, // f1\n                113, // f2\n                114, // f3\n                115, // f4\n                116, // f5\n                117, // f6\n                118, // f7\n                119, // f8\n                120, // f9\n                121, // f10\n                122, // f11\n                123, // f12,\n                144, // numlock\n                145, // scrolllock\n            ];\n            if (event.type == \"keydown\") {\n                if (event.ctrlKey || event.metaKey) {\n                    if (event.keyCode == 65 || event.keyCode == 67) {\n                        return;\n                    }\n                }\n                if (allowedSingleKeys.indexOf(event.keyCode) != -1) {\n                    return;\n                }\n            }\n            if (!this.editMode) {\n                this.triggerEvent(\"editAttemptWhenNotEditable\", event);\n                return false;\n            }\n        });\n        $textarea.on(\"keydown\", event => {\n            if (event.keyCode == 9 && this.editMode) {\n                let textarea = <HTMLTextAreaElement>event.currentTarget;\n                let $textarea = $(textarea);\n                let start = textarea.selectionStart;\n                let end = textarea.selectionEnd;\n                let val = <string>$textarea.val();\n                $textarea.val(val.substring(0, start) + \"\\t\" + val.substring(end));\n                textarea.selectionStart = textarea.selectionEnd = start + 1;\n                return false;\n            }\n        });\n        $textarea.on(\"input\", event => {\n            let textarea = <HTMLTextAreaElement>event.currentTarget;\n            this.triggerEvent(\"change\", textarea.value != textarea.defaultValue);\n        });\n    }\n}\n\n(<any>TextEdit.prototype).className = \"com.privmx.plugin.editor.window.editor.editors.TextEdit\";"],"sourceRoot":"../../../../src"}