{"version":3,"sources":["window/editor/editors/MindmapConverter.ts"],"names":[],"mappings":"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","file":"MindmapConverter.js","sourcesContent":["// deprecated code \n\nimport { SerializedElementSpec } from \"./Mindmap\";\n\nexport interface ParentsMap {\n    id: number, level: number, childrenObjs: SerializedElementSpec[]\n}\n\nexport class MindmapConverter {\n    static convertTextToMindMap(textElements: string[]): SerializedElementSpec[] | SerializedElementSpec{\n        let mindmap: SerializedElementSpec[] = [];\n        let parentsMap: ParentsMap[] = [];\n        \n        if (textElements.length == 0) {\n            return null;\n        }\n        let baseLevel =  MindmapConverter.getTabLevel(textElements[0]);\n        let currentLevel = baseLevel;\n        \n        let currentNodes:any = mindmap;\n        \n        for ( let i = 0; i < textElements.length; i++) {\n            let elementLevel = MindmapConverter.getTabLevel(textElements[i]);\n            let parentMapElem = MindmapConverter.getParentElem(i, elementLevel, parentsMap);\n            \n            currentNodes = parentMapElem ? parentMapElem.childrenObjs : mindmap;\n            \n            let elemName = MindmapConverter.removeR(textElements[i].trim());\n            if (elemName.length > 0) {\n                currentNodes.push(<SerializedElementSpec>{label: elemName, nodes: []});\n                parentsMap.push({id: i, level: elementLevel, childrenObjs: currentNodes[currentNodes.length-1].nodes});\n            }\n            \n        }\n        return mindmap;\n    }\n    \n    static getParentElem(childId: number, childLevel: number, parentsMap: ParentsMap[]):ParentsMap {\n        for (let i = parentsMap.length - 1; i >= 0; --i) {\n            if (parentsMap[i].id < childId && parentsMap[i].level < childLevel) {\n                return parentsMap[i];\n            }\n        }\n        return null;\n    }\n    \n    static removeR(elem: string): string {\n        return elem.replace(\"\\r\",\"\");\n    }\n    \n    static getTabLevel(text: string): number {\n        let level: number = 0;\n        for (let i = 0; i < text.length; i++) {\n            if (text.charAt(i) == \"\\t\" || text.charAt(i) == \" \") {\n                level++;\n            }\n            else {\n                break;\n            }\n        }\n        return level;\n    }\n    \n    static reduceTabs(elements: string[]) {\n        let reduced: string[] = [];\n        if (elements.length == 0) {\n            return [];\n        }\n        let qty = MindmapConverter.getTabLevel(elements[0]);\n        let toReduce = \"\";\n        for (let j = 0; j < qty; j++) {\n            toReduce += \"\\t\";\n        }\n        \n        for (let i = 0; i < elements.length; i++) {\n            if (elements[i].indexOf(toReduce) == 0) {\n                reduced.push(elements[i].substr(qty));\n            } else {\n                break;\n            }\n        }\n        return reduced;\n    }\n    \n    static getChildElements(elements: string[], parentIndex: number):string[] {\n        let parentLevel = MindmapConverter.getTabLevel(elements[parentIndex]);\n        let children: string[] = [];\n        for (let i = parentIndex + 1; i < elements.length; i++) {\n            let level = MindmapConverter.getTabLevel(elements[i]);\n            if (level > parentLevel) {\n                children.push(elements[i]);\n            } else {\n                break;\n            }\n        }\n        return children;\n    }\n    \n    static getRawAsFlatText(data: SerializedElementSpec): string {\n        return MindmapConverter.singleElementAsText(data, 1) + \"\\n\";\n    }\n    \n    static singleElementAsText(element: SerializedElementSpec, level: number): string {\n        if (!element) {\n            return \"\";\n        }\n        let parent: string = element.label;\n        let gap = Array(level+1).join(\"\\t\");\n        if (element.nodes && element.nodes.length > 0) {\n            element.nodes.forEach( node => {\n                parent += \"\\n\" + gap + MindmapConverter.singleElementAsText(node, level + 1);\n            })\n        }\n        return parent;\n    }\n}\n\n(<any>MindmapConverter.prototype).className = \"com.privmx.plugin.editor.window.editor.editors.MindmapConverter\";"],"sourceRoot":"../../../../src"}