{"version":3,"sources":["window/editor/editors/Mindmap.ts"],"names":[],"mappings":"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","file":"Mindmap.js","sourcesContent":["// deprecated code\n\nimport {EditorOptions} from \"./Editor\";\nimport {JsonEditor} from \"./JsonEditor\";\nimport {Style} from \"./StyledEditor\";\nimport metacores = require(\"document-element\");\nimport {func as customToolbarMindmapTemplate} from \"../template/custom-toolbar-mindmap.html\";\nimport {func as rightSideToolbarMindmapTemplate} from \"../template/right-side-toolbar-mindmap.html\";\nimport {JQuery as $, webUtils} from \"pmc-web\";\nimport {app} from \"pmc-mail\";\nimport { MindmapConverter } from \"./MindmapConverter\";\n\n\nexport type SerializedElement = metacores.SerializedElement;\nexport type SerializedElementSpec = metacores.SerializedElementSpec;\n\nexport interface Raw {\n    elements: metacores.SerializedElement[];\n    version: number;\n    style: Style;\n}\n\nexport interface State {\n    doc: metacores.Document;\n    $view: JQuery;\n    style: Style;\n    version:number;\n}\n\nexport class Mindmap extends JsonEditor<State, Raw> {\n\n    static clazz = \"Mindmap\";\n    static mimetype = \"application/x-smm\";\n    \n    nodeLabelFilters: metacores.Filter[];\n    $help: JQuery;\n    \n    constructor(options: EditorOptions) {\n        super(options);\n        let helper = this.parent.viewManager.getTemplateManager().getHelperByClass(webUtils.MailClientViewHelper);\n        this.nodeLabelFilters = [(inputText: string, cb: (text: string) => void) => {\n            let defaultLinkTitle = helper.i18n(\"plugin.editor.window.editor.content.link.click.helper.text\");\n            let result = helper.linkify(inputText, true, defaultLinkTitle, true);\n            cb(result);\n        }];\n    }\n    \n    initContainer() {\n        this.$container = $('<div class=\"editor-inner mindmap-editor-container\"></div>');\n        this.initStyle();\n    }\n    \n    getObjectState(): Raw {\n        return {\n            elements: this.data.doc.save(),\n            version: this.data.version,\n            style: this.data.style\n        };\n    }\n    \n    paste(data: app.common.clipboard.ClipboardData): void {\n        if (\"MindMapElement\" in data) {\n            this.data.doc.paste(<SerializedElementSpec>JSON.parse(data[\"MindMapElement\"]));\n        }\n        else if (\"text\" in data) {\n            this.data.doc.paste(MindmapConverter.convertTextToMindMap(data[\"text\"].split(\"\\n\")));\n        }\n    }\n    \n    getElements() {\n        return this.data.doc.elements\n    }\n    \n    createDataFromObject(data: Raw): State {\n        data = data != null ? data : {\n            elements: [{\n                klass: \"MindMapElement\",\n                spec: {\n                    label: \"Root\",\n                    nodes: []\n                }\n            }],\n            style: null,\n            version: 1\n        };\n        if (Array.isArray(data)) {\n            data = {\n                elements: data,\n                style: null,\n                version: 1\n            };\n        }\n        let $div = $('<div class=\"mindmap-root\" tabindex=\"-1\"></div>');\n        $div.on(\"paste\", \"[contenteditable=true]\", <any>webUtils.ContentEditableEditor.defaultPasteHandler);\n        $(\"body\").prepend($div);\n        let doc = new metacores.Document();\n        doc.setEditable(this.editMode);\n        doc.setExternalClipboard(true);\n        let elements = data.elements;\n        for (var i in elements) {\n            if (elements[i].klass in <any>metacores) {\n                let container = $(\"<div></div>\").appendTo($div);\n                let element = doc.addElement(<metacores.ElementClass>(<any>metacores)[elements[i].klass], elements[i].spec);\n                if (elements[i].klass == \"MindMapElement\") {\n                    for (var xxx in this.nodeLabelFilters)\n                    element.filters.add(\"node.label\", this.nodeLabelFilters[xxx]);\n                    element.setEditor(new metacores.MindMapEditor());\n                    element.setEditable(doc.editable);\n                }\n                element.render(container, {autoFocus: !this.previewMode, skipNavigationInfoOnDirtyCheck: false});\n            }\n        }\n        $div.detach();\n        $div.on('focus', () => {\n            if (doc) {\n                $(doc).focus();\n            }\n        });\n        this.bindDocEvents(doc);\n        return {\n            doc: doc,\n            $view: $div,\n            style: data.style,\n            version: data.version\n        };\n    }\n    \n    render(): void {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.$container.html(\"\");\n            this.$container.append(this.data.$view);\n            this.$container.append(this.$help);\n        }\n    }\n    \n    updateLayout(): void {\n        let mm = this.data.doc.elements[0].mm;\n        mm.layout(mm.tree);\n    }\n    \n    confirmSave(initState: string): void {\n        this.initState = initState;\n        this.data.doc.confirmSave();\n    }\n    \n    focus(): void {\n        let $mindmap = this.data.$view.find(\".mindmap\");\n        if ($mindmap) {\n            $mindmap.focus();\n        }\n        if (this.newFile) {\n            this.newFile = false;\n            let mm = this.data.doc.elements[0].mm;\n            let node = mm.createNode({\n                label: \"\",\n                nodes: []\n            }, true);\n            mm.appendNode(node, mm.selected);\n            mm.layout(mm.tree);\n            mm.select(node);\n            mm.enterEditMode(true);\n        }\n    }\n    \n    setEditMode(editMode: boolean): void {\n        this.editMode = editMode;\n        if (!this.editMode) {\n            this.data.doc.elements[0].mm.exitEditMode();\n        }\n        this.data.doc.setEditable(this.editMode);\n    }\n    \n    beforeSave(): void {\n        if (this.editMode) {\n            this.data.doc.elements[0].mm.exitEditMode();\n        }\n    }\n    \n    bindDocEvents(doc: metacores.Document): void {\n        $(doc).on(\"copy.document\", (_event, data) => {\n            let cliboardData: app.common.clipboard.ClipboardData = {};\n            cliboardData[\"text\"] = MindmapConverter.getRawAsFlatText(data);\n            cliboardData[\"MindMapElement\"] = JSON.stringify(data);\n            this.triggerEvent(\"copy\", cliboardData);\n        });\n        $(doc).on(\"paste.document\", (_event) => {\n            this.triggerEvent(\"paste\");\n        });\n        $(doc).on(\"editAttemptWhenNotEditable.document\", (_event, data) => {\n            this.triggerEvent(\"editAttemptWhenNotEditable\", data);\n        });\n        $(doc).on(\"change.document\", () => {\n            this.triggerEvent(\"change\", this.isChanged());\n        });\n        $(doc).on(\"clickWithControl.document\", (_event, data) => {\n            let url = $(data.event.target).data(\"url\");\n            if (url) {\n                this.triggerEvent(\"linkClick\", {\n                    elem: data.event.target,\n                    url: url\n                });\n            }\n            return false;\n        });\n    }\n    \n    getCustomToolbarMenuHtml(): string {\n        let model = this.getStyleSwitcherTemplateModel();\n        return this.parent.viewManager.getTemplateManager().createTemplate(customToolbarMindmapTemplate).render(model);\n    }\n    \n    getCustomToolbarRightSideMenuHtml(): string {\n        return this.parent.viewManager.getTemplateManager().createTemplate(rightSideToolbarMindmapTemplate).render();\n    }\n}\n\n(<any>Mindmap.prototype).className = \"com.privmx.plugin.editor.window.editor.editors.Mindmap\";"],"sourceRoot":"../../../../src"}