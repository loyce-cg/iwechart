{"version":3,"sources":["build/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import * as Mail from \"pmc-mail\";\nimport {EditorPlugin} from \"../main/EditorPlugin\";\nimport {EditorWindowController} from \"../window/editor/EditorWindowController\";\nimport {SettingsNotesController} from \"../window/settingsnotes/SettingsNotesController\";\nimport {MindmapHelpWindowController} from \"../window/mindmaphelp/MindmapHelpWindowController\";\n\nexport class Plugin {\n    \n    register(_mail: typeof Mail, app: Mail.app.common.CommonApplication) {\n        let editorPlugin = new EditorPlugin(app);\n        \n        // i18n: main\n        editorPlugin.registerTexts(app.localeService);\n        \n        // i18n: components\n        \n        // i18n: windows\n        EditorWindowController.registerTexts(app.localeService);\n        SettingsNotesController.registerTexts(app.localeService);\n        MindmapHelpWindowController.registerTexts(app.localeService);\n        \n        app.addComponent(\"editor-plugin\", editorPlugin);\n        \n        app.addEventListener<Mail.Types.event.InstanceRegisteredEvent<Mail.window.settings.SettingsWindowController>>(\"instanceregistered\", event => {\n            if (event.instance && event.instance.className == \"com.privmx.core.window.settings.SettingsWindowController\") {\n                new SettingsNotesController(event.instance);\n            }\n        }, \"editor\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.OpenMindmapHelpEvent>(\"open-mindmap-help\", event => {\n            app.ioc.create(MindmapHelpWindowController, [app]).then(win => {\n                app.openSingletonWindow(\"mindmap-help\", win);\n            });\n        }, \"editor\", \"ethernal\");\n        \n        app.addEventListener(\"file-opened-external\", () => {\n            // TODO: lapanie okien zewnetrznych\n        }, \"editor\", \"ethernal\")\n        \n        Mail.mail.filetree.MimeType.add(\".stx\", \"application/x-stt\");\n        Mail.mail.filetree.MimeType.add(\".stt\", \"application/x-stt\");\n        Mail.mail.filetree.MimeType.add(\".pmxtt\", \"application/x-stt\");\n        Mail.mail.filetree.MimeType.add(\".smm\", \"application/x-smm\");\n        Mail.mail.filetree.MimeType.add(\".pmxmm\", \"application/x-smm\");\n        Mail.mail.filetree.MimeType.add(\".pmxvv\", \"video/x-svv\");\n        Mail.mail.filetree.MimeType.add(\".pmxaa\", \"audio/x-saa\");\n        Mail.mail.filetree.MimeType.add(\".sss\", \"application/x-sss\");\n        Mail.mail.filetree.Path.hiddenExts.push(\".stx\");\n        Mail.mail.filetree.Path.hiddenExts.push(\".sss\");\n        Mail.mail.filetree.Path.hiddenExts.push(\".smm\");\n        Mail.mail.filetree.Path.hiddenExts.push(\".stt\");\n        Mail.mail.filetree.Path.hiddenExts.push(\".pmxmm\");\n        Mail.mail.filetree.Path.hiddenExts.push(\".pmxtt\");\n        Mail.mail.filetree.Path.hiddenExts.push(\".pmxvv\");\n        Mail.mail.filetree.Path.hiddenExts.push(\".pmxaa\");\n        \n        app.shellRegistry.registerMimetypeIcon(\"application/x-stt\", \"fa fa-font\");\n        app.shellRegistry.registerMimetypeIcon(\"application/x-smm\", \"privmx-icon privmx-icon-mindmap\");\n        app.shellRegistry.registerMimetypeIcon(\"video/x-svv\", \"fa fa-file-video-o\");\n        app.shellRegistry.registerMimetypeIcon(\"audio/x-saa\", \"fa fa-file-audio-o\");\n        app.shellRegistry.registerMimetypeIcon(\"application/x-sss\", \"fa fa-table\");\n        \n        app.shellRegistry.registerAppEx({\n            id: \"plugin.editor\",\n            open: options => {\n                let newFile: boolean = (<any>options).editorOptions && (<any>options).editorOptions.newFile ? (<any>options).editorOptions.newFile : false;\n                return app.ioc.create(EditorWindowController, [options.parent, options.session, {\n                    entry: options.element,\n                    docked: options.docked,\n                    editMode: options.action != Mail.app.common.shelltypes.ShellOpenAction.PREVIEW && options.action != Mail.app.common.shelltypes.ShellOpenAction.PRINT,\n                    newFile: newFile,\n                    preview: options.action == Mail.app.common.shelltypes.ShellOpenAction.PREVIEW,\n                    action: options.action\n                }]);\n            }\n        });\n        \n        app.shellRegistry.registerApplicationBinding({applicationId: \"plugin.editor\", mimeType: \"text/*\"});//, action: Mail.app.common.shelltypes.ShellOpenAction.PREVIEW});\n        // app.shellRegistry.registerApplicationBinding({applicationId: \"plugin.editor\", mimeType: \"application/x-smm\"});\n        // app.shellRegistry.registerApplicationBinding({applicationId: \"plugin.editor\", mimeType: \"application/x-smm\", action: Mail.app.common.shelltypes.ShellOpenAction.EXTERNAL});\n        app.shellRegistry.registerApplicationBinding({applicationId: \"plugin.editor\", mimeType: \"application/x-stt\"});\n        app.shellRegistry.registerApplicationBinding({applicationId: \"plugin.editor\", mimeType: \"application/x-stt\", action: Mail.app.common.shelltypes.ShellOpenAction.EXTERNAL});\n        \n        app.shellRegistry.registerAppAction({\n            id: \"plugin.editor.new-mindmap\",\n            type: Mail.app.common.shelltypes.ShellActionType.CREATE,\n            labelKey: \"plugin.editor.actions.newMindmap\",\n            icon: \"fa privmx-icon privmx-icon-mindmap\",\n            defaultName: \"new-mindmap\",\n            onCall: (filename?: string) => {\n                return editorPlugin.getNewMindmapContent(filename);\n            }\n        });\n        \n        app.shellRegistry.registerAppAction({\n            id: \"plugin.editor.new-text-note\",\n            type: Mail.app.common.shelltypes.ShellActionType.CREATE,\n            labelKey: \"plugin.editor.actions.newNote\",\n            icon: \"fa fa-font\",\n            defaultName: \"new-note-file\",\n            onCall: (filename?: string) => {\n                return editorPlugin.getNewTextNoteContent(filename);\n            }\n        });\n        \n        let askBeforeLogout = true;\n        app.onLogoutCallback.push(() => {\n            let dfm = EditorWindowController.DirtyWindowsModel;\n            let data = dfm.get();\n            if (askBeforeLogout && data && data.length) {\n                let msgBox = new Mail.window.msgbox.MsgBoxWindowController(app, {\n                    message: app.localeService.i18n(\"plugin.editor.app.logout.dirtyNotes.text\"),\n                    focusOn: \"ok\",\n                    ok: {\n                        visible: true,\n                        btnClass: \"btn-success\",\n                        label: app.localeService.i18n(\"plugin.editor.app.logout.dirtyNotes.button.ok.label\")\n                    },\n                    cancel: {visible: true}\n                });\n                msgBox.open();\n                msgBox.getPromise().then(data => {\n                    if (data.result == \"ok\") {\n                        askBeforeLogout = false;\n                        app.logout();\n                        askBeforeLogout = true;\n                    }\n                });\n                return true;\n            }\n            return false;\n        });\n        app.addEventListener<Mail.Types.event.AfterLogoutPlugin>(\"afterlogout\", () => {\n            editorPlugin.logout();\n        }, \"editor\", \"ethernal\");\n    }\n}\n(<any>Plugin.prototype).className = \"com.privmx.plugin.editor.build.Plugin\";"],"sourceRoot":"../../src"}