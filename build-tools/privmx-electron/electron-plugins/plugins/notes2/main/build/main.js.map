{"version":3,"sources":["build/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import * as Mail from \"pmc-mail\";\nimport * as privfs from \"privfs-client\";\nimport {Notes2Plugin} from \"../main/Notes2Plugin\";\nimport {Notes2WindowController} from \"../window/notes2/Notes2WindowController\";\nimport {NewNoteWindowController} from \"../window/newnote/NewNoteWindowController\";\nimport Q = Mail.Q;\nimport { FilesListController } from \"../component/fileslist/FilesListController\";\nimport { ViewContext } from \"../main/Common\";\nimport { FileChooserWindowController } from \"../window/filechooser/FileChooserWindowController\";\nimport { FileConflictResolverWindowController } from \"../window/fileconflictresolver/FileConflictResolverWindowController\";\nimport { FileErrorWindowController } from \"../window/fileerror/FileErrorWindowController\";\nimport { HistoryWindowController } from \"../window/history/HistoryWindowController\";\nimport { RecentFilesWindowController } from \"../window/recentfiles/RecentFilesWindowController\";\nimport { FilesImporterWindowController } from \"../window/filesimporter/FilesImporterWindowController\";\n\nlet Logger = Mail.Logger.get(\"privfs-notes2-plugin.Plugin\");\n\nexport class Plugin {\n    \n    register(_mail: typeof Mail, app: Mail.app.common.CommonApplication) {\n        let notes2Plugin = app.addComponent(\"notes2-plugin\", new Notes2Plugin(app));\n        // i18n: main\n        notes2Plugin.registerTexts(app.localeService);\n        \n        // i18n: components\n        FilesListController.registerTexts(app.localeService);\n        \n        // i18n: windows\n        FileChooserWindowController.registerTexts(app.localeService);\n        FileConflictResolverWindowController.registerTexts(app.localeService);\n        FileErrorWindowController.registerTexts(app.localeService);\n        HistoryWindowController.registerTexts(app.localeService);\n        NewNoteWindowController.registerTexts(app.localeService);\n        Notes2WindowController.registerTexts(app.localeService);\n        RecentFilesWindowController.registerTexts(app.localeService);\n        FilesImporterWindowController.registerTexts(app.localeService);\n        \n        app.ioc.registerComponent(\"notes2filelist\", FilesListController);\n        \n        app.addEventListener<Mail.Types.event.InstanceRegisteredEvent<Mail.window.sectionsummary.SectionSummaryWindowController>>(\"instanceregistered\", event => {\n            if (event.instance && event.instance.className == \"com.privmx.core.window.sectionsummary.SectionSummaryWindowController\") {\n                event.instance.addViewStyle({path: \"window/component/fileslist/template/main.css\", plugin: \"notes2\"});\n                event.instance.addViewScript({path: \"build/view.js\", plugin: \"notes2\"});\n                app.ioc.create(FilesListController, [event.instance, event.instance.personsComponent]).then(ele => {\n                    ele.context = ViewContext.SummaryWindow;\n                    event.instance.registerModule(\"notes2\", ele);\n                });\n            }\n        }, \"notes2\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.FileRenamedEvent>(\"fileRenamed\", event => {\n            if (event.isLocal) {\n                notes2Plugin.recentService.onLocalFileRenamed(event.oldPath, event.newPath);\n            }\n            else {\n                let hostHash = event.hostHash || app.sessionManager.getLocalSession().hostHash;\n                if (hostHash == app.sessionManager.getLocalSession().hostHash) {\n                    notes2Plugin.recentService.onFileRenamed(event.did, event.oldPath, event.newPath);\n                }\n            }\n        });\n            \n        app.addEventListener<Mail.Types.event.AfterLoginEvent>(\"afterlogin\", _event => {\n            notes2Plugin.reset();\n            app.addCountModel(notes2Plugin.filesUnreadCountModel);\n            let cnt = <Mail.window.container.ContainerWindowController>app.windows.container;\n            let entry = cnt.registerAppWindow({\n                id: \"notes2\",\n                label: app.localeService.i18n(\"plugin.notes2.app.navbar.menu.label\"),\n                icon: \"privmx-icon-notes2\",\n                controllerClass: Notes2WindowController,\n                historyPath: \"/notes2\",\n                count: notes2Plugin.filesUnreadCountModel,\n                countFullyLoaded: notes2Plugin.filesUnreadCountFullyLoadedModel,\n            });\n            cnt.initApp = entry.id;\n            \n            Q().then(() => {\n                return app.mailClientApi.loadUserPreferences()\n            });\n        }, \"notes2\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.OpenHistoryViewEvent>(\"open-history-view\", event => {\n            notes2Plugin.openHistory(event);\n        }, \"notes2\", \"ethernal\");\n        \n        if (app.isElectronApp()) {\n            app.addEventListener(\"customaction\", (event: Mail.Types.event.CustomActionEvent) => {\n                if (event.actionType == \"open-last-file\") {\n                    \n                    notes2Plugin.recentService.openLastFileFromRecent(app.sessionManager.getLocalSession());\n                }\n            }, \"notes2\", \"ethernal\");\n            let recentFilesMenu: Mail.app.electronTray.TrayMenuItem = {\n                id: \"recentFiles\",\n                menuId: \"loggedIn\",\n                order: 25,\n                onLanguageChange: () => app.localeService.i18n(\"plugin.notes2.app.tray.recentfiles\"),\n                shortcutId: \"global.recentFiles\",\n                options: {\n                    label: app.localeService.i18n(\"plugin.notes2.app.tray.recentfiles\"),\n                    type: \"normal\",\n                    click: () => {\n                        notes2Plugin.openRecent().then(result => {\n                            return notes2Plugin.recentService.getRecentFileToOpen(result.id, result.did).then(element => {\n                                if (element) {\n                                    let action = result.action || Mail.app.common.shelltypes.ShellOpenAction.EXTERNAL;\n                                    app.shellRegistry.shellOpen({\n                                        action: action,\n                                        element: element,\n                                        session: app.sessionManager.getLocalSession(),\n                                    });\n                                }\n                                else {\n                                    notes2Plugin.recentService.removeRecentOpenedFile(result.id, result.did).then(() => {\n                                        if (notes2Plugin.recentFilesWindowController) {\n                                            notes2Plugin.recentFilesWindowController.loadRecentFilesList();\n                                        }\n                                    });\n                                    app.msgBox.alert(app.localeService.i18n(\"plugin.notes2.fileDoesNotExist\"));\n                                }\n                            });\n                        });\n                    }\n                }\n            };\n            (<any>app).trayMenu.registerMenuItem(recentFilesMenu);\n            \n            // let trayMenuItem: Mail.app.electronTray.TrayMenuItem = {\n            //     id: \"newNote\",\n            //     menuId: \"loggedIn\",\n            //     order: 20,\n            //     onLanguageChange: () => app.localeService.i18n(\"plugin.notes2.app.tray.newNote\"),\n            //     shortcutId: \"global.newFile\",\n            //     options: {\n            //         label: app.localeService.i18n(\"plugin.notes2.app.tray.newNote\"),\n            //         type: \"normal\",\n            //         click: () => {\n            //             app.ioc.create(NewNoteWindowController, [app]).then(win => {\n            //                 win.openWindowOptions.modal = false;\n            //                 app.openSingletonWindow(\"new-note-window-from-tray-menu\", win);\n            //                 win.getResult().then(result => {\n            //                     notes2Plugin.sectionManager.uploadFile({\n            //                         data: result.content,\n            //                         destination: result.destination,\n            //                         path: \"/\"\n            //                     })\n            //                     .then(result => {\n            //                         app.shellRegistry.shellOpen({\n            //                             action: Mail.app.common.shelltypes.ShellOpenAction.EXTERNAL,\n            //                             element: result.openableElement\n            //                         });\n            //                     })\n            //                     .fail(e => {\n            //                         Logger.error(\"Error during creating note\", e);\n            //                     });\n            //                 });\n            //             });\n            //         }\n            //     }\n            // };\n            // (<any>app).trayMenu.registerMenuItem(trayMenuItem);\n            \n            let newTextNoteTrayMenuItem: Mail.app.electronTray.TrayMenuItem = {\n                id: \"newTextNote\",\n                menuId: \"loggedIn\",\n                order: 21,\n                onLanguageChange: () => app.localeService.i18n(\"plugin.notes2.app.tray.newTextNote\"),\n                shortcutId: \"global.newTextNote\",\n                options: {\n                    label: app.localeService.i18n(\"plugin.notes2.app.tray.newTextNote\"),\n                    type: \"normal\",\n                    click: () => {\n                        notes2Plugin.openNewTextNoteWindow(app.sessionManager.getLocalSession());\n                    }\n                }\n            };\n            (<any>app).trayMenu.registerMenuItem(newTextNoteTrayMenuItem);\n            \n            let newMindmapTrayMenuItem: Mail.app.electronTray.TrayMenuItem = {\n                id: \"newMindmap\",\n                menuId: \"loggedIn\",\n                order: 21,\n                onLanguageChange: () => app.localeService.i18n(\"plugin.notes2.app.tray.newMindmap\"),\n                shortcutId: \"global.newMindmap\",\n                options: {\n                    label: app.localeService.i18n(\"plugin.notes2.app.tray.newMindmap\"),\n                    type: \"normal\",\n                    click: () => {\n                        notes2Plugin.openNewMindmapWindow(app.sessionManager.getLocalSession());\n                    }\n                }\n            };\n            (<any>app).trayMenu.registerMenuItem(newMindmapTrayMenuItem);\n            \n            let screenshotMenuItem: Mail.app.electronTray.TrayMenuItem = {\n                id: \"takeScreenshot\",\n                menuId: \"loggedIn\",\n                order: 30,\n                onLanguageChange: () => app.localeService.i18n(\"plugin.notes2.app.tray.takeScreenshot\"),\n                shortcutId: \"global.takeScreenshot\",\n                options: {\n                    label: app.localeService.i18n(\"plugin.notes2.app.tray.takeScreenshot\"),\n                    type: \"normal\",\n                    click: () => {\n                        app.screenCapture()\n                    }\n                }\n            };\n            (<any>app).trayMenu.registerMenuItem(screenshotMenuItem);\n        }\n        \n        app.addEventListener<Mail.Types.event.SinkIndexManagerReady>(\"sinkindexmanagerready\", () => {\n            notes2Plugin.load().fail(e => {\n                Logger.error(\"Error during loading channels\", e);\n            });\n        }, \"notes2\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.AfterLogoutPlugin>(\"afterlogout\", _event => {\n            notes2Plugin.reset();\n        }, \"notes2\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.FileOpenedEvent>(\"file-opened\", event => {\n            let session = app.sessionManager.getSessionByHostHash(event.hostHash);\n            if (event.hostHash = app.sessionManager.getLocalSession().hostHash) {\n                notes2Plugin.recentService.addRecentOpenedFile(event).then(() => {\n                    if (notes2Plugin.recentFilesWindowController) {\n                        return notes2Plugin.recentFilesWindowController.loadRecentFilesList();\n                    }\n                });\n            }\n            if (event.element instanceof Mail.mail.section.OpenableSectionFile) {\n                notes2Plugin.markFileAsWatchedById(session, event.element.getElementId(), event.element.section.getId());\n            }\n        }, \"notes2\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.SinkPollingResultEvent>(\"sinkpollingresult\", event => {\n            notes2Plugin.onPollingResult(event.entries);\n        }, \"notes2\", \"ethernal\");\n        \n    }\n}\n\n(<any>Plugin.prototype).className = \"com.privmx.plugin.notes2.build.Plugin\";"],"sourceRoot":"../../src"}