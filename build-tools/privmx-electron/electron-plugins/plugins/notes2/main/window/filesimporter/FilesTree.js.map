{"version":3,"sources":["window/filesimporter/FilesTree.ts"],"names":[],"mappings":"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","file":"FilesTree.js","sourcesContent":["import { TreeItem } from \"./TreeItem\";\nexport class Leaf implements TreeItem {\n    id: string;\n    parentId: string;\n    type: string;\n    checked: boolean;\n    visited: boolean;\n    size: number;\n    parent: Leaf;\n    children: {[id: string]: Leaf};\n\n    constructor(treeItem: TreeItem, parent: Leaf) {\n        this.id = treeItem.id;\n        this.parentId = treeItem.parentId;\n        this.type = treeItem.type;\n        this.checked = treeItem.checked;\n        this.visited = false;\n        this.size = 0;\n        this.children = {};\n        this.parent = parent;\n    }\n\n    getLeaf(relativeId: string): Leaf {\n        if (this.isLeafExists(relativeId)) {\n            return this.children[relativeId];\n        }\n        throw new Error(\"leaf with relativeId: \"+relativeId+\" does not exist on parent: \" + this.id);\n    }\n\n    isLeafExists(relativeId: string): boolean {\n        return relativeId in this.children;\n    }\n\n    addLeaf(leaf: Leaf): void {\n        this.children[Leaf.getIdLastPart(leaf.id)] = leaf;\n    }\n\n    removeLeaf(leaf: Leaf): void {\n        for (let id in this.children) {\n            if (leaf.id == this.children[id].id) {\n                this.children[id] = null;\n                delete this.children[id];\n            }\n        }\n    }\n\n    static getIdLastPart(id: string): string {\n        return id.split(\"/\").splice(-1, 1)[0];\n    }\n\n    static getIdFirstPart(id: string): string {\n        return id.split(\"/\").slice(0, 1)[0];\n    }\n\n    static getIdRelativeToParent(id: string, parentId: string): string {\n        let idWithoutParent = id.replace(parentId, \"\");\n        return idWithoutParent.startsWith(\"/\") ? idWithoutParent.slice(1) : idWithoutParent;\n    }\n}\n\nexport class FilesTree {\n    root: Leaf;\n\n    constructor() {\n        this.root = new Leaf({\n            id: \"\",\n            parentId: null,\n            type: \"directory\",\n            checked: false\n        }, null)\n    }\n\n    addFileToTree(fileItem: TreeItem, parent: Leaf = this.root) {\n        let idRelativeToParent = Leaf.getIdRelativeToParent(fileItem.id, parent.id);\n        let idFirstPart = Leaf.getIdFirstPart(idRelativeToParent);\n        let idLastPart = Leaf.getIdLastPart(idRelativeToParent);\n\n        if (parent.isLeafExists(idFirstPart)) {\n            if (idFirstPart == idLastPart) {\n                this.updateFileInTree(fileItem, parent.getLeaf(idFirstPart));\n            }\n            else {\n                this.addFileToTree(fileItem, parent.getLeaf(idFirstPart));\n            }\n        }\n        else if (idFirstPart == Leaf.getIdLastPart(fileItem.id)) {\n            let leaf = new Leaf(fileItem, parent);\n            parent.addLeaf(leaf);\n        }\n        else {\n            let dummyLeafId = parent.id + \"/\" + idFirstPart;\n            parent.addLeaf(new Leaf({\n                parentId: parent.id,\n                id: dummyLeafId,\n                type: \"directory\",\n                checked: false\n            }, parent));\n            this.addFileToTree(fileItem, parent.getLeaf(idFirstPart));\n        }\n    }\n\n\n\n    removePathFromTree(path: string): void {\n        let leaf = this.findLeaf(path);\n        if (! leaf) {\n            return;\n        }\n        const id = leaf.id;\n        const parent = leaf.parent;\n        parent.removeLeaf(leaf);\n\n        leaf = null;\n    }\n\n    deleteLeaf(id: string, parent: Leaf = this.root): void {\n        let leaf = this.findLeaf(id, parent);\n        if (! leaf) {\n            return;\n        }\n        const relativeId = Leaf.getIdRelativeToParent(id, parent.id);\n        if (leaf.parent && leaf.parent.id == parent.id) {\n            parent.removeLeaf(leaf);\n            return;\n        }\n        else {\n            for (let item in parent.children) {\n                this.deleteLeaf(id, parent.children[item]);\n            }\n        }\n    }\n\n    getDirectoriesToVisit(leaf: Leaf = this.root): string[] {\n        let pathsList: string[] = [];\n        if (leaf.type == \"directory\" && leaf.checked == true && leaf.visited == false) {\n            pathsList.push(leaf.id);\n        }\n        for (let child in leaf.children) {\n            let childPaths = this.getDirectoriesToVisit(leaf.children[child]);\n            pathsList = pathsList.concat(childPaths);\n        }\n        return pathsList;\n    }\n\n    getSelectedFiles(leaf: Leaf = this.root): string[] {\n        let pathsList: string[] = [];\n        if (leaf.checked == true) {\n            pathsList.push(leaf.id);\n        }\n        for (let child in leaf.children) {\n            let childPaths = this.getSelectedFiles(leaf.children[child]);\n            pathsList = pathsList.concat(childPaths);\n        }\n        return pathsList;\n    }\n\n    getSelectedRootLeafs(leaf: Leaf = this.root): Leaf[] {\n        let roots: Leaf[] = [];\n        if (leaf.parent) {\n            if (leaf.checked && leaf.parent.checked == false) {\n                // thats a root dir/file\n                roots.push(leaf);\n            }\n        }\n        else {\n            if (leaf.checked) {\n                roots.push(leaf);\n            }\n        }\n        for (let item in leaf.children) {\n            let childRoots = this.getSelectedRootLeafs(leaf.children[item]);\n            roots = roots.concat(childRoots);\n        }\n        return roots;\n    }\n\n    setFileSize(path: string, size: number, leaf: Leaf = this.root): void {\n        if (leaf.id == path) {\n            leaf.size = size;\n            if (leaf.parent) {\n                this.updateFileSizeUpTree(leaf.parent);\n            }\n        }\n        else {\n            for (let item in leaf.children) {\n                this.setFileSize(path, size, leaf.children[item]);\n            }\n        }\n    }\n\n    findLeaf(path: string, leaf: Leaf = this.root): Leaf {\n        if (leaf.id == path) {\n            return leaf;\n        }\n        if (leaf.children == {}) {\n            return null;\n        }\n        else {\n            let found: Leaf;\n            for (let item in leaf.children) {\n                found = this.findLeaf(path, leaf.children[item]);\n                if (found) {\n                    break;\n                }\n            }\n            return found;\n        }\n    }\n\n    getFileSize(path: string, leaf: Leaf = this.root): number {\n        const leafByPath = this.findLeaf(path, leaf);\n        if (! leafByPath) {\n            throw new Error(\"No leaf by given path: \" + path);\n        }\n        return leafByPath.size;\n    }\n\n\n    getCheckedTotalSize(leaf: Leaf = this.root) {\n        let totalSize: number = 0;\n        if (leaf.checked && leaf.type == \"file\") {\n            totalSize += leaf.size;\n        }\n        else {\n            for (let item in leaf.children) {\n                const child = leaf.children[item];\n                if (child.checked && child.type == \"file\") {\n                    totalSize += child.size;\n                }\n                else {\n                    totalSize += this.getCheckedTotalSize(child);\n                }\n            }\n            return totalSize;\n        }\n    }\n\n    getCheckedCount(leaf: Leaf = this.root) {\n        let count: number = 0;\n        if (leaf.checked && leaf.type == \"file\") {\n            count ++;\n        }\n        else {\n            for (let item in leaf.children) {\n                const child = leaf.children[item];\n                if (child.checked && child.type == \"file\") {\n                    count ++;\n                }\n                else {\n                    count += this.getCheckedCount(child);\n                }\n            }\n            return count;\n        }\n    }\n\n\n    setFileVisited(path: string, leaf: Leaf = this.root): void {\n        if (leaf.id == path) {\n            leaf.visited = true;\n        }\n        else {\n            for (let item in leaf.children) {\n                this.setFileVisited(path, leaf.children[item]);\n            }\n        }\n    }\n\n    setFileChecked(path: string, checked: boolean, leaf: Leaf = this.root): void {\n        if (leaf.id == path) {\n            leaf.checked = checked;\n            for (let item in leaf.children) {\n                this.setFileChecked(path, checked, leaf.children[item]);\n            }\n        }\n        else {\n            for (let item in leaf.children) {\n                this.setFileChecked(path, checked, leaf.children[item]);\n            }\n        }\n    }\n\n\n\n    updateFileSizeUpTree(leaf: Leaf): void {\n        leaf.size = 0;\n        for (let id in leaf.children) {\n            leaf.size += leaf.children[id].size;\n        }\n        if (leaf.parent && leaf.parent.checked) {\n            this.updateFileSizeUpTree(leaf.parent);\n        }\n    }\n\n\n    updateFileInTree(fileItem: TreeItem, leafToUpdate: Leaf): void {\n        leafToUpdate.checked = fileItem.checked;\n        leafToUpdate.type = fileItem.type;\n    }\n\n    printSubTree(leaf: Leaf = this.root): void {\n        console.log(\"Parent: \", leaf.parentId);\n        console.log(\"leaf: \", leaf.id, \"parent: \", leaf.parent ? leaf.parent.id : \"null\", \"size\", leaf.size, \"(\", \"checked: \", leaf.checked, \"visited\", leaf.visited,\"type\", leaf.type, \")\");\n        for (let item in leaf.children) {\n            this.printSubTree(leaf.children[item]);\n        }\n    }\n\n    fireTest(): void {\n        this.addFileToTree({id: \"/Users/kamil/Documents/lala.txt\", parentId: \"/Users/kamil/Documents\", type: \"file\", checked: true});\n        this.addFileToTree({id: \"/Users/kamil/Documents/ble.txt\", parentId: \"/Users/kamil/Documents\", type: \"file\", checked: true});\n        this.addFileToTree({id: \"/Users/kamil/test.txt\", parentId: \"/Users/kamil\", type: \"file\", checked: true});\n        this.addFileToTree({id: \"/var/bin/file1.txt\", parentId: \"/var/bin\", type: \"file\", checked: true});\n        this.addFileToTree({id: \"/var/bin/file2.txt\", parentId: \"/var/bin\", type: \"file\", checked: true});\n        this.addFileToTree({id: \"/Users/kamil\", parentId: \"/Users\", type: \"directory\", checked: true});\n\n        this.setFileSize(\"/Users/kamil/Documents/lala.txt\", 8);\n        this.setFileSize(\"/Users/kamil/Documents/ble.txt\", 16);\n        this.setFileSize(\"/Users/kamil/test.txt\", 32);\n        this.setFileSize(\"/var/bin/file1.txt\", 64);\n   \n        \n        this.printSubTree();\n\n        console.log(\"dirs to visit:\");\n        this.getDirectoriesToVisit().forEach(x => console.log(x));\n    }\n}\n(<any>Leaf.prototype).className = \"com.privmx.plugin.notes2.window.filesimporter.Leaf\";\n(<any>FilesTree.prototype).className = \"com.privmx.plugin.notes2.window.filesimporter.FilesTree\";"],"sourceRoot":"../../../src"}