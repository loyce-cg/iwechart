{"version":3,"sources":["window/filesimporter/FilesImporterWindowController.ts"],"names":[],"mappings":"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","file":"FilesImporterWindowController.js","sourcesContent":["import {app, component, mail, utils, window, Q, Types, privfs, Logger as RootLogger} from \"pmc-mail\";\nimport {Notes2Plugin} from \"../../main/Notes2Plugin\";\nimport { i18n } from \"./i18n\";\nimport Inject = utils.decorators.Inject;\nimport Dependencies = utils.decorators.Dependencies;\nimport { LocalFS, LocalEntry } from \"../../main/LocalFS\";\nimport { FileEntryBase, Notes2Utils } from \"../../main/Notes2Utils\";\nimport { TreeItem } from \"./TreeItem\";\nimport { FilesTree, Leaf } from \"./FilesTree\";\nimport { FilesImporterUtils } from \"./FilesImporterUtils\";\nimport { ProcessingQueue } from \"./ProcessingQueue\";\nimport { SectionsPickerPanelController } from \"./pickerpanel/SectionsPickerPanelController\";\nimport { FilesPickerPanelController } from \"./pickerpanel/FilesPickerPanelController\";\nimport { FilesToImportPanelController } from \"./pickerpanel/FilesToImportPanelController\";\nimport { AddItemEvent, RemoveItemEvent, FileEntry } from \"./pickerpanel/Types\";\nconst Logger = RootLogger.get(\"notes2.FilesImporterWindowController\");\nexport interface Model {\n    sectionName: string;\n    sectionType: string;\n    destDirectory: string;\n    showHiddenFiles: boolean;\n    computerName: string;\n    currentPath: string;\n    conversationModel?: Types.webUtils.ConversationModel;\n}\n\n@Dependencies([\"tree\", \"extlist\", \"splitter\"])\nexport class FilesImporterWindowController extends window.base.BaseWindowController {\n    static DEFAULT_WINDOW_WIDTH: number = 800;\n    static textsPrefix: string = \"plugin.notes2.window.filesimporter.\";\n    static rootId: string = \"/\";\n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    notes2Plugin: Notes2Plugin;\n    \n    localFS: LocalFS;\n    personsComponent: component.persons.PersonsController;\n\n    filesTree: FilesTree;\n    treeProcessingQueue: ProcessingQueue;\n    importerUtils: FilesImporterUtils;\n    sectionDestinationDir: string;\n    currentBrowsingDir: string = null;\n    showHiddenFiles: boolean = false;\n\n    currentFsDirCollection: utils.collection.MutableCollection<FileEntryBase>;\n\n    ///////////////////////////////////////\n    sectionsPicker: SectionsPickerPanelController;\n    filesPicker: FilesPickerPanelController;\n    choosenFiles: FilesToImportPanelController;\n    panelsSplitter: component.splitter.SplitterController;\n\n    choosenFilesCollection: utils.collection.MutableCollection<FileEntry>;\n    session: mail.session.Session;\n\n    constructor(parentWindow: Types.app.WindowParent, public section: mail.section.SectionService, sectionDestinationDir: string, browsingDir?: string) {\n        super(parentWindow, __filename, __dirname, {\n            isPublic: false,\n            subs: {\n                \"panels-splitter\": {\n                    defaultValue: Math.round(FilesImporterWindowController.DEFAULT_WINDOW_WIDTH / 2),\n                }\n            }\n        });\n        this.ipcMode = true;\n        this.setPluginViewAssets(\"notes2\");\n        this.notes2Plugin = this.app.getComponent(\"notes2-plugin\");\n        this.personsComponent = this.addComponent(\"personsComponent\", this.componentFactory.createComponent(\"persons\", [this]));\n\n\n        this.openWindowOptions = {\n            toolbar: false,\n            maximized: false,\n            show: false,\n            position: \"center\",\n            minWidth: 600,\n            width: FilesImporterWindowController.DEFAULT_WINDOW_WIDTH,\n            height: 400,\n            resizable: true,\n            icon: \"icon fa fa-upload\",\n            title: this.i18n(\"plugin.notes2.window.filesimporter.title\")\n        };\n        this.importerUtils = new FilesImporterUtils(this.app);\n        this.sectionDestinationDir = sectionDestinationDir;\n        this.currentFsDirCollection = this.addComponent(\"currentFsDirCollection\", new utils.collection.MutableCollection<FileEntryBase>());\n        \n        this.filesTree = new FilesTree();\n        this.treeProcessingQueue = new ProcessingQueue();\n    }\n\n    public setSession(session: mail.session.Session) {\n        this.session = session;\n    }\n\n    private getSession(): mail.session.Session {\n        return this.session ? this.session : this.app.sessionManager.getLocalSession();\n    }\n\n    init(): Q.Promise<void> {\n        return Q().then(() => {\n            return this.loadSettings();\n        })\n        .then(() => {\n            this.localFS = new LocalFS(this.currentFsDirCollection, \"\", (newPath) => {\n                this.setCurrentDir(newPath);\n                // this.addSubTree(newPath, this.localFS.currentFileNamesCollection);\n                this.processNewPath(newPath, this.localFS.currentFileNamesCollection);\n            });  \n            this.initComponents();    \n            this.localFS.browseWithParent(LocalFS.getHomeDir());\n        })\n    }\n\n    initComponents(): void {\n        this.sectionsPicker = this.addComponent(\"sectionsPicker\", new SectionsPickerPanelController(this, null, this.app.sessionManager.getLocalSession().sectionManager.sectionsCollection));\n        this.filesPicker = this.addComponent(\"filesPicker\", new FilesPickerPanelController(this, null, this.currentFsDirCollection, (path, parentPath) => {\n                this.setCurrentDir(path);\n                this.updateCurrentDirInView(path);     \n                this.localFS.browseWithParent(this.getCurrentDir())\n            },\n            (mimeType) => {\n                return this.app.shellRegistry.resolveIcon(mimeType)\n            }    \n        ));\n        this.choosenFilesCollection = this.addComponent(\"choosenFilesCollection\", new utils.collection.MutableCollection<FileEntry>());\n        this.choosenFiles = this.addComponent(\"choosenFiles\", new FilesToImportPanelController(this, null, this.choosenFilesCollection))\n        let settings = this.settings.create(\"panels-splitter\");\n\n        // start always with splitter centered\n        settings.currentValue = Math.round(FilesImporterWindowController.DEFAULT_WINDOW_WIDTH / 2);\n        this.panelsSplitter = this.addComponent(\"panelsSplitter\", this.componentFactory.createComponent(\"splitter\", [this, settings]));\n    \n        this.filesPicker.bindEvent<AddItemEvent>(this.filesPicker, \"add-item\", this.onItemAddClick.bind(this));\n        this.choosenFiles.bindEvent<RemoveItemEvent>(this.choosenFiles, \"remove-item\", this.onItemRemoveClick.bind(this));\n    }\n\n    onViewLoad() {\n        this.updateCurrentDirInView(this.getCurrentDir());\n        this.updateFilesTotalSize();     \n    }\n\n\n    updateCurrentDirInView(dir: string): void {\n        this.callViewMethod(\"updateCurrentDir\", dir);\n    }\n\n    onItemAddClick(event: AddItemEvent): void {\n        let item = this.filesPicker.getItem(event.id, event.basePath);\n        let alreadyChoosen = this.choosenFiles.getItem(event.id, event.basePath);\n        \n        if (item && !alreadyChoosen) {\n            this.choosenFilesCollection.add(item);\n            this.updateItemSelection(item.getId(), true);\n        }\n    }\n\n    onItemRemoveClick(event: RemoveItemEvent): void {\n        let item = this.choosenFiles.itemsMergedCollection.find(x => x.getId() == event.id && x.getBasePath() == event.basePath);\n        \n        if (item) {\n            const itemIndex = this.choosenFilesCollection.indexOf(item);\n            if (itemIndex > -1) {\n                this.choosenFilesCollection.removeAt(itemIndex);\n                this.updateItemSelection(item.getId(), false);\n            }\n        }\n    }\n\n    getRootEntry(): LocalEntry {\n        return {\n            id: \"/\",\n            parent: null,\n            type: \"directory\",\n            path: \"/\",\n            name: \"/\",\n            size: 0,\n            ctime: new Date(),\n            mtime: new Date(),\n            isDirectory: () => true,\n            isFile: () => false,\n        }\n    }\n\n    async processNewPath(path: string, collection: utils.collection.MutableCollection<FileEntryBase>, asChecked = false): Promise<void> {\n        return new Promise<void>(() => {\n            this.filesTree.addFileToTree(<TreeItem>{\n                id: path,\n                parentId: path.split(\"/\").slice(0, -1).join(\"/\"),\n                type: \"directory\",\n                checked: asChecked\n            });\n\n            collection.forEach(async child => {\n                let entry = <LocalEntry>child;\n                let parentId: string;\n                if (entry.id == \"/\") {\n                    parentId = \"root\";\n                }\n                else {\n                    parentId = entry.parent ? entry.parent.id : null\n                }\n                this.filesTree.addFileToTree({\n                    id: entry.id,\n                    parentId: parentId,\n                    type: entry.type,\n                    checked: asChecked\n                })\n                if (entry.type == \"file\") {\n                    this.filesTree.setFileSize(entry.id, entry.size);\n                }\n            })\n\n        })\n    }\n\n    onViewHiddenChanged(checked: boolean): void {\n        this.filesPicker.setShowHidden(checked);\n    }\n\n    resetSizeCountrInView(): void {\n        this.callViewMethod(\"resetSizeCounter\");\n    }\n\n    updateSizeCounterInView(addSize: number): void {\n        this.callViewMethod(\"addSizeToCounter\", addSize);\n    }\n\n    setCurrentDir(dir: string): void {\n        this.currentBrowsingDir = dir;\n    }\n\n    getCurrentDir(): string {\n        return this.currentBrowsingDir;\n    }\n\n    getModel(): Model {\n        let sectionName: string;\n        let convModel: Types.webUtils.ConversationModel;\n        let sectionId = this.section.getId();\n        if (this.section.getId().indexOf(\"usergroup:\") == 0) {\n            const conv = this.getSession().conv2Service.collection.find(x => x.section && (x.section.getId() == sectionId || x.id == sectionId));\n            convModel = utils.Converter.convertConv2(conv, 0, 0, 0, true, 0, false, false, false, null);\n            sectionName = null;\n        }\n        else {\n            if (this.section.getId() == \"private:\" + this.section.manager.identity.user) {\n                sectionName = this.app.localeService.i18n(\"plugin.notes2.component.filesList.filter.my\");\n            }\n            else if (this.section.getId() == \"all\") {\n                this.app.localeService.i18n(\"plugin.notes2.component.filesList.filter.all\");\n            }\n            else {\n                sectionName = this.section.getName()\n            }    \n        }\n        return {\n            sectionName: sectionName,\n            sectionType: this.section.isPrivate() ? \"private\" : \"public\",\n            destDirectory: this.sectionDestinationDir,\n            showHiddenFiles: this.showHiddenFiles,\n            computerName: (<any>this.app).getComputerName(),\n            currentPath: this.getCurrentDir(),\n            conversationModel: convModel\n        };\n    }\n    \n    updateItemSelection(itemId: string, checked: boolean): void {\n        this.filesTree.setFileChecked(itemId, checked);\n        const leaf = this.filesTree.findLeaf(itemId);\n\n        if (checked && leaf) {\n            if (leaf.visited) {\n                this.callViewDoneProcessing(itemId);\n            }\n            else {\n                this.browseFilesTreeDeep();\n            }\n        }\n        else if (! checked) {\n            if (leaf) {\n                this.cancelProcessing(itemId);\n            }\n        }\n        this.updateFilesTotalSize();\n    }\n\n    cancelProcessing(id: string): void {\n        (<any>this.app).cancelFileTreeBrowseWorker(id);\n        // this.filesTree.removePathFromTree(id);\n        const leafToRemove = this.filesTree.findLeaf(id);\n        if (leafToRemove.type == \"directory\") {\n            this.filesTree.deleteLeaf(id);\n            this.filesTree.addFileToTree({\n                id: id,\n                parentId: leafToRemove.parentId,\n                type: leafToRemove.type,\n                checked: false\n            })\n\n        }\n    }\n\n    callViewDoneProcessing(id: string) {\n        this.callViewMethod(\"doneProcessing\", id);\n    }\n\n    onViewClose() {\n        this.close();\n    }\n\n    onViewImportFiles(): void {\n        new Promise<void>(async () => {\n            try {\n                await this.uploadFiles();\n            }\n            catch(e) {\n                Logger.error(\"error in uploadFiles\", e);\n            }\n            this.close();\n        })\n    }\n\n    private async addLeafToUpload(leaf: Leaf, baseDir: string) {\n        let sectionTree = await this.section.getFileTree();\n        let relative = Leaf.getIdLastPart(leaf.id);\n\n        if (leaf.type == \"file\") {\n            let entry = LocalFS.getEntry(leaf.id);\n            let content = this.app.createContent(<any>{\n                path: leaf.id,\n                type: entry.mime\n            });\n            (<any>this.app).uploadService.addFile({content: content, session: this.app.sessionManager.getLocalSession(), destination: this.section.getId(), path: baseDir});\n        }\n\n        if (leaf.type == \"directory\") {\n            let resolvedBaseDir = baseDir == \"/\" ? baseDir + relative : baseDir + \"/\" + relative;\n            let baseDirExists = resolvedBaseDir == \"/\" ? true : await sectionTree.fileSystem.exists(resolvedBaseDir);\n            if (! baseDirExists) {\n                await sectionTree.fileSystem.mkdirs(resolvedBaseDir);\n            }\n\n            for (let child in leaf.children) {\n                await this.addLeafToUpload(leaf.children[child], resolvedBaseDir);\n            }\n        }\n\n    }\n\n    private async uploadFiles(): Promise<void> {\n        for (let p of this.choosenFiles.items.collection.list) {\n            let leaf = this.filesTree.findLeaf(p.id);\n\n            let baseDir = this.sectionDestinationDir;\n            await this.addLeafToUpload(leaf, baseDir);\n        }\n    }\n\n    ///////////////// PO NOWEMU ////////////////\n    browseFilesTreeDeep(): void {\n        let dirs = this.filesTree.getDirectoriesToVisit();\n        this.addDirsToProcessingQueue(dirs);\n    }\n\n    updateFilesTotalSize(): void {\n        const totalCount = this.filesTree.getCheckedCount();\n        const totalSize = this.filesTree.getCheckedTotalSize();\n        this.callViewMethod(\"updateFilesTotal\", totalCount, totalSize);\n    }\n\n    addDirsToProcessingQueue(dirs: string[]): void {\n        for (const dir of dirs) {\n            this.addSingleDirToProcessingQueue(dir);\n        }    \n    }\n\n    addSingleDirToProcessingQueue(dir: string): void {\n        (<any>this.app).fireFileTreeBrowseWorker(dir, (progress: Types.filesimporter.ScanResult) => {\n            if (progress.finished) {\n                if (progress.hasError) {\n                    throw new Error(\"error in worker\" + progress.err);\n                }\n                // this.updateFilesList(dir);\n            }\n            if (progress.files) {\n                this.addListToTreeFromWorker(progress);\n                this.updateFilesTotalSize();    \n            }\n        })\n\n    }\n\n    addDirToTree(path: string): void {\n        this.filesTree.addFileToTree(<TreeItem>{\n            id: path,\n            parentId: path.split(\"/\").slice(0, -1).join(\"/\"),\n            type: \"directory\",\n            checked: true\n        });\n    }\n\n    addListToTree(list: LocalEntry[]): void {\n        for(let element of list) {\n            let entry = <LocalEntry>element;\n            \n            let parentId: string;\n            if (entry.id == \"/\") {\n                parentId = \"root\";\n            }\n            else {\n                parentId = entry.parent ? entry.parent.id : null\n            }\n            this.filesTree.addFileToTree({\n                id: entry.id,\n                parentId: parentId,\n                type: entry.type,\n                checked: true,\n            })\n            if (entry.type == \"file\") {\n                this.filesTree.setFileSize(entry.id, entry.size);\n            }\n        }\n    }\n\n    addListToTreeFromWorker(scanResult: Types.filesimporter.ScanResult): void {\n        this.filesTree.setFileVisited(scanResult.path);\n        for(let element of scanResult.files) {\n            this.filesTree.addFileToTree({\n                id: element.path,\n                parentId: scanResult.path,\n                type: element.fileType,\n                checked: true\n            })\n            if (element.fileType == \"file\") {\n                this.filesTree.setFileSize(element.path, element.size);\n            }\n        }\n    }\n\n    getAllSelectedFiles(): string[] {\n        const list = this.filesTree.getSelectedFiles();\n        return list;\n    }\n////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n}\n\n\n\n/*\nJAK TO DZIALA:\nskanowanie w glab po nowemu:\n- wchodzac do katalogu - pobieramy jego zawartosc i dodajemy do drzewa\n- nastepnie wywolujemy getDirsToVisit() ktora przeglada drzewo w poszukiwaniu nieodwiedzonych katalogow\n- majac liste takich katalogow - wywolujemy addDirsToProcessingQueue(dirs)\n- funkcja addDirsToProcessQueue() dodaje ktalogi z listy po kolei, zeby zawolac na nich browseEx() i w wyniku dostac kolejne pliki i katalogi, ktore dodamy do drzewa...\n\n- powtarzamy getDirsToVisit()..\n\nTODO:\nDONE nie dziala przycisk Close\nDONE wyswietlanie katalogu docelowego\nDONE blokowanie przycisku import podczas wczucania do uploadera\nDONE zamykanie okienka importu po dodaniu do uploadera\nDONE okienko uploadu - najnowsze pliki na gorze\nDONE wyswietlanie pelnych sciezek\nDONE odchudzenie okienka (lzejszy styl)\n- okienko uploadu - mozliwosc czyszczenia listy\n- okienko uploadu - zapamietywanie listy\n- okienko uploadu - otwieranie katalogu docelowego\n- recent uploads z glownego menu (po prostu zmienic nazwe i ikonke)\n*/\n(<any>FilesImporterWindowController.prototype).className = \"com.privmx.plugin.notes2.window.filesimporter.FilesImporterWindowController\";"],"sourceRoot":"../../../src"}