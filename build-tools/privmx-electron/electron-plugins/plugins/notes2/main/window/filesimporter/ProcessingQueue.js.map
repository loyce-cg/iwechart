{"version":3,"sources":["window/filesimporter/ProcessingQueue.ts"],"names":[],"mappings":";;AAMA;IAAA;IA2CA,CAAC;IAAD,sBAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CY,0CAAe;AA4CtB,eAAe,CAAC,SAAU,CAAC,SAAS,GAAG,+DAA+D,CAAC","file":"ProcessingQueue.js","sourcesContent":["export interface QueueTask {\n//     action: Promise<void>;\n//     id: string;\n//     aborted: boolean;\n}\n\nexport class ProcessingQueue {\n//     tasksList: QueueTask[] = [];\n\n//     processPromise: Promise<void>;\n\n//     add(id: string, action: Promise<void>): void {\n//         const task: QueueTask = {\n//             action: action,\n//             id: id,\n//             aborted: false\n//         };\n\n//         if (! this.processPromise) {\n//             this.processPromise = this.createQueueObject(action);\n//         }\n//         else {\n//             this.processPromise = this.processPromise.then(() => this.createQueueObject(action));\n//         }\n//     }\n\n//     abort(id: string): void {\n//         for (let task of this.tasksList) {\n//             if (task.id == id) {\n//                 task.aborted = true;\n//             }\n//         }\n//     }\n\n//     getProcess(): Promise<void> {\n//         return this.processPromise;\n//     }\n\n//     async createQueueObject(id: string, action: Promise<void>): Promise<void> {\n//         console.log(\"createQueueObject\")\n//         return new Promise<void>((resolve, reject) => {\n//             if (this.isAborted) {\n//                 return reject();\n//             }\n//             else {\n//                 return resolve(action);\n//             }\n//         })\n//     }\n}\n(<any>ProcessingQueue.prototype).className = \"com.privmx.plugin.notes2.window.filesimporter.ProcessingQueue\";"],"sourceRoot":"../../../src"}