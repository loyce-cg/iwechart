{"version":3,"sources":["window/filesimporter/pickerpanel/FilesPickerPanelController.ts"],"names":[],"mappings":"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","file":"FilesPickerPanelController.js","sourcesContent":["import { BaseItemsPanelController } from \"./BaseItemsPanelController\";\nimport { utils, window, component, mail } from \"pmc-mail\";\nimport { FileEntry, FileEntryModel, AddItemEvent } from \"./Types\";\nimport { LocalEntry } from \"../../../main/LocalFS\";\nimport { FileEntryBase } from \"../../../main/Notes2Utils\";\n\nclass EntryFromLocalFileEntry implements FileEntry {\n    id: string;\n    path: string;\n    fileType: string;\n    icon: string;\n    isParentDir: boolean;\n    modificationDate: number;\n    name: string;\n    size: number;\n    basePath: string;\n    hidden: boolean;\n\n    constructor(f: FileEntryBase, basePath: string, iconsResolver: (mime: string) => string) {\n        let localFile = <LocalEntry>f;\n        this.id = localFile.id;\n        this.path = localFile.path;\n        this.fileType = localFile.type;\n        this.icon = localFile.type == \"directory\" ? \"fa-folder\" : iconsResolver(localFile.mime);\n        this.modificationDate = localFile.mtime.getTime(),\n        this.name = localFile.name;\n        this.size = localFile.size;\n        this.basePath = basePath;\n        this.hidden = localFile.hidden;\n    }\n\n    getFileType(): string {\n        return this.fileType;\n    }\n    getId(): string {\n        return this.id;\n    }\n    getPath(): string {\n        return this.path;\n    }\n    getIcon(): string {\n        return this.icon;\n    }\n    getIsParentDir(): boolean {\n        return this.isParentDir;\n    }\n    getModificationDate(): number {\n        return this.modificationDate;\n    }\n    getName(): string {\n        return this.name;\n    }\n    getSize(): number {\n        return this.size;\n    }\n    getBasePath(): string {\n        return this.basePath;\n    }\n    isHidden(): boolean {\n        return this.hidden;\n    }\n\n}\n\nexport class FilesPickerPanelController extends BaseItemsPanelController<FileEntry, FileEntryModel> {\n    entriesCollection: utils.collection.TransformCollection<FileEntry, FileEntryBase>;\n    currentDir: string;\n    showHidden: boolean = false;\n\n    constructor (\n        parent: window.base.BaseWindowController, \n        public personsComponent: component.persons.PersonsController, \n        public sourceCollection: utils.collection.BaseCollection<FileEntryBase>,\n        public onUpdateCollection: (path: string, parentPath: string) => void,\n        public iconsResolver: (mimeType: string) => string\n    ) {        \n        super(parent, personsComponent);\n        this.ipcMode = true;\n        this.entriesCollection = this.addComponent(\"transformCollection-\" + this.constructor.name, new utils.collection.TransformCollection<FileEntry, FileEntryBase>(\n            this.sourceCollection, \n            (entry) => {\n                return this.convertLocalEntryToFileEntry(<LocalEntry>entry, this.iconsResolver);\n            }\n        ));\n        super.addBaseCollection(this.entriesCollection);\n    }\n\n    protected filterEntry(entry: FileEntry): boolean {\n        if (entry.isHidden() && !this.showHidden) {\n            return false;\n        }\n        return true;\n    }    \n    \n    protected convertEntry(entry: FileEntry): FileEntryModel {\n        return {\n            fileType: entry.getFileType(),\n            id: entry.getId(),\n            path: entry.getPath(),\n            icon: entry.getIcon(),\n            isParentDir: entry.getIsParentDir(),\n            modificationDate: entry.getModificationDate(),\n            name: entry.getName(),\n            size: entry.getSize(),\n            basePath: entry.getBasePath(),\n            hidden: entry.isHidden()\n        }\n    }\n    \n    protected sortEntry(a: FileEntryModel, b: FileEntryModel): number {\n        if (a.fileType != b.fileType) {\n            return a.fileType == \"directory\" ? -1 : 1;\n        }\n        return a.path.localeCompare(b.path);\n    }\n\n    protected convertLocalEntryToFileEntry(entry: FileEntryBase, iconsResolver: (mime: string) => string): FileEntry {\n        return new EntryFromLocalFileEntry(entry, this.getCurrentDir(), iconsResolver);\n    }\n\n    onViewDirectoryClick(id: string, parentId: string): void {\n        if (id == \"parent\") {\n            let parentItem = this.itemsTransformCollection.find(x => x.id == \"parent\");\n            this.setCurrentDir(parentItem.path);\n            this.onUpdateCollection(parentItem.path, parentId);\n        }\n        else {\n            this.setCurrentDir(id);\n            this.onUpdateCollection(id, parentId);    \n        }\n    }\n\n    onViewAddItemClick(id: string): void {\n        let item = this.itemsMergedCollection.find(x=>x.getId() == id);\n        this.dispatchEvent<AddItemEvent>({\n            type: \"add-item\",\n            id: item.getId(),\n            basePath: item.getBasePath()\n        })\n    }\n\n    protected onActiveCollectionChange(event: any): void {\n       \n    }\n\n    setCurrentDir(dir: string): void {\n        this.currentDir = dir;\n    }\n\n    getCurrentDir(): string {\n        return this.currentDir;\n    }\n\n    setShowHidden(showHidden: boolean): void {\n        this.showHidden = showHidden;\n        this.itemsFilteredCollection.refresh();\n    }\n\n    getItem(id: string, basePath: string): FileEntry {\n        return this.itemsMergedCollection.find(x => x.getId() == id && x.getBasePath() == basePath);\n    }\n\n}\n(<any>FilesPickerPanelController.prototype).className = \"com.privmx.plugin.notes2.window.filesimporter.pickerpanel.FilesPickerPanelController\";"],"sourceRoot":"../../../../src"}