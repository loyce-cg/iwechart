{"version":3,"sources":["window/history/HistoryWindowController.ts"],"names":[],"mappings":"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","file":"HistoryWindowController.js","sourcesContent":["import {app, component, mail, utils, window, Q, Types, privfs} from \"pmc-mail\";\nimport {Notes2Plugin, ClipboardFileEntry} from \"../../main/Notes2Plugin\";\nimport { i18n } from \"./i18n\";\nimport Inject = utils.decorators.Inject;\nimport Dependencies = utils.decorators.Dependencies;\n\nexport interface Model {\n    icon: string;\n    name: string;\n    path: string;\n}\n\nexport interface DescriptorVersion {\n    signature: string;\n    modifier: string;\n    serverDate: number;\n    createDate: number;\n    modifiedDate: number;\n    path: string;\n    fileName: string;\n    icon: string;\n    size: number;\n}\n\n@Dependencies([\"persons\", \"notification\", \"extlist\"])\nexport class HistoryWindowController extends window.base.BaseWindowController {\n    \n    static textsPrefix: string = \"plugin.notes2.window.history.\";\n    \n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    // @Inject identity: privfs.identity.Identity;\n    identity: privfs.identity.Identity;\n\n    personsComponent: component.persons.PersonsController;\n    notes2Plugin: Notes2Plugin;\n    entry: {\n        name: string;\n        path: string;\n        mimeType: string;\n        icon: string;\n        fileSystem: privfs.fs.file.FileSystem,\n        ref: privfs.fs.descriptor.ref.DescriptorRefRead;\n    };\n    versionsCollection: utils.collection.MutableCollection<DescriptorVersion>;\n    activeCollection: utils.collection.WithActiveCollection<DescriptorVersion>;\n    versions: component.extlist.ExtListController<DescriptorVersion>;\n    notifications: component.notification.NotificationController;\n    descriptor: privfs.types.descriptor.DescriptorWithVersionResult;\n    \n    constructor(parentWindow: Types.app.WindowParent, public session: mail.session.Session, fileSystem: privfs.fs.file.FileSystem, path: string) {\n        super(parentWindow, __filename, __dirname);\n        \n        this.ipcMode = true;\n        \n        this.identity = session.sectionManager.identity;\n        this.setPluginViewAssets(\"notes2\");\n        this.notes2Plugin = this.app.getComponent(\"notes2-plugin\");\n        this.entry = {\n            name: mail.filetree.Path.parsePath(path).name.original,\n            path: path,\n            mimeType: \"\",\n            icon: \"\",\n            fileSystem: fileSystem,\n            ref: null\n        }\n        this.openWindowOptions = {\n            toolbar: false,\n            maximized: false,\n            show: false,\n            position: \"center\",\n            minWidth: 440,\n            width: 440,\n            height: 400,\n            resizable: true,\n            icon: \"icon fa fa-book\",\n            title: this.i18n(\"plugin.notes2.window.history.title\") + \" \" + this.entry.name\n        };\n    }\n    \n    init() {\n        return Q().then(() => {\n            return this.entry.fileSystem.openFile(this.entry.path, privfs.fs.file.Mode.READ_ONLY).then(handle => {\n                this.entry.ref = <privfs.fs.descriptor.ref.DescriptorRefRead>handle.ref;\n                return handle.getMeta().then(meta => {\n                    this.entry.mimeType = mail.filetree.MimeType.resolve2(this.entry.name, meta.mimeType)\n                    this.entry.icon = this.app.shellRegistry.resolveIcon(this.entry.mimeType);\n                    return this.entry.fileSystem.fsd.manager.getDescriptorVersions(this.entry.ref);\n                });\n            });\n        })\n        .then(descriptor => {\n            this.descriptor = descriptor;\n            return Q.all(this.descriptor.versions.map(x => x.getExtra(this.entry.ref.readKey)));\n        })\n        .then(extraList => {\n            let data = this.descriptor.versions.map((x, i) => {\n                let res: DescriptorVersion = {\n                    signature: x.raw.signature,\n                    serverDate: x.raw.serverDate.getTime(),\n                    createDate: extraList[i].meta.createDate,\n                    modifiedDate: extraList[i].meta.modifiedDate,\n                    modifier: x.raw.modifier && x.raw.modifier != \"guest\" ? x.raw.modifier + \"#\" + this.identity.host : \"\",\n                    path: this.entry.path,\n                    fileName: this.entry.name,\n                    icon: this.entry.icon,\n                    size: extraList[i].meta.size\n                };\n                return res;\n            });\n            if (data.length > 1 && data[0].size == 0) {\n                data = data.slice(1);\n            }\n            data = data.reverse();\n            this.versionsCollection = this.addComponent(\"versionsCollection\", new utils.collection.MutableCollection(data));\n            this.activeCollection = this.addComponent(\"activeCollection\", new utils.collection.WithActiveCollection(this.versionsCollection));\n            this.activeCollection.setActive(this.activeCollection.get(0));\n            this.versions = this.addComponent(\"versions\", this.componentFactory.createComponent(\"extlist\", [this, this.activeCollection]));\n            this.versions.ipcMode = true;\n            this.personsComponent = this.addComponent(\"personsComponent\", this.componentFactory.createComponent(\"persons\", [this]));\n            this.notifications = this.addComponent(\"notifications\", this.componentFactory.createComponent(\"notification\", [this]));\n        });\n    }\n    \n    getModel(): Model {\n        return {\n            icon: this.entry.icon,\n            name: this.entry.name,\n            path: this.entry.path\n        };\n    }\n    \n    onViewSetActive(signature: string) {\n        let active = this.activeCollection.find(x => x.signature == signature);\n        if (active != null) {\n            this.activeCollection.setActive(active);\n        }\n    }\n    \n    onViewOpenSelectedVersion() {\n        let active = this.activeCollection.getActive();\n        if (active == null) {\n            return;\n        }\n        let version = utils.Lang.find(this.descriptor.versions, x => x.raw.signature == active.signature);\n        if (version == null) {\n            return;\n        }\n        app.common.shelltypes.DescriptorVersionElement.create(this.entry.name, this.entry.mimeType, this.entry.ref.readKey, version, true).then(element => {\n            this.app.shellRegistry.shellOpen({\n                element: element,\n                action: app.common.shelltypes.ShellOpenAction.PREVIEW,\n                session: this.session\n            });\n        });\n    }\n    \n    onViewCopySelectedVersion() {\n        let active = this.activeCollection.getActive();\n        if (active == null) {\n            return;\n        }\n        let version = utils.Lang.find(this.descriptor.versions, x => x.raw.signature == active.signature);\n        if (version == null) {\n            return;\n        }\n        app.common.shelltypes.DescriptorVersionElement.create(this.entry.name, this.entry.mimeType, this.entry.ref.readKey, version, true).then(element => {\n            let clipboardEntry: ClipboardFileEntry = {\n                element: element,\n                cut: false,\n                hostHash: this.session.hostHash,\n            };\n            this.app.clipboard.set({file: clipboardEntry});\n            this.notifications.showNotification(this.i18n(\"plugin.notes2.window.history.notifier.copied-to-clipboard\"));\n        });\n    }\n    \n    onViewSelectUp() {\n        if (this.activeCollection.active) {\n            let currentIndex = this.activeCollection.active.index;\n            if (currentIndex > 0) {\n                this.activeCollection.setActive(this.activeCollection.get(currentIndex - 1));\n            }\n        }\n        else {\n            this.activeCollection.setActive(this.activeCollection.get(0));\n        }\n    }\n    \n    onViewSelectDown() {\n        if (this.activeCollection.active) {\n            let currentIndex = this.activeCollection.active.index;\n            if (currentIndex < this.activeCollection.size() - 1) {\n                this.activeCollection.setActive(this.activeCollection.get(currentIndex + 1));\n            }\n        }\n        else {\n            this.activeCollection.setActive(this.activeCollection.get(0));\n        }\n    }\n    \n    onViewClose() {\n        this.close();\n    }\n}\n\n(<any>HistoryWindowController.prototype).className = \"com.privmx.plugin.notes2.window.history.HistoryWindowController\";"],"sourceRoot":"../../../src"}