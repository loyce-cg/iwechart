{"version":3,"sources":["build/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import * as Mail from \"pmc-mail\";\nimport { MainWindowController } from \"../window/main/MainWindowController\";\nimport { TasksPlugin } from \"../main/TasksPlugin\";\nimport { IconPickerController } from \"../component/iconPicker/IconPickerController\";\nimport { TaskPanelController } from \"../component/taskPanel/TaskPanelController\";\nimport { TaskGroupsPanelController } from \"../component/taskGroupsPanel/TaskGroupsPanelController\";\nimport { ViewContext } from \"../main/Types\";\nimport { TaskWindowController } from \"../window/task/TaskWindowController\";\nimport { TaskGroupFormWindowController } from \"../window/taskGroupForm/TaskGroupFormWindowController\";\nimport { TaskGroupSelectorWindowController } from \"../window/taskGroupSelector/TaskGroupSelectorWindowController\";\nimport { TasksWindowController } from \"../window/tasks/TasksWindowController\";\nimport { DetachTaskGroupWindowController } from \"../window/detachTaskGroup/DetachTaskGroupWindowController\";\nimport { IconPickerWindowController } from \"../window/iconPicker/IconPickerWindowController\";\nlet Logger = Mail.Logger.get(\"privfs-tasks-plugin.main\");\n\nexport class Plugin {\n    \n    register(mail: typeof Mail, app: Mail.app.common.CommonApplication) {\n        let tasksPlugin = app.addComponent(\"tasks-plugin\", new TasksPlugin(app));\n        \n        // i18n: main\n        tasksPlugin.registerTexts(app.localeService);\n        \n        // i18n: components\n        IconPickerController.registerTexts(app.localeService);\n        TaskGroupsPanelController.registerTexts(app.localeService);\n        TaskPanelController.registerTexts(app.localeService);\n        \n        // i18n: windows\n        DetachTaskGroupWindowController.registerTexts(app.localeService);\n        IconPickerWindowController.registerTexts(app.localeService);\n        MainWindowController.registerTexts(app.localeService);\n        TaskWindowController.registerTexts(app.localeService);\n        TaskGroupFormWindowController.registerTexts(app.localeService);\n        TaskGroupSelectorWindowController.registerTexts(app.localeService);\n        TasksWindowController.registerTexts(app.localeService);\n        \n        app.ioc.registerComponent(\"iconpicker\", IconPickerController);\n        app.ioc.registerComponent(\"taskpanel\", TaskPanelController);\n        app.ioc.registerComponent(\"taskGroupsPanel\", TaskGroupsPanelController);\n        \n        app.addEventListener<Mail.Types.event.AfterLoginEvent>(\"afterlogin\", () => {\n            app.addCountModel(tasksPlugin.tasksUnreadCountModel);\n            let cnt = <Mail.window.container.ContainerWindowController>app.windows.container;\n            let entry = cnt.registerAppWindow({\n                id: \"tasks\",\n                label: app.localeService.i18n(\"plugin.tasks.app.navbar.label\"),\n                controllerClass: MainWindowController,\n                icon: \"privmx-icon-tasks\",\n                historyPath: \"/tasks\",\n                count: tasksPlugin.tasksUnreadCountModel,\n                countFullyLoaded: tasksPlugin.tasksUnreadCountFullyLoadedModel,\n            });\n            cnt.initApp = entry.id;\n            app.mailClientApi.loadUserPreferences()\n        }, \"tasks\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.InstanceRegisteredEvent<Mail.window.sectionsummary.SectionSummaryWindowController>>(\"instanceregistered\", event => {\n            if (event.instance && event.instance.className == \"com.privmx.core.window.sectionsummary.SectionSummaryWindowController\") {\n                event.instance.addViewStyle({path: \"window/component/taskGroupsPanel/template/main.css\", plugin: \"tasks\"});\n                event.instance.addViewScript({path: \"build/view.js\", plugin: \"tasks\"});\n                app.ioc.create(TaskGroupsPanelController, [event.instance, event.instance.personsComponent]).then(ele => {\n                    ele.context = event.instance.loadSingleModule ? ViewContext.TasksWindow : ViewContext.SummaryWindow;\n                    event.instance.registerModule(\"tasks\", ele);\n                    ele.afterViewLoaded.promise.then(() => {\n                        ele.activate();\n                    });\n                    let origBeforeClose = event.instance.beforeClose;\n                    event.instance.beforeClose = force => {\n                        origBeforeClose(force);\n                        Mail.Q().then(() => {\n                            ele.beforeClose();\n                        });\n                    };\n                });\n            }\n        }, \"tasks\", \"ethernal\");\n        \n        \n        app.addEventListener<Mail.Types.event.SinkIndexManagerReady>(\"sinkindexmanagerready\", () => {\n            tasksPlugin.checkInit().fail(e => {\n                Logger.error(\"error init tasks plugin\", e);\n            });\n        }, \"tasks\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.SinkPollingResultEvent>(\"sinkpollingresult\", event => {\n            tasksPlugin.onPollingResult(event.entries);\n        }, \"tasks\", \"ethernal\");\n        \n        app.addEventListener<Mail.Types.event.AfterLogoutPlugin>(\"afterlogout\", () => {\n            tasksPlugin.reset();\n        }, \"tasks\", \"ethernal\");\n        \n        if (app.isElectronApp()) {\n            let newTaskMenuItem: Mail.app.electronTray.TrayMenuItem = {\n                id: \"newTask\",\n                menuId: \"loggedIn\",\n                order: 30,\n                onLanguageChange: () => app.localeService.i18n(\"plugin.tasks.app.tray.newTask\"),\n                shortcutId: \"global.newTask\",\n                options: {\n                    label: app.localeService.i18n(\"plugin.tasks.app.tray.newTask\"),\n                    type: \"normal\",\n                    click: () => {\n                        tasksPlugin.openNewTaskWindow(app.sessionManager.getLocalSession(), null);\n                    }\n                }\n            };\n            (<any>app).trayMenu.registerMenuItem(newTaskMenuItem);\n        }\n        \n    }\n    \n}\n\n(<any>Plugin.prototype).className = \"com.privmx.plugin.tasks.build.Plugin\";"],"sourceRoot":"../../src"}