{"version":3,"sources":["window/main/MainWindowController.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qCAAgD;AAChD,wEAAuE;AAEvE,sCAAoC;AAEpC;IAA0C,wCAAmC;IAWzE,8BAAmB,YAAwD;QAA3E,YACI,kBAAM,YAAY,EAAE,UAAU,EAAE,SAAS,CAAC,SAS7C;QAVkB,kBAAY,GAAZ,YAAY,CAA4C;QAEvE,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAClC,KAAI,CAAC,iBAAiB,CAAC,UAAU,GAAG,IAAI,CAAC;QACzC,KAAI,CAAC,iBAAiB,CAAC,QAAQ,GAAG,YAAY,CAAC;QAC/C,KAAI,CAAC,iBAAiB,CAAC,KAAK,GAAG,KAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAC3E,KAAI,CAAC,iBAAiB,CAAC,IAAI,GAAG,kBAAkB,CAAC;QAEjD,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;;IAC7D,CAAC;IAjBM,kCAAa,GAApB,UAAqB,aAAiC;QAClD,aAAa,CAAC,aAAa,CAAC,YAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACxD,CAAC;IAiBD,mCAAI,GAAJ;QAAA,iBAkBC;QAjBG,OAAO,YAAC,EAAE,CAAC,IAAI,CAAC;YACZ,OAAY,KAAI,CAAC,GAAG,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;QACxD,CAAC,CAAC;aACD,IAAI,CAAC;YACF,OAAY,KAAI,CAAC,GAAG,CAAC,aAAa,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;QACpE,CAAC,CAAC;aACD,IAAI,CAAC;YACF,OAAY,KAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,aAAa,EAA9B,CAA8B,CAAC,CAAC;QACxF,CAAC,CAAC;aACD,IAAI,CAAC;YACF,OAAO,KAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,6CAAqB,EAAE,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC;aACD,IAAI,CAAC,UAAA,GAAG;YACL,GAAG,CAAC,MAAM,GAAG,KAAI,CAAC;YAClB,KAAI,CAAC,WAAW,GAAG,GAAG,CAAC;QAE3B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,yCAAU,GAAV;QACI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,IAAI,EAAE;YAC/B,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;SAC7C;QACD,IAAI,UAAU,GAAmC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QACvE,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;IACtE,CAAC;IAED,gDAAiB,GAAjB,UAAkB,SAAkB,EAAE,KAAa;QAAnD,iBAIC;QAHG,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC;YAClB,KAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACP,CAAC;IArDM,gCAAW,GAAW,2BAA2B,CAAC;IAuD7D,2BAAC;CAzDD,AAyDC,CAzDyC,iBAAM,CAAC,IAAI,CAAC,uBAAuB,GAyD5E;AAzDY,oDAAoB;AA2D3B,oBAAoB,CAAC,SAAU,CAAC,SAAS,GAAG,0DAA0D,CAAC","file":"MainWindowController.js","sourcesContent":["import { app, window, Q, mail } from \"pmc-mail\";\nimport { TasksWindowController } from \"../tasks/TasksWindowController\";\nimport { TasksPlugin } from \"../../main/TasksPlugin\";\nimport { i18n } from \"./i18n/index\";\n\nexport class MainWindowController extends window.base.BaseAppWindowController {\n    \n    static textsPrefix: string = \"plugin.tasks.window.main.\";\n    \n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    tasksWindow: TasksWindowController;\n    tasksPlugin: TasksPlugin;\n    \n    constructor(public parentWindow: window.container.ContainerWindowController) {\n        super(parentWindow, __filename, __dirname);\n        this.ipcMode = true;\n        this.setPluginViewAssets(\"tasks\");\n        this.openWindowOptions.fullscreen = true;\n        this.openWindowOptions.cssClass = \"app-window\";\n        this.openWindowOptions.title = this.i18n(\"plugin.tasks.window.main.title\");\n        this.openWindowOptions.icon = \"icon fa fa-tasks\";\n        \n        this.tasksPlugin = this.app.getComponent(\"tasks-plugin\");\n    }\n    \n    init(): any {\n        return Q().then(() => {\n            return <any>this.app.mailClientApi.checkLoginCore();\n        })\n        .then(() => {\n            return <any>this.app.mailClientApi.privmxRegistry.getSystemFs();\n        })\n        .then(() => {\n            return <any>this.tasksPlugin.checkInit().then(() => this.tasksPlugin.projectsReady);\n        })\n        .then(() => {\n            return this.app.ioc.create(TasksWindowController, [this, true]);\n        })\n        .then(win => {\n            win.parent = this;\n            this.tasksWindow = win;\n            \n        });\n    }\n    \n    onViewLoad(): void {\n        if (this.tasksWindow.nwin == null) {\n            this.tasksWindow.openDocked(this.nwin, 1);\n        }\n        let dockedNwin = <app.common.window.DockedWindow>this.tasksWindow.nwin;\n        this.callViewMethod(\"openIframe\", dockedNwin.id, dockedNwin.load);\n    }\n    \n    applyHistoryState(processed: boolean, state: string) {\n        this.checkInit().then(() => {\n            this.tasksWindow.applyHistoryState(processed, state);\n        });\n    }\n    \n}\n\n(<any>MainWindowController.prototype).className = \"com.privmx.plugin.tasks.window.main.MainWindowController\";"],"sourceRoot":"../../../src"}