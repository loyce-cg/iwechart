{"version":3,"sources":["window/tasks/TasksWindowController.ts"],"names":[],"mappings":"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","file":"TasksWindowController.js","sourcesContent":["import { window, component, Types, Q, utils, mail, privfs, app } from \"pmc-mail\";\nimport { TasksPlugin, UpdateSectionBadgeEvent, TasksComponentFactory, TaskPreviewRequestEvent, TaskPanelUpdateRequestEvent, TaskPanelChangeVisibilityRequestEvent, TasksSearchUpdateEvent, BadgesUpdateRequestEvent, UpdatePinnedTaskGroupsEvent, HorizontalTaskWindowLayoutChangeRequestEvent, MarkedTasksAsReadEvent, UpdateTasksSidebarSpinnersEvent } from \"../../main/TasksPlugin\";\nimport { ProjectId, Watchable, Action, EventHandler, PersonId, CustomTasksElements, PeopleMap } from \"../../main/Types\";\nimport { TaskPanelController } from \"../../component/taskPanel/TaskPanelController\";\nimport ContainerWindowController = window.container.ContainerWindowController;\nimport { TaskGroupsPanelController } from \"../../component/taskGroupsPanel/TaskGroupsPanelController\";\nimport Inject = utils.decorators.Inject;\nimport Dependencies = utils.decorators.Dependencies;\nimport { TasksCountManager } from \"./TasksCountManager\";\nimport { i18n } from \"./i18n/index\";\n\nexport interface Model {\n    docked: boolean;\n    // projectsStr: string;\n    activeProjectId: ProjectId;\n    membersStr: string;\n    myId: PersonId;\n    privateSectionId: string;\n    horizontalTaskLayout: boolean;\n}\n\nexport interface ProjectsModel {\n}\n\n// export interface ProjectModel {\n//     id: ProjectId;\n//     name: string;\n//     active: boolean;\n//     myTasks: boolean;\n//     public: boolean;\n// }\n\nexport interface TaskGroupsModel {\n}\n\nexport type TaskGroupProgressModel = Array<[string, number, number]>;\n\n\n// export interface SectionModel {\n//     id: string;\n//     name: string;\n//     scope: string;\n//     unread: number;\n//     userAvatar: null|string;\n//     overrideIsActive: null|boolean;\n//     breadcrumb: string;\n// }\n\n@Dependencies([\"splitter\", \"extlist\", \"persons\", \"notification\", \"taskGroupsPanel\", \"sidebar\"])\nexport class TasksWindowController extends window.base.BaseWindowController {\n    \n    static textsPrefix: string = \"plugin.tasks.window.tasks.\";\n    \n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    @Inject identity: privfs.identity.Identity;\n    @Inject router: app.common.Router;\n    docked: boolean;\n    activeProjectId: ProjectId;\n    activeProjectHostHash: string;\n    // sinksInfo: Array<SinkInfo>;\n    verticalSplitter: component.splitter.SplitterController;\n    verticalSplitter2: component.splitter.SplitterController;\n    horizontalSplitter: component.splitter.SplitterController;\n    sidebar: component.sidebar.SidebarController;\n    \n    tasksPlugin: TasksPlugin;\n    subSettings: { [key: string]: utils.Settings } = {};\n    \n    dataChangedListener: EventHandler;\n    remoteDataChangedListeners:  { [hostHash: string]: EventHandler } = {};\n    \n    taskPanel: TaskPanelController;\n    \n    personsComponent: component.persons.PersonsController;\n    notifications: component.notification.NotificationController;\n    \n    privateSection: mail.section.SectionService;\n    tasksCountManager: TasksCountManager;\n    remoteTasksCountManagers: { [hostHash: string]: TasksCountManager } = {};\n    \n    afterViewLoaded: Q.Deferred<void> = Q.defer();\n    componentFactory: TasksComponentFactory;\n    \n    taskGroupsPanelPromises: { [key: string]: Q.Promise<TaskGroupsPanelController> } = {};\n    activePanel: TaskGroupsPanelController = null;\n    \n    remoteServers: { [hostHash: string]: component.remotehostlist.HostEntry } = {};\n\n    initWithProject: string = null;\n    sectionTooltip: component.sectiontooltip.SectionTooltipController;\n    dirty: boolean = false;\n    \n    disabledSection: component.disabledsection.DisabledSectionController;\n\n    constructor(parentWindow: Types.app.WindowParent, docked: boolean) {\n        super(parentWindow, __filename, __dirname, {\n            isPublic: false,\n            subs: {\n                \"tasks-splitter-vertical\": { defaultValue: 340 },\n                \"tasks-splitter-vertical2-proportional\": { defaultValue: JSON.stringify({handlePos:600,totalSize:1600}) },\n                \"tasks-splitter-horizontal-proportional\": { defaultValue: JSON.stringify({handlePos:300,totalSize:1000}) },\n                \"left-panel-sections-splitter-proportional\": { defaultValue: JSON.stringify({handlePos:250,totalSize:1000}) },\n                \"active-project-id\": { defaultValue: \"\" },\n            }\n        });\n        this.ipcMode = true;\n        let localSession = this.app.sessionManager.getLocalSession();\n\n        this.docked = docked;\n        this.setPluginViewAssets(\"tasks\");\n        this.openWindowOptions.position = \"center\";\n        this.openWindowOptions.width = 900;\n        this.openWindowOptions.height = 500;\n        this.openWindowOptions.cssClass = \"app-window\";\n        this.openWindowOptions.title = this.i18n(\"plugin.tasks.window.tasks.title\");\n        this.openWindowOptions.icon = \"icon fa fa-tasks\";\n        this.tasksPlugin = this.app.getComponent(\"tasks-plugin\");\n        this.taskPanel = this.addComponent(\"taskPanel\", this.componentFactory.createComponent(\"taskpanel\", [this, localSession, this.personsComponent, {\n            close: () => this.close(),\n            alert: (msg: string) => this.alert(msg),\n            confirm: (msg: string) => this.confirm(msg),\n            confirmEx: this.confirmEx.bind(this),\n            openWindowParent: this,\n            openChildWindow: this.openChildWindow.bind(this),\n            updateDirty: this.updateDirty.bind(this),\n        }, true, false, []]));\n        this.taskPanel.onDirtyChanged = () => {\n            let dirty = this.taskPanel.editable && this.taskPanel.dirty;\n            if (this.activePanel) {\n                this.activePanel.setPreviewDirty(dirty);\n            }\n        };\n        this.dataChangedListener = this.onDataChanged.bind(this);\n        this.tasksPlugin.watch(localSession, \"*\", \"*\", \"*\", this.dataChangedListener);\n        this.tasksPlugin.activeTasksWindowController = this;\n        this.personsComponent = this.addComponent(\"personsComponent\", this.componentFactory.createComponent(\"persons\", [this]));\n        this.notifications = this.addComponent(\"notifications\", this.componentFactory.createComponent(\"notification\", [this]));\n        this.sectionTooltip = this.addComponent(\"sectiontooltip\", this.componentFactory.createComponent(\"sectiontooltip\", [this]));\n    }\n    \n    onViewLoad(): void {\n        this.afterViewLoaded.resolve();\n        let data = this.app.searchModel.get();\n        let isSearchOn = data.visible && data.value.length > 1;\n        this.callViewMethod(\"onSearchChanged\", isSearchOn, false);\n        \n        this.initSpellChecker();\n    }\n    \n    beforeClose(): void {\n        this.tasksPlugin.unWatch(this.app.sessionManager.getLocalSession(), \"*\", \"*\", \"*\", this.dataChangedListener);\n        for (let hostHash in this.remoteDataChangedListeners) {\n            this.tasksPlugin.unWatch(this.app.sessionManager.sessions[hostHash], \"*\", \"*\", \"*\", this.remoteDataChangedListeners[hostHash]);\n        }\n        this.taskPanel.beforeClose();\n    }\n    \n    init() {\n        let localSession = this.app.sessionManager.getLocalSession();\n\n        this.privateSection = localSession.sectionManager.getMyPrivateSection();\n        this.tasksCountManager = new TasksCountManager(localSession, this.privateSection, this.tasksPlugin, null);\n        this.bindEvent<UpdateSectionBadgeEvent>(this.app, \"update-section-badge\", this.onUpdateSectionBadge.bind(this));\n        this.bindEvent<UpdateTasksSidebarSpinnersEvent>(this.app, \"update-tasks-sidebar-spinners\", e => {\n            this.sidebar.updateSidebarSpinners({\n                conv2SectionId: e.conv2SectionId,\n                customElementId: e.customElementId,\n                sectionId: e.sectionId,\n                hosts: e.hostHash ? [this.app.sessionManager.getSessionByHostHash(e.hostHash).host] : Object.values(this.app.sessionManager.sessions).map(x => x.host),\n            });\n        });\n\n        this.verticalSplitter = this.addComponent(\"verticalSplitter\", this.componentFactory.createComponent(\"splitter\", [this, this.settings.create(\"tasks-splitter-vertical\")]));\n        this.verticalSplitter2 = this.addComponent(\"verticalSplitter2\", this.componentFactory.createComponent(\"splitter\", [this, this.settings.create(\"tasks-splitter-vertical2-proportional\")]));\n        this.horizontalSplitter = this.addComponent(\"horizontalSplitter\", this.componentFactory.createComponent(\"splitter\", [this, this.settings.create(\"tasks-splitter-horizontal-proportional\")]));\n        this.verticalSplitter.ipcMode = true;\n        this.verticalSplitter2.ipcMode = true;\n        this.horizontalSplitter.ipcMode = true;\n        \n        this.disabledSection = this.addComponent(\"disabled-section\", this.componentFactory.createComponent(\"disabledsection\", [this, Types.section.NotificationModule.TASKS]));\n        \n        \n        this.subSettings[\"active-project-id\"] = this.settings.create(\"active-project-id\");\n        \n        this.initWithProject = this.initWithProject || this.tasksPlugin.getPrivateSectionId();\n        this.activeProjectId = this.initWithProject ? this.initWithProject : this.subSettings[\"active-project-id\"].get();\n        this.activeProjectHostHash = localSession.hostHash;\n        if (!this.activeProjectId) {\n            this.activeProjectId = TasksWindowController.getProjectId(this.tasksPlugin.getPrivateSectionId() ? this.tasksPlugin.getPrivateSectionId() : CustomTasksElements.ALL_TASKS_ID);\n        }\n        this.tasksPlugin.projectsReady.then(() => {\n            this.selectProject(localSession, this.activeProjectId);\n        });\n        \n        let promProjectCreator = Q();\n        let prevUpdate: Date = null;\n        this.registerChangeEvent(this.tasksPlugin.tasksSectionsCollection[localSession.hostHash].changeEvent, event => {\n            // this.sinksInfo = this.getSinksInfo(localSession);\n            // this.callViewMethod(\"updateSinksInfo\", JSON.stringify(this.sinksInfo));\n            \n            if (event.type == \"add\") {\n                promProjectCreator = promProjectCreator.then(() => <any>this.tasksPlugin.ensureProjectExists(event.element.getId(), event.element.getName(), localSession)).then(() => {\n                    return <any>Q.resolve();\n                })\n                .fail(e => {\n                    this.getLogger().error(\"Error during adding project\", e);\n                })\n            }\n            else if (event.type == \"update\") {\n                let now = new Date();\n                if (prevUpdate != null) {\n                    if (<any>now - <any>prevUpdate < 5) {\n                        prevUpdate = now;\n                        return;\n                    }\n                }\n                prevUpdate = now;\n                setTimeout(() => {\n                    promProjectCreator = promProjectCreator.then(() => {\n                        // this.callViewMethod(\"renderProjectsPanel\");\n                        return <any>Q.resolve();\n                    });\n                }, 100);\n            }\n        });\n        for (let element of this.tasksPlugin.tasksSectionsCollection[localSession.hostHash].list) {\n            let id = element.getId();\n            let name = element.getName();\n            if (id == this.tasksPlugin.getPrivateSectionId()) {\n                name = this.i18n(\"plugin.tasks.window.tasks.sidebar.privateTasks\");\n            }\n            promProjectCreator = promProjectCreator.then(() => <any>this.tasksPlugin.ensureProjectExists(id, name, localSession));\n        }\n        // promProjectCreator = promProjectCreator.then(() => {\n        //     // this.sinksInfo = this.getSinksInfo(localSession);\n        //     // this.callViewMethod(\"updateSinksInfo\", JSON.stringify(this.sinksInfo));\n        //     // this.callViewMethod(\"renderProjectsPanel\");\n        //     return <any>Q.resolve();\n        // });\n        \n        this.bindEvent(this.app, \"focusChanged\", (event) => {\n            let windowId = (<any>event).windowId;\n            this.tasksPlugin.activeWindowFocused = windowId == \"main-window\" || windowId == \"focus-restored\" ? (<ContainerWindowController>this.parent.parent).activeModel.get() : windowId;\n            if (windowId == \"tasks\" || (windowId == \"main-window\" && (<ContainerWindowController>this.parent.parent).activeModel.get() == \"tasks\") ) {\n                setTimeout(() => {\n                    this.callViewMethod(\"grabFocus\", true);\n                }, 200);\n            }\n        });\n        this.bindEvent(this.app, \"focusLost\", (event) => {\n            this.tasksPlugin.activeWindowFocused = null;\n        });\n        this.bindEvent<BadgesUpdateRequestEvent>(this.app, \"badges-update-request\", event => {\n            this.updateBadges();\n        });\n        this.bindEvent<MarkedTasksAsReadEvent>(this.app, \"marked-tasks-as-read\", event => {\n            this.updateBadges();\n        });\n        \n        this.bindEvent(this.app, \"focusLost\", () => {\n            this.callViewMethod(\"pauseTimeAgoRefresher\");\n        });\n        \n        this.bindEvent(this.app, \"focusChanged\", event => {\n            if ((<any>event).windowId == \"main-window\") {\n                this.callViewMethod(\"resumeTimeAgoRefresher\");\n            }\n        });\n        \n        \n        this.bindEvent(this.app, \"onToggleMaximize-notify\", () => {\n            setTimeout(() => {\n                this.callViewMethod(\"grabFocus\", false);\n            }, 10);\n        });\n        \n        // this.sinksInfo = this.getSinksInfo(localSession);\n        \n        return Q().then(() => {\n            return Q.all([\n                this.app.mailClientApi.privmxRegistry.getIdentityProvider(),\n                this.tasksPlugin.sectionManager.isSectionsLimitReached(),\n            ])\n        })\n        .then(res => {\n            let [identityProvider, isSectionsLimitReached] = res;\n            let customElements: component.customelementlist.CustomElement[] = [];\n            if (this.tasksPlugin.getPrivateSectionId()) {\n                customElements.push(\n                    {\n                        id: this.tasksPlugin.getPrivateSectionId(),\n                        icon: {\n                            type: \"hashmail\",\n                            value: this.identity.hashmail\n                        },\n                        label: this.i18n(\"plugin.tasks.window.tasks.sidebar.privateTasks\"),\n                        private: true,\n                        emphasized: true,\n                    }\n                );\n            }\n            customElements.push(\n                {\n                    id: CustomTasksElements.ALL_TASKS_ID,\n                    icon: {\n                        type: \"fa\",\n                        value: \"privmx-icon privmx-icon-tasks\",\n                    },\n                    label: this.i18n(\"plugin.tasks.window.tasks.sidebar.allTasks\"),\n                    private: false,\n                },\n                {\n                    id: CustomTasksElements.TASKS_CREATED_BY_ME_ID,\n                    icon: {\n                        type: \"hashmail\",\n                        value: this.identity.hashmail,\n                    },\n                    label: this.i18n(\"plugin.tasks.window.tasks.sidebar.tasksCreatedByMe\"),\n                    private: false,\n                },\n                {\n                    id: CustomTasksElements.TASKS_ASSIGNED_TO_ME_ID,\n                    icon: {\n                        type: \"hashmail\",\n                        value: this.identity.hashmail,\n                    },\n                    label: this.i18n(\"plugin.tasks.window.tasks.sidebar.tasksAssignedToMe\"),\n                    private: false,\n                    alternative: true,\n                    emphasized: true,\n                },\n                {\n                    id: CustomTasksElements.TRASH_ID,\n                    icon: {\n                        type: \"fa\",\n                        value: \"ico-bin\",\n                    },\n                    label: this.i18n(\"plugin.tasks.window.tasks.sidebar.trash\"),\n                    private: false,\n                }\n            );\n            \n            let sidebarOptions: component.sidebar.SidebarOptions = {\n                sectionsLimitReached: isSectionsLimitReached,\n                customElementList: {\n                    baseCollection: new utils.collection.MutableCollection(customElements),\n                    elementsCountProvider: (ce: component.customelementlist.CustomElement) => this.tasksCountManager.getCustomElementElementsCount(ce),\n                    unreadProvider: (ce: component.customelementlist.CustomElement) => this.getUnread(localSession, ce),\n                    searchCountProvider: (ce: component.customelementlist.CustomElement) => this.tasksPlugin.getSearchCount(localSession, ce),\n                    unmutedUnreadProvider: (ce: component.customelementlist.CustomElement) => this.getUnread(localSession, ce, true),\n                    withSpinnerProvider: (ce: component.customelementlist.CustomElement) => this.getWithSpinner(localSession, ce),\n                    searchAllSearchedProvider: null,\n                },\n                conv2List: {\n                    elementsCountProvider: (c2s: mail.section.Conv2Section) => this.tasksCountManager.getConv2ElementsCount(c2s),\n                    unreadProvider: (c2s: mail.section.Conv2Section) => this.getUnread(localSession, c2s),\n                    searchCountProvider: (ce: mail.section.Conv2Section) => this.tasksPlugin.getSearchCount(localSession, ce),\n                    searchAllSearchedProvider: null,\n                    unmutedUnreadProvider: (c2s: mail.section.Conv2Section) => this.getUnread(localSession, c2s, true),\n                    withSpinnerProvider: (c2s: mail.section.Conv2Section) => this.getWithSpinner(localSession, c2s),\n                    sorter: (a, b) => {\n                        return this.tasksCountManager.getConv2LastDate(b) - this.tasksCountManager.getConv2LastDate(a);\n                    },\n                    hideConversations: true,\n                    assignedTo: true,\n                },\n                sectionList: {\n                    baseCollection: this.tasksPlugin.sidebarSectionsCollection,\n                    elementsCountProvider: (section: mail.section.SectionService) => this.tasksCountManager.getSectionElementsCount(section),\n                    unreadProvider: (section: mail.section.SectionService) => this.getUnread(localSession, section),\n                    searchCountProvider: (section: mail.section.SectionService) => this.tasksPlugin.getSearchCount(localSession, section),\n                    searchAllSearchedProvider: null,\n                    withSpinnerProvider: (section: mail.section.SectionService) => this.getWithSpinner(localSession, section),\n                    moduleName: Types.section.NotificationModule.TASKS,\n                    sorter: (a, b) => {\n                        let res = this.tasksCountManager.getSectionLastDate(b) - this.tasksCountManager.getSectionLastDate(a);\n                        return res == 0 ? component.sectionlist.SectionListController.nameSectionSorter(a, b) : res;\n                    }\n                },\n                remoteHostList: {\n                    elementCountsAggregationStrategy: component.remotehostlist.ElementCountsAggregationStrategy.SECTIONS,\n                },\n                customSectionList: {\n                    baseCollection: null,\n                    unreadProvider: null,\n                    elementsCountProvider: null,\n                    searchCountProvider: null,\n                    searchAllSearchedProvider: null,\n                    moduleName: Types.section.NotificationModule.TASKS,\n                    sorter: null\n                },\n                conv2ListEnabled: true,\n                conv2Splitter: this.settings.create(\"left-panel-sections-splitter-proportional\"),\n                sidebarButtons: [],\n            };\n            if (identityProvider.getRights().indexOf(\"normal\") != -1) {\n                sidebarOptions.sidebarButtons.push(\n                    {\n                        id: \"new-section\",\n                        label: this.i18n(\"plugin.tasks.window.tasks.sidebar.newSection\"),\n                        title: this.i18n(\"plugin.tasks.window.tasks.sidebar.newSection\"),\n                        icon: \"ico-comment\",\n                        windowOpener: true,\n                        onSectionList: true\n                    }\n                );\n            }\n            \n            this.sidebar = this.addComponent(\"sidebar\", this.componentFactory.createComponent(\"sidebar\", [this, sidebarOptions]));\n            this.bindEvent(this.sidebar, \"elementbeforeactivate\", this.onBeforeActivateSidebarElement.bind(this));\n            this.bindEvent(this.sidebar, \"elementactivated\", this.onActivatedSidebarElement.bind(this));\n            this.bindEvent(this.sidebar, \"sidebarbuttonaction\", this.onSidebarButtonAction.bind(this));\n            \n            this.sidebar.usersListTooltip.getContent = (sectionId: string): string => {\n                return this.app.getUsersListTooltipContent(this.app.sessionManager.getLocalSession(), sectionId);\n            }\n            \n            this.bindEvent(this.app, \"reopen-section\", (event: component.disabledsection.ReopenSectionEvent) => {\n                this.selectProject(localSession, event.element.getId());\n            });\n            this.bindEvent<Types.event.SectionsLimitReachedEvent>(this.app, \"sectionsLimitReached\", event => {\n                this.sidebar.onSectionsLimitReached(event.reached);\n            });\n            \n            this.initSessionEvents(localSession);\n            \n            this.tasksCountManager.sidebar = this.sidebar;\n            this.setSidebarActiveItem(localSession, this.activeProjectId);\n            \n            this.bindEvent<TasksSearchUpdateEvent>(this.app, \"tasks-search-update\", event => {\n                let refreshAvatars = this.updateSidebarCustomElements(localSession, this.sidebar.customElementList.customElementsCollection);\n                this.updateBadges();\n                this.callViewMethod(\"onSearchChanged\", event.searchString.length > 0, refreshAvatars);\n            });\n            \n            this.app.dispatchEvent({type: \"focusChanged\", windowId: \"tasks\"});\n            return <any>this.tasksPlugin.checkInit().then(() => this.tasksPlugin.projectsReady).then(() => {\n                return this.taskPanel.init();\n            })\n            .then(() => {\n                this.selectProject(localSession, this.activeProjectId);\n            })\n        })\n        \n    }\n    \n    isSectionPrimary(session: mail.session.Session, section: mail.section.SectionService) {\n        return this.tasksPlugin.tasksPrimarySections[session.hostHash].contains(section);\n    }\n    \n    openDisabledSectionView(session: mail.session.Session, section: mail.section.SectionService) {\n        this.sidebar.setActive({\n            type: this.isSectionPrimary(session, section) ? component.sidebar.SidebarElementType.CUSTOM_SECTION : component.sidebar.SidebarElementType.SECTION,\n            section: section,\n        }, false);\n        this.tasksPlugin.activeSinkId = section.getChatSink().id;\n        this.tasksPlugin.activeSinkHostHash = session.hostHash;\n        this.disabledSection.setSection(section);\n        this.callViewMethod(\"toggleDisabledSection\", true);\n    }\n    \n    refreshTaskCounts(): void {\n        this.tasksCountManager.refresh();\n        for (let hostHash in this.remoteTasksCountManagers) {\n            this.remoteTasksCountManagers[hostHash].refresh();\n        }\n        this.sidebar.refresh();\n    }\n    \n    updateSidebarCustomElements(session: mail.session.Session, collection: utils.collection.BaseCollection<component.customelementlist.CustomElement>, all: boolean = false): boolean {\n        let hostHash = session.hostHash;\n        let refreshAvatars = false;\n        let len = collection.size();\n        for (let i = 0; i < len; ++i) {\n            let el = collection.get(i);\n            if (all || (this.tasksPlugin.searchCountsModified[hostHash] && this.tasksPlugin.searchCountsModified[hostHash][el.id])) {\n                collection.triggerUpdateAt(i);\n                if (el.icon.type == \"hashmail\") {\n                    refreshAvatars = true;\n                }\n            }\n        }\n        return refreshAvatars;\n    }\n    \n    updateSidebarSections(session: mail.session.Session, collection: utils.collection.SortedCollection<mail.section.SectionService>, all: boolean = false) {\n        let hostHash = session.hostHash;\n        let len = collection.size();\n        for (let i = 0; i < len; ++i) {\n            let id = collection.get(i).getId();\n            if (all || (this.tasksPlugin.searchCountsModified[hostHash] && this.tasksPlugin.searchCountsModified[hostHash][id])) {\n                collection.triggerUpdateAt(i);\n            }\n        }\n    }\n    \n    updateConv2Sections(session: mail.session.Session, collection: utils.collection.SortedCollection<mail.section.Conv2Section>, all: boolean = false) {\n        let hostHash = session.hostHash;\n        let len = collection.size();\n        for (let i = 0; i < len; ++i) {\n            let id = collection.get(i).id;\n            if (all || (this.tasksPlugin.searchCountsModified[hostHash] && this.tasksPlugin.searchCountsModified[hostHash][id])) {\n                collection.triggerUpdateAt(i);\n            }\n        }\n    }\n    \n    onBeforeActivateSidebarElement(event: component.sidebar.ElementBeforeActivateEvent) {\n        let localSession = this.app.sessionManager.getLocalSession();\n        event.result = false;\n        if (event.element.type == component.sidebar.SidebarElementType.HOST) {\n            this.expandRemoteSectionsList(event.element.host);\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.REMOTE_SECTION) {\n            let session = this.app.sessionManager.getSessionByHostHash(event.element.hostHash);\n            const context = app.common.Context.create({\n                moduleName: Types.section.NotificationModule.TASKS,\n                contextType: \"remote-section\",\n                contextId: \"section:\" + event.element.section.getId(),\n                hostHash: event.element.hostHash\n            });            \n            this.contextHistory.append(context);\n            this.selectProject(session, event.element.section.getId());\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.SECTION) {\n            const context = app.common.Context.create({\n                moduleName: Types.section.NotificationModule.TASKS,\n                contextType: \"section\",\n                contextId: \"section:\" + event.element.section.getId(),\n                hostHash: localSession.hostHash\n            });            \n            this.contextHistory.append(context);\n            this.selectProject(localSession, event.element.section.getId());\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.CUSTOM_ELEMENT) {\n            const context = app.common.Context.create({\n                moduleName: Types.section.NotificationModule.TASKS,\n                contextType: \"custom\",\n                contextId: event.element.customElement.id,\n                hostHash: localSession.hostHash\n            });            \n            this.contextHistory.append(context);\n            this.selectProject(localSession, event.element.customElement.id);\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.CONVERSATION) {\n            const context = app.common.Context.create({\n                moduleName: Types.section.NotificationModule.TASKS,\n                contextType: \"conversation\",\n                contextId: event.element.conv2.id,\n                hostHash: localSession.hostHash\n            });            \n            this.contextHistory.append(context);\n            this.selectProject(localSession, event.element.conv2.id);\n        }\n        else if (event.element.type == component.sidebar.SidebarElementType.REMOTE_CONVERSATION) {\n            let session = this.app.sessionManager.getSessionByHostHash(event.element.hostHash);\n            const context = app.common.Context.create({\n                moduleName: Types.section.NotificationModule.TASKS,\n                contextType: \"remote-conversation\",\n                contextId: event.element.conv2.id,\n                hostHash: event.element.hostHash\n            });            \n            this.contextHistory.append(context);\n            this.selectProject(session, event.element.conv2.id);\n        }\n\n    }\n    \n    onSidebarButtonAction(event: component.sidebar.SidebarButtonActionEvent) {\n        if (event.sidebarButton.id == \"new-section\") {\n            this.openSectionsWindow();\n        }\n    }\n    \n    openSectionsWindow(): void {\n        // this.app.openSingletonWindow(\"sections\", window.sections.SectionsWindowController);\n        this.app.openNewSectionDialogFromSidebar();\n    }\n    \n    onActivatedSidebarElement(event: component.sidebar.ElementActivatedEvent) {\n    }\n    \n    onSinkChange(session: mail.session.Session, event: Types.utils.collection.CollectionEvent<mail.SinkIndex>) {\n        if (event.element == null) {\n            return;\n        }\n        let section = session.sectionManager.getSectionBySinkIndex(event.element);\n        if (section == null) {\n            return;\n        }\n        if (session.hostHash == this.app.sessionManager.getLocalSession().hostHash) {\n            this.sidebar.sectionList.sortedCollection.triggerBaseUpdateElement(section);\n        }\n        else {\n            let list = this.sidebar.remoteSectionsLists[session.hostHash];\n            if (list) {\n                list.sortedCollection.triggerBaseUpdateElement(section);\n            }\n        }\n    }\n    \n    getUnread(session: mail.session.Session, section: mail.section.SectionService|mail.section.Conv2Section|component.customelementlist.CustomElement, skipMuted: boolean = false): number {\n        if (!section) {\n            return 0;\n        }\n        else if (section instanceof mail.section.SectionService) {\n            return this.tasksPlugin.getUnreadForSection(session, section.getId());\n        }\n        else if (section instanceof mail.section.Conv2Section) {\n            return this.tasksPlugin.getUnreadForConv2Section(session, section.id, skipMuted);\n        }\n        else if (section.id == CustomTasksElements.ALL_TASKS_ID) {\n            return null;\n        }\n        else if (section.id == CustomTasksElements.TASKS_ASSIGNED_TO_ME_ID) {\n            // console.log(1);\n            return this.tasksPlugin.getUnread(session, true, false);\n        }\n        else if (section.id == CustomTasksElements.TASKS_CREATED_BY_ME_ID) {\n            // console.log(2);\n            return this.tasksPlugin.getUnread(session, false, true, skipMuted);\n        }\n        else if (section.id == CustomTasksElements.TRASH_ID) {\n            // console.log(3);\n            return this.tasksPlugin.getUnread(session, false, false, false, true);\n        }\n        return 0;\n    }\n    \n    getWithSpinner(session: mail.session.Session, section: mail.section.SectionService|mail.section.Conv2Section|component.customelementlist.CustomElement): boolean {\n        if (this.tasksPlugin.sectionsWithSpinner[session.hostHash][\"__all__\"]) {\n            return true;\n        }\n        if (section instanceof mail.section.SectionService) {\n            return this.tasksPlugin.sectionsWithSpinner[session.hostHash][section.getId()];\n        }\n        else if (section instanceof mail.section.Conv2Section) {\n            return this.tasksPlugin.sectionsWithSpinner[session.hostHash][section.id];\n        }\n        else {\n            return this.tasksPlugin.sectionsWithSpinner[session.hostHash][section.id];\n        }\n    }\n    \n    applyHistoryState(processed: boolean, state: string) {\n        let usedState = state;\n        let localSession = this.app.sessionManager.getLocalSession();\n        const context = this.contextHistory.getCurrent();\n        if (context) {\n            if (this.app.switchModuleWithContext() || state) {\n                if (context.getType() == \"section\") {\n                    let contextSection = localSession.sectionManager.getSection(context.getSectionIdFromContextId());\n                    if (contextSection && contextSection.isKvdbModuleEnabled()) {\n                        usedState = context.getSectionIdFromContextId();\n                    }\n                }\n                else if (context.getType() == \"conversation\") {\n                    const contextData = context.getContextId().split(\":\");\n                    if (contextData[2].split(\"|\").length < 3) {\n                        usedState = context.getContextId();\n                    }\n                }\n                else if (context.getType() == \"custom\") {\n                    const subId = context.getContextId();\n                    if (subId == \"private\") {\n                        let privateSection = localSession.sectionManager.getMyPrivateSection();\n                        if (privateSection) {\n                            usedState = privateSection.getId();\n                        }\n                    }\n                    else {\n                        usedState = subId;\n                    }\n                }\n            }\n        }\n        this.app.resetModuleSwitchingModifier();\n        \n        if (usedState != null) {\n            let newActiveProjectId = usedState.startsWith(\"section:\") ? usedState.substring(\"section:\".length) : usedState;\n            this.initWithProject = newActiveProjectId;\n            if (this.activeProjectId !== newActiveProjectId && this.activeProjectHostHash !== localSession.hostHash) {\n                this.activeProjectId = newActiveProjectId;\n                this.activeProjectHostHash = localSession.hostHash;\n                this.selectProject(localSession, newActiveProjectId);\n            }\n        }\n    }\n    \n    onUpdateSectionBadge(event: UpdateSectionBadgeEvent): void {\n        this.updateBadges();\n    }\n    \n    updateBadges(): void {\n        this.updateSidebarCustomElements(this.app.sessionManager.getLocalSession(), this.sidebar.customElementList.customElementsCollection, true);\n        this.updateSidebarSections(this.app.sessionManager.getLocalSession(), this.sidebar.sectionList.sortedCollection, true);\n        this.updateConv2Sections(this.app.sessionManager.getLocalSession(), this.sidebar.conv2List.sortedCollection, true);\n        this.sidebar.conv2List.sortedCollection.refresh();\n        this.sidebar.sectionList.sortedCollection.refresh();\n        for (let hostHash in this.sidebar.remoteSectionsLists) {\n            let rsl = this.sidebar.remoteSectionsLists[hostHash];\n            this.updateSidebarSections(this.app.sessionManager.getSessionByHostHash(hostHash), rsl.sortedCollection, true);\n            rsl.sortedCollection.refresh();\n        }\n        for (let hostHash in this.sidebar.remoteConv2Lists) {\n            let rsl = this.sidebar.remoteConv2Lists[hostHash];\n            this.updateConv2Sections(this.app.sessionManager.getSessionByHostHash(hostHash), rsl.sortedCollection, true);\n            rsl.sortedCollection.refresh();\n        }\n        for (let hostHash in this.remoteTasksCountManagers) {\n            this.remoteTasksCountManagers[hostHash].updateSidebarHostElement();\n        }\n    }\n    // -- UNUSED METHOD\n    // getTabBadge(sectionId: string): number {\n    //     let unread: number = 0;\n    //     for (let tId in this.tasksPlugin.tasks) {\n    //         let task = this.tasksPlugin.tasks[tId];\n    //         if (this.tasksPlugin.wasTaskUnread(task, sectionId)) {\n    //             unread++;\n    //         }\n    //     }\n    //     return unread;\n    // }\n    \n    getModel(): Model {\n        let allAvailMembers: {[hostHash: string]: PeopleMap} = {};\n        for (let hostHash in this.app.sessionManager.sessions) {\n            let session = this.app.sessionManager.getSessionByHostHash(hostHash);\n            if (session.loadingPromise.isFulfilled()) {\n                allAvailMembers[hostHash] = this.tasksPlugin.getAllPeople(session);\n            }\n        }\n        return {\n            docked: this.docked,\n            activeProjectId: this.activeProjectId,\n            membersStr: JSON.stringify(allAvailMembers),\n            myId: this.tasksPlugin.getMyId(this.app.sessionManager.getLocalSession()),\n            privateSectionId: this.tasksPlugin.getPrivateSectionId(),\n            // projectsStr: JSON.stringify(this.tasksPlugin.projects),\n            horizontalTaskLayout: this.tasksPlugin.getSetting(null, \"horizontal-task-window-layout\", null, null) ? true : false,\n        };\n    }\n    \n    // getSinksInfo(session: mail.session.Session): Array<SinkInfo> {\n    //     let sinksInfo: Array<SinkInfo> = [];\n        \n    //     for (let el of this.tasksPlugin.tasksSectionsCollection[session.hostHash].list) {\n    //         sinksInfo.push({\n    //             id: el.getId(),\n    //             public: el.getScope() == \"public\",\n    //         });\n    //     }\n    //     sinksInfo.push({\n    //         id: this.tasksPlugin.getPrivateSectionId(),\n    //         public: true,\n    //     });\n        \n    //     return sinksInfo;\n    // }\n    \n    onDataChanged(type: Watchable, id: string, action: Action): void {\n        if (this.activeProjectHostHash != this.app.sessionManager.getLocalSession().hostHash) {\n            return;\n        }\n        if (type == \"project\") {\n            let proj = this.tasksPlugin.getProject(this.app.sessionManager.getLocalSession(), id);\n            if (!proj && action != \"deleted\") {\n                return;\n            }\n            if (action == \"added\") {\n                // this.callViewMethod(\"addProject\", JSON.stringify(proj));\n            }\n            else if (action == \"deleted\") {\n                // this.callViewMethod(\"deleteProject\", id);\n                if (this.activeProjectId == id) {\n                    this.activeProjectId = \"\";\n                    this.onViewSettingChanged(\"active-project-id\", \"\");\n                    this.callViewMethod(\"hideContainer\", id);\n                }\n            }\n            else if (action == \"modified\") {\n                // this.callViewMethod(\"updateProject\", JSON.stringify(proj));\n            }\n        }\n        if (type == \"task\" && this.tasksCountManager != null) {\n            this.tasksCountManager.updateTasksCount(id, action);\n        }\n    }\n    \n    onRemoteDataChanged(type: Watchable, id: string, action: Action, hostHash: string): void {\n        if (type == \"task\") {\n            this.getOrCreateRemoteTasksCountManager(hostHash).updateTasksCount(id, action);\n        }\n    }\n    \n    onViewSettingChanged(setting: string, value: any): void {\n        if (setting in this.subSettings) {\n            if (typeof(value) == \"boolean\") {\n                value = value ? 1 : 0;\n            }\n            let fixedSectionsNames = [\n                CustomTasksElements.ALL_TASKS_ID,\n                CustomTasksElements.TASKS_ASSIGNED_TO_ME_ID,\n                CustomTasksElements.TASKS_CREATED_BY_ME_ID,\n                CustomTasksElements.TRASH_ID,\n                this.tasksPlugin.getPrivateSectionId(),\n            ];\n            \n            this.subSettings[setting].set(value);\n        }\n    }\n    \n    onViewSelectProject(projectId: string) {\n        // TODO WRONG PARAM\n        this.selectProject(this.app.sessionManager.getLocalSession(), projectId);\n    }\n    \n    setSidebarActiveItem(session: mail.session.Session, projectId: ProjectId): void {\n        let fixedSectionsNames = [\n            CustomTasksElements.ALL_TASKS_ID,\n            CustomTasksElements.TASKS_ASSIGNED_TO_ME_ID,\n            CustomTasksElements.TASKS_CREATED_BY_ME_ID,\n            CustomTasksElements.TRASH_ID,\n            this.tasksPlugin.getPrivateSectionId(),\n        ];\n        if (fixedSectionsNames.indexOf(projectId) >= 0) {\n            this.sidebar.setActive({\n                type: component.sidebar.SidebarElementType.CUSTOM_ELEMENT,\n                customElement: this.sidebar.options.customElementList.baseCollection.find(x => x.id == projectId),\n            }, false);\n            this.tasksPlugin.activeSinkId = null;\n            this.tasksPlugin.activeSinkHostHash = null;\n        }\n        else {\n            if (session.sessionType == \"local\") {\n                if (this.tasksPlugin.isConv2Project(projectId)) {\n                    Q().then(() => {\n                        return session.mailClientApi.privmxRegistry.getConv2Service();\n                    })\n                    .then(conv2service => {\n                        let conv2 = conv2service.collection.find(c2s => c2s.id == projectId);\n                        this.sidebar.setActive({\n                            type: component.sidebar.SidebarElementType.CONVERSATION,\n                            conv2: conv2,\n                        }, false);\n                        this.tasksPlugin.activeSinkId = conv2 && conv2.sinkIndex ? conv2.sinkIndex.sink.id : null;\n                        this.tasksPlugin.activeSinkHostHash = session.hostHash;\n    \n                    })\n                }\n                else if (session.sectionManager.getSection(projectId)) {\n                    this.sidebar.setActive({\n                        type: component.sidebar.SidebarElementType.SECTION,\n                        section: session.sectionManager.getSection(projectId),\n                    }, false);\n                    this.tasksPlugin.activeSinkId = session.sectionManager.getSection(projectId).getChatSink().id;\n                    this.tasksPlugin.activeSinkHostHash = session.hostHash;\n                }\n            }\n            if (session.sessionType == \"remote\") {\n                if (this.tasksPlugin.isConv2Project(projectId)) {\n                    Q().then(() => {\n                        return session.mailClientApi.privmxRegistry.getConv2Service();\n                    })\n                    .then(conv2service => {\n                        let conv2 = conv2service.collection.find(c2s => c2s.id == projectId);\n                        this.sidebar.setActive({\n                            type: component.sidebar.SidebarElementType.REMOTE_CONVERSATION,\n                            conv2: conv2,\n                            hostHash: session.hostHash,\n                        }, false);\n                        this.tasksPlugin.activeSinkId = conv2 && conv2.sinkIndex ? conv2.sinkIndex.sink.id : null;\n                        this.tasksPlugin.activeSinkHostHash = session.hostHash;\n                    })\n                }\n                else if (session.sectionManager.getSection(projectId)) {\n                    this.sidebar.setActive({\n                        type: component.sidebar.SidebarElementType.REMOTE_SECTION,\n                        section: session.sectionManager.getSection(projectId),\n                        hostHash: session.hostHash,\n                    }, false);\n                    this.tasksPlugin.activeSinkId = session.sectionManager.getSection(projectId).getChatSink().id;\n                    this.tasksPlugin.activeSinkHostHash = session.hostHash;\n                }\n            }\n    \n        }\n    }\n    \n    selectProject(session: mail.session.Session, projectId: ProjectId) {\n        if (!this.sidebar) {\n            return;\n        }\n        let isRemote = session.hostHash != this.app.sessionManager.getLocalSession().hostHash;\n        let fixedSectionsNames = [\n            CustomTasksElements.ALL_TASKS_ID,\n            CustomTasksElements.TASKS_ASSIGNED_TO_ME_ID,\n            CustomTasksElements.TASKS_CREATED_BY_ME_ID,\n            CustomTasksElements.TRASH_ID,\n            this.tasksPlugin.getPrivateSectionId(),\n        ];\n        this.setSidebarActiveItem(session, projectId);\n        let activeId: string;\n        let rootId: string;\n        this.callViewMethod(\"toggleDisabledSection\", false);\n        if (fixedSectionsNames.indexOf(projectId) >= 0) {\n            const context = app.common.Context.create({\n                moduleName: Types.section.NotificationModule.TASKS,\n                contextType: \"custom\",\n                contextId: projectId,\n                hostHash: session.hostHash\n            });    \n            this.contextHistory.append(context);\n\n            activeId = projectId;\n            rootId = projectId;\n            if (projectId == this.tasksPlugin.getPrivateSectionId()) {\n                if (this.privateSection) {\n                    this.openTaskGroupsPanel(session, this.privateSection);\n                }\n            }\n            else {\n                this.openTaskGroupsPanel(session, projectId);\n            }\n        }\n        else if (this.tasksPlugin.isConv2Project(projectId)) {\n            let c2s = this.tasksPlugin.getConv2Section(session, projectId);\n            if (!c2s) {\n                return;\n            }\n            const context = app.common.Context.create({\n                moduleName: Types.section.NotificationModule.TASKS,\n                contextType: \"conversation\",\n                contextId: projectId,\n                hostHash: session.hostHash\n            });    \n            this.contextHistory.append(context);\n\n            this.afterViewLoaded.promise.then(() => {\n                this.openTaskGroupsPanel(session, c2s);\n            });\n            activeId = c2s.id;\n            rootId = c2s.id;\n        }\n        else {\n            let section = session.sectionManager.getSection(projectId);\n            const context = app.common.Context.create({\n                moduleName: Types.section.NotificationModule.TASKS,\n                contextType: \"section\",\n                contextId: \"section:\" + projectId,\n                hostHash: session.hostHash\n            });\n            this.contextHistory.append(context);\n\n            if (section instanceof mail.section.SectionService && !section.isKvdbModuleEnabled()) {\n                this.disabledSection.setSection(section);\n                this.callViewMethod(\"toggleDisabledSection\", true);\n                return;\n            }\n            \n            let state = session.sectionManager.getDescantsForModule(projectId, \"kvdb\");\n            if (state == null) {\n                return;\n            }\n            this.afterViewLoaded.promise.then(() => {\n                this.openTaskGroupsPanel(session, state.active);\n            });\n            activeId = state.active.getId();\n            rootId = state.active.getId();\n        }\n    }\n    \n    onSectionsCollectionChange(session: mail.session.Session, event: Types.utils.collection.CollectionEvent<mail.section.SectionService>): void {\n        let countsManager: TasksCountManager = null;\n        let customElementList: component.customelementlist.CustomElementListController = null;\n        let sectionList: component.sectionlist.SectionListController | component.remotesectionlist.RemoteSectionListController = null;\n        let conv2List: component.conv2list.Conv2ListController | component.remoteconv2list.RemoteConv2ListController = null;\n        if (session.hostHash == this.app.sessionManager.getLocalSession().hostHash) {\n            countsManager = this.tasksCountManager;\n            customElementList = this.sidebar.customElementList;\n            sectionList = this.sidebar.sectionList;\n            conv2List = this.sidebar.conv2List;\n        }\n        else {\n            countsManager = this.getOrCreateRemoteTasksCountManager(session.hostHash);\n            customElementList = null;\n            sectionList = this.sidebar.remoteSectionsLists[session.hostHash];\n            conv2List = this.sidebar.remoteConv2Lists[session.hostHash];\n        }\n        if (countsManager) {\n            countsManager.conv2Count = {};\n            countsManager.customsCount = {};\n            countsManager.sectionsCount = {};\n        }\n        if (customElementList) {\n            this.updateSidebarCustomElements(session, customElementList.customElementsCollection, true);\n        }\n        if (sectionList) {\n            this.updateSidebarSections(session, sectionList.sortedCollection, true);\n        }\n        if (conv2List) {\n            this.updateConv2Sections(session, conv2List.sortedCollection, true);\n        }\n    }\n    \n    setActiveProjectId(hostHash: string, value: ProjectId): void {\n        this.activeProjectId = value;\n        this.activeProjectHostHash = hostHash;\n    }\n    \n    \n    getTaskGroupsPanel(session: mail.session.Session, section: mail.section.SectionService|mail.section.Conv2Section|string, hostHash?: string): Q.Promise<TaskGroupsPanelController> {\n        return this.createTaskGroupsPanel(session, TasksWindowController.getProjectId(section));\n    }\n    \n    createTaskGroupsPanel(session: mail.session.Session, projectId: string): Q.Promise<TaskGroupsPanelController> {\n        // console.log(\"on createTaskGroupsPanel\", projectId);\n        let tgPanelKey = this.getTaskGroupsPanelKey(session.hostHash, projectId);\n        if (tgPanelKey in this.taskGroupsPanelPromises) {\n            return this.taskGroupsPanelPromises[tgPanelKey];\n        }\n        let panel = this.addComponent(\"taskGroupsPanel-\" + tgPanelKey, this.componentFactory.createComponent(\"taskGroupsPanel\", [this]));\n        return this.taskGroupsPanelPromises[tgPanelKey] = Q().then(() => {\n            let mergedSectionsNames = [\n                CustomTasksElements.ALL_TASKS_ID,\n                CustomTasksElements.TASKS_ASSIGNED_TO_ME_ID,\n                CustomTasksElements.TASKS_CREATED_BY_ME_ID,\n                CustomTasksElements.TRASH_ID,\n            ];\n            return panel.setSession(session, mergedSectionsNames.indexOf(projectId) >= 0 ? undefined : projectId);\n        })\n        .then(() => {\n            panel.onViewConfirmPreviewExit = () => {\n                this.taskPanel.closeConfirm().then(close => {\n                    if (close) {\n                        panel.callViewMethod(\"confirmPreviewExit\");\n                    }\n                });\n            };\n            panel.init();\n            this.bindEvent<TaskPreviewRequestEvent>(panel, \"task-preview-request\", event => {\n                return Q().then(() => {\n                    return this.taskPanel.setSession(this.app.sessionManager.getSessionByHostHash(event.hostHash));\n                })\n                .then(() => {\n                    // console.log(\"after setSeesion\")\n                    // console.log(\"on TaskPreviewRequestEvent\", this.activeProjectId, projectId, \"hostHash\", event.hostHash)\n                    if (this.activeProjectId != projectId || this.activeProjectHostHash != event.hostHash) {\n                        // console.log(\"warn: diff projectId - return\")\n                        return;\n                    }\n                    this.afterViewLoaded.promise.then(() => {\n                        let session = this.app.sessionManager.getSessionByHostHash(event.hostHash);\n                        this.taskPanel.setTaskId(session, event.taskId);\n                        \n                        if (!event.taskId) {\n                            // console.log(\"task-preview-request - no taskId\")\n                            return;\n                        }\n                        \n                        let task = this.tasksPlugin.tasks[session.hostHash][event.taskId];\n                        \n                        if (task && this.tasksPlugin.wasTaskUnread(session, task, task.getProjectId()) && this.app.userPreferences.getAutoMarkAsRead()) {\n                           // console.log(\"before mark task as watched\")\n                            this.tasksPlugin.markTaskAsWatched(session, task.getId(), task.getProjectId());\n                            // console.log(\"before updateBadges\");\n                            this.updateBadges();\n                            // console.log(\"after updateBadges\");\n                        }\n                    });\n    \n                })\n            });\n            this.bindEvent<TaskPanelUpdateRequestEvent>(panel, \"taskpanel-update-request\", () => {\n                if (this.activeProjectId != projectId || this.activeProjectHostHash != session.hostHash) {\n                    return;\n                }\n                this.afterViewLoaded.promise.then(() => {\n                    this.taskPanel.updateView();\n                });\n            });\n            this.bindEvent<TaskPanelChangeVisibilityRequestEvent>(panel, \"taskpanel-change-visibility-request\", event => {\n                if (this.activeProjectId != projectId || this.activeProjectHostHash != session.hostHash) {\n                    return;\n                }\n                this.afterViewLoaded.promise.then(() => {\n                    this.callViewMethod(\"changeTaskPanelVisibility\", event.show);\n                });\n            });\n            this.bindEvent<HorizontalTaskWindowLayoutChangeRequestEvent>(panel, \"horizontal-task-window-layout-change-request\", event => {\n                if (this.activeProjectId != projectId || this.activeProjectHostHash != session.hostHash) {\n                    return;\n                }\n                this.afterViewLoaded.promise.then(() => {\n                    this.callViewMethod(\"updatePreviewLocation\", event.horizontalLayout);\n                });\n            });\n            this.bindEvent<BadgesUpdateRequestEvent>(panel, \"badges-update-request\", event => {\n                this.afterViewLoaded.promise.then(() => {\n                    this.updateBadges();\n                });\n            });\n            \n            this.afterViewLoaded.promise.then(() => {\n                this.afterViewLoaded.promise.then(() => {\n                    // console.log(\"call createTaskGroupsPanel in view\")\n                    this.callViewMethod(\"createTaskGroupsPanel\", session.hostHash, projectId);\n                });\n            });\n            \n            // console.log(\"on createTaskGroupsPanel - return panel\");\n            return Q(panel);\n    \n        })\n        \n    }\n    \n    openTaskGroupsPanel(session: mail.session.Session, section: mail.section.SectionService|mail.section.Conv2Section|string): void {\n        this.openRemoteTaskGroupsPanel(session.hostHash, section);\n        // this.afterViewLoaded.promise.then(() => {\n\n        //     this.getTaskGroupsPanel(session, section).then(panel => {\n        //         if (!panel.wasDataSet) {\n        //             return panel.setSectionData(section).then(() => Q(panel));\n        //         }\n        //         return panel;\n        //     }).then(panel => {\n        //         this.activeProjectId = TasksWindowController.getProjectId(section);\n        //         if (this.activePanel) {\n        //             this.activePanel.deactivate();\n        //         }\n        //         panel.beforeActivate();\n        //         this.activePanel = panel;\n        //         this.tasksPlugin.activeTaskGroupsPanel = panel;\n        //         this.afterViewLoaded.promise.then(() => {\n        //             this.callViewMethod(\"openTaskGroupsPanel\", TasksWindowController.getProjectId(section));\n        //         });\n        //     });\n        // });\n    }\n    \n    onViewOpenedTaskGroupsPanel(hostHash: string, projectId: string): void {\n        // console.log(\"on openedTaskGroupsPanel - projectId\" , projectId);\n        if (projectId != this.activeProjectId || hostHash != this.activeProjectHostHash) {\n            // console.log(\"projectId diff from this.activeProjectId\");\n            return;\n        }\n        let tgPanelKey = this.getTaskGroupsPanelKey(hostHash, projectId);\n        let panelPromise = this.taskGroupsPanelPromises[tgPanelKey];\n        if (panelPromise) {\n            // console.log(\"openedTaskGroupsPanel - call activate\");\n            panelPromise.then(panel => panel.activate());\n        }\n    }\n    \n    updateDirty(dirty: boolean): void {\n        this.dirty = dirty;\n    }\n    \n    onViewRefresh(): void {\n        if (this.activePanel) {\n            this.activePanel.onViewFullRefresh(true, true);\n        }\n    }\n    \n    panelId: number = 1;\n    onViewSwitchToPanel(id: number): void {\n        this.panelId = id;\n    }\n    \n    handleFilePaste(element: app.common.clipboard.ClipboardElement): boolean {\n        if (this.panelId == 2) {\n            if (\n                (app.common.clipboard.Clipboard.FORMAT_SYSTEM_FILES in element.data && this.taskPanel)\n                    || (element.data.file && element.data.file.element instanceof mail.section.OpenableSectionFile)\n                    || (element.data.files && element.data.files.filter((x: any) => !x || !(x.element instanceof mail.section.OpenableSectionFile)).length == 0)\n                ) {\n                this.taskPanel.tryPaste(element, \"text\" in element.data ? element.data.text : null);\n                return true;\n            }\n        }\n        return false;\n    }\n    \n\n      ////////////////////////\n     //// REMOTE SECTIONS ///\n    ////////////////////////\n\n    expandRemoteSectionsList(hostEntry: component.remotehostlist.HostEntry): void {\n        let session: mail.session.Session;\n        let hostHash = this.app.sessionManager.getHashFromHost(hostEntry.host);\n        let checkSessionExists: boolean = this.app.sessionManager.isSessionExistsByHostHash(hostHash);\n        if (checkSessionExists && hostEntry.sectionList != null && hostEntry.conv2List != null) {\n            this.callViewMethod(\"expandRemoteSectionsList\", hostEntry.host, hostHash);\n            return;\n        }\n        \n        let bindChangedListener = false;\n        if (!this.remoteDataChangedListeners[hostHash]) {\n            bindChangedListener = true;\n            this.remoteDataChangedListeners[hostHash] = (t, i, a) => this.onRemoteDataChanged(t, i, a, hostHash);\n        }\n\n        Q().then(() => {\n            this.sidebar.callViewMethod(\"showHostLoading\", hostHash, true);\n            if (!checkSessionExists) {\n                return this.app.sessionManager.createRemoteSession(hostEntry.host)\n                .then(() => {\n                    return this.app.sessionManager.init(hostHash);\n                })\n                .fail(() => {\n                    this.sidebar.callViewMethod(\"showHostLoading\", hostHash, false);\n                    return this.errorCallback;\n                });\n            }\n        })\n        .then(() => {\n            session = this.app.sessionManager.getSessionByHostHash(hostHash);\n            if (bindChangedListener) {\n                this.tasksPlugin.watch(session, \"*\", \"*\", \"*\", this.remoteDataChangedListeners[hostHash]);\n            }\n            return this.tasksPlugin.ensureSessionProjectsInitialized(session);\n        })\n        .then(() => {\n            this.initSessionEvents(session);\n            if (!this.remoteServers) {\n                this.remoteServers = {};\n            }\n                \n            this.initRemoteHostComponents(hostEntry, session);\n            this.callViewMethod(\"expandRemoteSectionsList\", hostEntry.host, hostHash);\n        })\n        .then(() => {\n            let rtcm = this.getOrCreateRemoteTasksCountManager(hostHash);\n            rtcm.updateSidebarHostElement();\n        });\n    }\n    \n    initSessionEvents(session: mail.session.Session): void {\n        this.bindEvent<Types.event.SectionStateChangedEvent>(session.sectionManager.sectionAccessManager.eventDispatcher, \"section-state-changed\", event => {\n            if (this.activePanel && this.activeProjectId == event.sectionId && this.activeProjectHostHash == session.hostHash) {\n                Q().then(() => {\n                    return session.sectionManager.load();\n                })\n                .then(() => {\n                    let section = session.sectionManager.getSection(event.sectionId);\n                    let moduleEnabled = section.isKvdbModuleEnabled();\n                    if (! moduleEnabled) {\n                        this.openDisabledSectionView(session, section);\n                    }\n                    else {\n                        this.selectProject(session, section.getId());\n                    }\n                })\n            }\n        });\n        this.registerChangeEvent(this.tasksPlugin.tasksSectionsCollectionNoPrivate[session.hostHash].changeEvent, event => this.onSectionsCollectionChange(session, event));\n        this.registerChangeEvent(session.sectionManager.sinkIndexManager.sinkIndexCollection.changeEvent, event => this.onSinkChange(session, event));\n    }\n\n    checkRemoteHostComponentsInitialized(hostHash: string): boolean {\n        let ret = (hostHash in this.remoteServers) && this.remoteServers[hostHash].sectionList != null && this.remoteServers[hostHash].conv2List != null;\n        return ret;\n    }\n\n    initRemoteHostComponents(hostEntry: component.remotehostlist.HostEntry, session: mail.session.Session): void {\n        let hostHash = session.hostHash;\n        if (this.checkRemoteHostComponentsInitialized(hostHash)) {\n            return;\n        }\n\n        let sectionsListOptions: component.remotesectionlist.RemoteSectionListOptions = {\n            baseCollection: session.sectionManager.filteredCollection,\n            unreadProvider: section => this.getUnread(session, section),\n            elementsCountProvider: section => this.getRemoteSectionElementsCount(hostHash, section),\n            searchCountProvider: section => this.tasksPlugin.getSearchCount(session, section),\n            withSpinnerProvider: section => this.getWithSpinner(session, section),\n            searchAllSearchedProvider: null,\n            sorter: (a, b) => {\n                let res = this.getOrCreateRemoteTasksCountManager(hostHash).getSectionLastDate(b) - this.getOrCreateRemoteTasksCountManager(hostHash).getSectionLastDate(a);\n                return res == 0 ? component.sectionlist.SectionListController.nameSectionSorter(a, b) : res;\n            },\n            moduleName: Types.section.NotificationModule.TASKS,\n            checkShowAllAvailSections: false,\n            session: session,\n        }\n\n\n        let conv2ListOptions: component.remoteconv2list.RemoteConv2ListOptions = {\n            elementsCountProvider: conversation => this.getRemoteConversationElementsCount(hostHash, conversation),\n            unreadProvider: c2s => this.getUnread(session, c2s),\n            searchCountProvider: c2s => this.tasksPlugin.getSearchCount(session, c2s),\n            searchAllSearchedProvider: null,\n            withSpinnerProvider: c2s => this.getWithSpinner(session, c2s),\n            sorter: (a, b) => {\n                return this.getOrCreateRemoteTasksCountManager(hostHash).getConv2LastDate(b) - this.getOrCreateRemoteTasksCountManager(hostHash).getConv2LastDate(a);\n            },\n            hideConversations: true,\n            assignedTo: true,\n            session: session,\n        };\n        \n        let hostList = hostEntry;\n        hostList.sectionList = this.addComponent(\"remoteSectionsList-\" + hostHash, this.componentFactory.createComponent(\"remotesectionlist\", [this, sectionsListOptions]));\n        hostList.sectionList.ipcMode = true;\n        hostList.conv2List = this.addComponent(\"remoteConv2List-\" + hostHash, this.componentFactory.createComponent(\"remoteconv2list\", [this, conv2ListOptions]));\n        hostList.conv2List.ipcMode = true;\n        this.remoteServers[hostHash] = hostList;\n        this.sidebar.registerRemoteSectionsList(hostHash, hostList.sectionList);\n        this.sidebar.registerRemoteConv2List(hostHash, hostList.conv2List);\n\n    }\n\n\n    openRemoteTaskGroupsPanel(hostHash: string, section: mail.section.SectionService|mail.section.Conv2Section|string): Q.Promise<void> {\n        return Q().then(() => {\n            return this.app.sessionManager.init(hostHash);\n        })\n        .then(() => {\n            let session = this.app.sessionManager.getSessionByHostHash(hostHash);\n            this.tasksPlugin.ensureSessionInit(session);\n            this.tasksPlugin.ensureInitSessionCollections(session);\n            return this.afterViewLoaded.promise.then(() => {\n                let projectId = typeof section == \"string\" ? section : TasksWindowController.getProjectId(section);\n                let sectionName = (section instanceof mail.section.SectionService) ? section.getName() : (typeof section == \"string\" ? \"\" : section.getFirstPerson().getName());\n                // console.log(\"openRemoteGroupsPanel - id: \", projectId, \"name: \", sectionName);\n                if (section instanceof mail.section.SectionService) {\n                    return this.tasksPlugin.ensureProjectExists(projectId, sectionName, session);\n                }\n            })\n            .then(() => {\n                // console.log(\"openRemoteGroupsPanel - ensureProjectExists after\")\n                return this.getTaskGroupsPanel(session, section, hostHash).then(panel => {\n                    if (!panel.wasDataSet) {\n                        // console.log(\"set panel data\");\n                        return panel.setSectionData(section).then(() => Q(panel));\n                    }\n                    return panel;\n                }).then(panel => {\n                    // console.log(\"on openRemoteTaskGroupsPanel - panel created\")\n                    this.activeProjectId = TasksWindowController.getProjectId(section);\n                    this.activeProjectHostHash = hostHash;\n                    if (this.activePanel) {\n                        this.activePanel.deactivate();\n                    }\n                    panel.beforeActivate();\n                    this.activePanel = panel;\n                    this.tasksPlugin.activeTaskGroupsPanel = panel;\n                    this.afterViewLoaded.promise.then(() => {\n                        this.callViewMethod(\"openTaskGroupsPanel\", session.hostHash, TasksWindowController.getProjectId(section));\n                    });\n                });\n            })\n\n        });\n    }\n    \n    getOrCreateRemoteTasksCountManager(hostHash: string): TasksCountManager {\n        if (!(hostHash in this.remoteTasksCountManagers)) {\n            let session = this.app.sessionManager.getSessionByHostHash(hostHash);\n            this.remoteTasksCountManagers[hostHash] = new TasksCountManager(session, null, this.tasksPlugin, this.sidebar, true);\n        }\n        return this.remoteTasksCountManagers[hostHash];\n    }\n    \n    getRemoteSectionElementsCount(hostHash: string, section: mail.section.SectionService): number {\n        let rtcm = this.getOrCreateRemoteTasksCountManager(hostHash);\n        return rtcm.getSectionElementsCount(section);\n    }\n    \n    getRemoteConversationElementsCount(hostHash: string, conversation: mail.section.Conv2Section): number {\n        let rtcm = this.getOrCreateRemoteTasksCountManager(hostHash);\n        return rtcm.getConv2ElementsCount(conversation);\n    }\n    \n    getRemoteSectionUnreadElementsCount(hostHash: string, section: mail.section.SectionService): number {\n        let rtcm = this.getOrCreateRemoteTasksCountManager(hostHash);\n        return rtcm.getSectionElementsCount(section);\n    }\n    \n    getRemoteConversationUnreadElementsCount(hostHash: string, conversation: mail.section.Conv2Section): number {\n        let rtcm = this.getOrCreateRemoteTasksCountManager(hostHash);\n        return rtcm.getConv2ElementsCount(conversation);\n    }\n    \n    getTaskGroupsPanelKey(hostHash: string, projectId: string): string {\n        return `${hostHash}--${projectId}`;\n    }\n\n    onViewHistoryArrowLeft(): void {\n        this.router.goPrev();\n    }\n\n    onViewHistoryArrowRight(): void {\n        this.router.goNext();\n    }\n\n    static getProjectId(section: mail.section.SectionService|mail.section.Conv2Section|string): string {\n        if (section instanceof mail.section.Conv2Section) {\n            return section.id;\n        }\n        return typeof(section) == \"string\" ?  section :  section.getId();\n    }\n}\n\n(<any>TasksWindowController.prototype).className = \"com.privmx.plugin.tasks.window.tasks.TasksWindowController\";"],"sourceRoot":"../../../src"}