{"version":3,"sources":["window/taskGroupForm/TaskGroupFormWindowController.ts"],"names":[],"mappings":"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","file":"TaskGroupFormWindowController.js","sourcesContent":["import { window, component, utils, Q, mail, app } from \"pmc-mail\";\nimport { Types } from \"pmc-mail\";\nimport { TasksPlugin, TasksComponentFactory } from \"../../main/TasksPlugin\";\nimport { ProjectId, EventHandler, Action, Watchable, TaskGroupId } from \"../../main/Types\";\nimport Dependencies = utils.decorators.Dependencies;\nimport { i18n } from \"./i18n/index\";\nimport { DetachTaskGroupWindowController } from \"../detachTaskGroup/DetachTaskGroupWindowController\";\nimport { IconPickerWindowController } from \"../iconPicker/IconPickerWindowController\";\nimport { SearchFilter } from \"../../main/SearchFilter\";\n\nexport interface Result {\n    name: string;\n    dueDate: string;\n    deleted: boolean;\n    icon: string;\n}\n\nexport interface Model {\n    id: string;\n    name: string;\n    dueDate: string;\n    projectName: string;\n    detached?: boolean;\n    icon: string;\n}\n\n@Dependencies([\"notification\"])\nexport class TaskGroupFormWindowController extends window.base.BaseWindowController {\n    \n    static textsPrefix: string = \"plugin.tasks.window.taskGroupForm.\";\n    \n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    taskGroupId: TaskGroupId;\n    deferred: Q.Deferred<Result>;\n    tasksPlugin: TasksPlugin;\n    projectListener: EventHandler;\n    notifications: component.notification.NotificationController;\n    dirty: boolean = false;\n    componentFactory: TasksComponentFactory;\n    hasNewIcon: boolean = false;\n    newIcon: string;\n    \n    constructor(parentWindow: Types.app.WindowParent, public session: mail.session.Session, public projectId: ProjectId, public data: string|Model, public modal: boolean = false) {\n        super(parentWindow, __filename, __dirname);\n        this.ipcMode = true;\n        this.tasksPlugin = this.app.getComponent(\"tasks-plugin\");\n        if (typeof(this.data) == \"object\") {\n            this.taskGroupId = this.data.id;\n        } else {\n            this.taskGroupId = null;\n        }\n        this.projectId = projectId;\n        this.deferred = Q.defer();\n        this.setPluginViewAssets(\"tasks\");\n        this.openWindowOptions.title = this.i18n(\"plugin.tasks.window.taskGroupForm.title\");\n        this.openWindowOptions.icon = \"icon fa fa-tasks\";\n        this.openWindowOptions.width = 500;\n        this.openWindowOptions.height = 135;\n        this.openWindowOptions.modal = this.modal;\n        \n        this.projectListener = this.onProjectChanged.bind(this);\n        this.tasksPlugin.watch(this.session, \"project\", projectId, \"*\", this.projectListener);\n        \n        // Custom select: projects\n        let availProjects = this.tasksPlugin.getAvailableProjects(this.session);\n        let projects: Array<component.customselect.CustomSelectItem> = [];\n        for (let k in availProjects) {\n            let proj = availProjects[k];\n            projects.push({\n                type: \"item\",\n                icon: <Types.webUtils.IconAsset>{\n                    type: \"asset\",\n                    assetName: \"DEFAULT_PRIVMX_ICON\",\n                },\n                value: k,\n                text: proj.getName(),\n                selected: k == projectId,\n            });\n        }\n        this.tasksPlugin.registerWindow(this.getWindowId(), this);\n        this.notifications = this.addComponent(\"notifications\", this.componentFactory.createComponent(\"notification\", [this]));\n    }\n    \n    getWindowId(): string {\n        return TaskGroupFormWindowController.getWindowId(this.session, this.taskGroupId);\n    }\n    \n    static getWindowId(session: mail.session.Session, taskGroupId: string): string {\n        return \"taskgroup-\" + session.hostHash + \"-\" + (taskGroupId ? taskGroupId : \"\");\n    }\n    \n    getPromise(): Q.Promise<Result> {\n        return this.deferred.promise;\n    }\n    \n    getModel(): Model {\n        let tg = this.tasksPlugin.taskGroups[this.session.hostHash][this.taskGroupId];\n        let detached = tg ? tg.getDetached() : false;\n        if (typeof(this.data) == \"object\") {\n            this.data.detached = detached;\n            return this.data;\n        } else {\n            return {\n                id: null,\n                name: \"\",\n                dueDate: \"\",\n                projectName: this.data,\n                detached: detached,\n                icon: null,\n            };\n        }\n    }\n    \n    onViewClose(): void {\n        this.close();\n    }\n    \n    onViewOk(resultStr: string): void {\n        let result = <Result>JSON.parse(resultStr);\n        let tg = this.tasksPlugin.taskGroups[this.session.hostHash][this.taskGroupId];\n        result.icon = this.hasNewIcon ? this.newIcon : (tg ? tg.getIcon() : null);\n        if (!this.isNameAvailable(result.name)) {\n            this.alert(this.i18n(\"plugin.tasks.window.taskGroupForm.nameTaken\"));\n            return;\n        }\n        result.deleted = false;\n        this.deferred.resolve(result);\n        this.close();\n    }\n    \n    beforeClose(): void {\n        this.tasksPlugin.unregisterWindow(this.getWindowId());\n        this.tasksPlugin.unWatch(this.session, \"project\", this.projectId, \"*\", this.projectListener);\n        this.deferred.reject();\n    }\n    \n    onViewDeleteTaskGroup(): void {\n        if (!this.taskGroupId) {\n            return;\n        }\n        \n        this.confirm(this.i18n(\"plugin.tasks.window.taskGroupForm.deleteConfirm\")).then(result => {\n            if (result.result == \"yes\") {\n                let tg = this.tasksPlugin.getTaskGroup(this.session, this.taskGroupId);\n                this.tasksPlugin.deleteTaskGroup(this.session, tg, true, false);\n                this.deferred.resolve({\n                    deleted: true,\n                    dueDate: null,\n                    name: null,\n                    icon: null,\n                });\n                this.close();\n            }\n        })\n    }\n    \n    onProjectChanged(type: Watchable, id: string, action: Action): void {\n        if (action == \"deleted\") {\n            this.close();\n        }\n        else if (action == \"modified\") {\n            this.callViewMethod(\"setProjectName\", this.tasksPlugin.getProject(this.session, this.projectId).getName());\n        }\n    }\n    \n    onViewDetach(): void {\n        this.app.ioc.create(DetachTaskGroupWindowController, [this, this.session, this.taskGroupId]).then(win => {\n            this.openChildWindow(win).getPromise().then(result => {\n                if (result.detached) {\n                    this.callViewMethod(\"onAfterCloseList\");\n                    this.notifications.showNotification(this.i18n(\"plugin.tasks.window.taskGroupForm.notifications.taskGroupDetached\"));\n                    setTimeout(() => {\n                        this.close();\n                    }, 1000);\n                }\n            });\n        });\n    }\n    \n    onViewDirtyChanged(dirty: boolean): void {\n        this.dirty = dirty;\n    }\n    \n    isNameAvailable(name: string): boolean {\n        for (let i in this.tasksPlugin.taskGroups[this.session.hostHash]) {\n            let tg = this.tasksPlugin.taskGroups[this.session.hostHash][i];\n            let name1 = SearchFilter.prepareNeedle(tg.getName().trim());\n            let name2 = SearchFilter.prepareNeedle(name.trim());\n            if (tg && tg.getId() != this.taskGroupId && this.projectId == tg.getProjectId() && name1 == name2) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    onViewChangeIcon(): void {\n        let tg = this.tasksPlugin.taskGroups[this.session.hostHash][this.taskGroupId];\n        let icon = this.hasNewIcon ? this.newIcon : (tg ? tg.getIcon() : null);\n        this.app.ioc.create(IconPickerWindowController, [this, icon]).then(win => {\n            this.openChildWindow(win).getPromise().then(result => {\n                if (!result.cancelled) {\n                    this.setIcon(result.iconStr);\n                }\n            });\n        });\n    }\n    \n    setIcon(iconStr: string): void {\n        this.hasNewIcon = true;\n        this.newIcon = iconStr;\n        this.callViewMethod(\"renderIcon\", iconStr);\n    }\n    \n}\n\n(<any>TaskGroupFormWindowController.prototype).className = \"com.privmx.plugin.tasks.window.taskGroupForm.TaskGroupFormWindowController\";"],"sourceRoot":"../../../src"}