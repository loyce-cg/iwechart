{"version":3,"sources":["window/task/TaskWindowController.ts"],"names":[],"mappings":"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","file":"TaskWindowController.js","sourcesContent":["import { window, Q, Types, mail, utils, privfs, component, app} from \"pmc-mail\";\nimport { TaskId, TaskGroupId } from \"../../main/Types\";\nimport { TaskPanelController } from \"../../component/taskPanel/TaskPanelController\";\nimport { Project } from \"../../main/data/Project\";\nimport Dependencies = utils.decorators.Dependencies;\nimport { TasksComponentFactory, TasksPlugin } from \"../../main/TasksPlugin\";\nimport { i18n } from \"./i18n/index\";\n\nexport interface Model {\n}\n\n@Dependencies([\"taskpanel\"])\nexport class TaskWindowController extends window.base.BaseWindowController {\n    \n    static textsPrefix: string = \"plugin.tasks.window.task.\";\n    \n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    taskId: TaskId;\n    session: mail.session.Session;\n    taskPanel: TaskPanelController;\n    project: Project = null;\n    taskGroupIds: Array<TaskGroupId> = [];\n    deferred: Q.Deferred<{saved:boolean,deleted:boolean}>;\n    componentFactory: TasksComponentFactory;\n    assignTo: string[];\n    scrollToComments: boolean;\n    newTask: boolean;\n    dateTime: Date;\n    wholeDay: boolean;\n    tasksPlugin: TasksPlugin;\n    dirty: boolean = false;\n    personsComponent: component.persons.PersonsController;\n    \n    constructor(parentWindow: Types.app.WindowParent, session: mail.session.Session, taskId: string, editable: boolean = false, project: Project = null, taskGroupIds: Array<TaskGroupId> = [], attachments: mail.section.OpenableSectionFile[] = [], assignTo: string[] = [], scrollToComments: boolean = false, newTask: boolean = false, dateTime: Date = null, wholeDay: boolean = false) {\n        super(parentWindow, __filename, __dirname);\n        this.ipcMode = true;\n        if (taskGroupIds.length == 1 && taskGroupIds[0] == \"__orphans__\") {\n            taskGroupIds = [];\n        }\n        this.assignTo = assignTo;\n        this.scrollToComments = scrollToComments;\n        this.newTask = newTask;\n        this.dateTime = dateTime;\n        this.wholeDay = wholeDay;\n        this.tasksPlugin = this.app.getComponent(\"tasks-plugin\");\n        \n        // Calculate default window width and height\n        // Here min* and max* refer to the min/max DEFAULT size, not the min/max resizable by user\n        let screenSize = this.app.getScreenResolution(true);\n        let minWindowWidth: number;\n        let minWindowHeight: number;\n        let maxWindowWidth: number;\n        let maxWindowHeight: number;\n        let percentWindowWidth: number;\n        let percentWindowHeight: number;\n        if (taskId) {\n            // Edit task window\n            minWindowWidth = 900;\n            minWindowHeight = 438;\n            maxWindowWidth = 1500;\n            maxWindowHeight = 650;\n            percentWindowWidth = 0.8;\n            percentWindowHeight = 0.8;\n        }\n        else {\n            // New task window\n            minWindowWidth = 550;\n            minWindowHeight = 413;\n            maxWindowWidth = 900;\n            maxWindowHeight = 650;\n            percentWindowWidth = 0.5;\n            percentWindowHeight = 0.8;\n        }\n        let windowWidth: number = Math.max(minWindowWidth, Math.min(maxWindowWidth, percentWindowWidth * screenSize.width));\n        let windowHeight: number = Math.max(minWindowHeight, Math.min(maxWindowHeight, percentWindowHeight * screenSize.height));\n        \n        this.deferred = Q.defer();\n        this.taskId = taskId;\n        this.session = session;\n        this.project = project;\n        this.taskGroupIds = taskGroupIds;\n        this.setPluginViewAssets(\"tasks\");\n        this.openWindowOptions.title = this.i18n(\"plugin.tasks.window.task.title\");\n        this.openWindowOptions.icon = \"icon fa fa-tasks\";\n        this.openWindowOptions.width = windowWidth;\n        this.openWindowOptions.height = windowHeight;\n        this.openWindowOptions.minWidth = taskId ? 600 : 350;\n        this.openWindowOptions.minHeight = 400;\n        //this.openWindowOptions.modal = true;\n        this.personsComponent = this.addComponent(\"personsComponent\", this.componentFactory.createComponent(\"persons\", [this]));\n        this.taskPanel = this.addComponent(\"taskPanel\", this.componentFactory.createComponent(\"taskpanel\", [this, this.session, this.personsComponent, {\n            close: () => this.close(),\n            alert: (msg: string) => this.alert(msg),\n            confirm: (msg: string) => this.confirm(msg),\n            confirmEx: this.confirmEx.bind(this),\n            openWindowParent: this,\n            openChildWindow: this.openChildWindow.bind(this),\n            updateDirty: this.updateDirty.bind(this),\n        }, false, editable, attachments]));\n        \n        this.tasksPlugin.registerWindow(this.getWindowId(), this);\n    }\n    \n    init(): void {\n        this.taskPanel.init().then(() => {\n            return this.taskPanel.setSession(this.session);\n        })\n        .then(() => {\n            this.taskPanel.setTaskId(this.session, this.taskId, this.project, this.taskGroupIds, this.assignTo, this.scrollToComments, this.newTask, this.dateTime, this.wholeDay);\n        });\n    }\n    \n    onViewLoad() {\n        this.initSpellChecker();\n    }\n    \n    setHandle(handle: privfs.fs.descriptor.Handle): void {\n        this.taskPanel.setHandle(handle);\n    }\n    \n    getWindowId(): string {\n        return TaskWindowController.getWindowId(this.session, this.taskId);\n    }\n    \n    static getWindowId(session: mail.session.Session, taskId: string): string {\n        return \"task-\" + session.hostHash + \"-\" + (taskId ? taskId : \"\");\n    }\n    \n    getPromise(): Q.Promise<{saved:boolean,deleted:boolean}> {\n        return this.deferred.promise;\n    }\n    \n    getModel(): Model {\n        return {};\n    }\n    \n    onViewClose(): void {\n        this.close();\n    }\n    \n    close(force?: boolean) {\n        this.taskPanel.beforeClose().then(close => {\n            if (close) {\n                super.close();\n            }\n        })\n    }\n    \n    beforeClose(_force: boolean): Q.IWhenable<void> {\n        this.tasksPlugin.unregisterWindow(this.getWindowId());\n        this.deferred.resolve({saved:this.taskPanel.saved,deleted:this.taskPanel.deleted});\n        return Q();\n    }\n    \n    updateDirty(dirty: boolean): void {\n        this.dirty = dirty;\n    }\n    \n    ensureHasDateTime(dt: Date): void {\n        this.taskPanel.ensureHasDateTime(dt);\n    }\n    \n    handleFilePaste(element: app.common.clipboard.ClipboardElement): boolean {\n        if (\n            (app.common.clipboard.Clipboard.FORMAT_SYSTEM_FILES in element.data && this.taskPanel)\n                || (element.data.file && element.data.file.element instanceof mail.section.OpenableSectionFile)\n                || (element.data.files && element.data.files.filter((x: any) => !x || !(x.element instanceof mail.section.OpenableSectionFile)).length == 0)\n            ) {\n            this.taskPanel.tryPaste(element, \"text\" in element.data ? element.data.text : null);\n            return true;\n        }\n        return false;\n    }\n    \n    onTaskCreated(handler: (taskId: string) => void): void {\n        this.taskPanel.onTaskCreated(handler);\n    }\n    \n    onCancelled(handler: () => void): void {\n        this.taskPanel.onCancelled(handler);\n    }\n    \n}\n\n(<any>TaskWindowController.prototype).className = \"com.privmx.plugin.tasks.window.task.TaskWindowController\";"],"sourceRoot":"../../../src"}