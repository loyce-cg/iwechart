{"version":3,"sources":["window/taskGroupSelector/TaskGroupSelectorWindowController.ts"],"names":[],"mappings":"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","file":"TaskGroupSelectorWindowController.js","sourcesContent":["import { window, component, utils, Q, mail } from \"pmc-mail\";\nimport { Types } from \"pmc-mail\";\nimport { TasksPlugin } from \"../../main/TasksPlugin\";\nimport { ProjectId } from \"../../main/Types\";\nimport Dependencies = utils.decorators.Dependencies;\nimport { i18n } from \"./i18n/index\";\n\nexport interface Result {\n    taskGroupIds: string[];\n}\n\nexport interface TaskGroupModel {\n    id: string;\n    name: string;\n    isSelected: boolean;\n    iconStr: string;\n}\n\nexport interface Model {\n}\n\n@Dependencies([\"extlist\"])\nexport class TaskGroupSelectorWindowController extends window.base.BaseWindowController {\n    \n    static textsPrefix: string = \"plugin.tasks.window.taskGroupSelector.\";\n    \n    static registerTexts(localeService: mail.LocaleService): void {\n        localeService.registerTexts(i18n, this.textsPrefix);\n    }\n    \n    deferred: Q.Deferred<Result> = Q.defer();\n    tasksPlugin: TasksPlugin;\n    mutableTaskGroupsCollection: utils.collection.MutableCollection<TaskGroupModel>;\n    sortedTaskGroupsCollection: utils.collection.SortedCollection<TaskGroupModel>;\n    activeTaskGroupsCollection: utils.collection.WithMultiActiveCollection<TaskGroupModel>;\n    transformTaskGroupsCollection: utils.collection.TransformCollection<TaskGroupModel, TaskGroupModel>;\n    taskGroupsExtList: component.extlist.ExtListController<TaskGroupModel>;\n    \n    constructor(parentWindow: Types.app.WindowParent, public session: mail.session.Session, public projectId: ProjectId, public defaultSelectedTaskGroupIds: string[]) {\n        super(parentWindow, __filename, __dirname);\n        this.ipcMode = true;\n        this.setPluginViewAssets(\"tasks\");\n        this.openWindowOptions.modal = true;\n        this.openWindowOptions.title = this.i18n(\"plugin.tasks.window.taskGroupSelector.title\");\n        this.openWindowOptions.icon = \"icon fa fa-tasks\";\n        this.openWindowOptions.width = 300;\n        this.openWindowOptions.height = 400;\n\n        this.tasksPlugin = this.app.getComponent(\"tasks-plugin\");\n\n        this.mutableTaskGroupsCollection = this.addComponent(\"mutableTaskGroupsCollection\", new utils.collection.MutableCollection());\n        this.sortedTaskGroupsCollection = this.addComponent(\"sortedTaskGroupsCollection\", new utils.collection.SortedCollection(this.mutableTaskGroupsCollection, this.taskGroupComparator.bind(this)));\n        this.activeTaskGroupsCollection = this.addComponent(\"activeTaskGroupsCollection\", new utils.collection.WithMultiActiveCollection(this.sortedTaskGroupsCollection));\n        this.transformTaskGroupsCollection = this.addComponent(\"transformTaskGroupsCollection\", new utils.collection.TransformCollection(this.activeTaskGroupsCollection, this.transformTaskGroupModel.bind(this)));\n        this.taskGroupsExtList = this.addComponent(\"taskGroupsExtList\", this.componentFactory.createComponent(\"extlist\", [this, this.transformTaskGroupsCollection]));\n        this.taskGroupsExtList.ipcMode = true;\n        let project = this.tasksPlugin.projects[this.session.hostHash][this.projectId];\n\n        if (project) {\n            let tgs = project.getTaskGroupIds()\n            .map(x => this.tasksPlugin.taskGroups[this.session.hostHash][x])\n            .filter(x => x != null)\n            .map(x => <TaskGroupModel>{ id: x.getId(), name: x.getName(), isSelected: false, iconStr: x.getIcon() });\n            this.mutableTaskGroupsCollection.addAll(tgs);\n            for (let tgId of this.defaultSelectedTaskGroupIds) {\n                this.activeTaskGroupsCollection.setSelected(this.activeTaskGroupsCollection.getBy(\"id\", tgId));\n                this.activeTaskGroupsCollection.triggerUpdateAt(this.activeTaskGroupsCollection.indexOfBy(x => x.id == tgId));\n            }\n        }\n    }\n\n    transformTaskGroupModel(tgm: TaskGroupModel, idx: number): TaskGroupModel {\n        tgm.isSelected = this.activeTaskGroupsCollection.isSelected(idx);\n        return tgm;\n    }\n\n    taskGroupComparator(a: TaskGroupModel, b: TaskGroupModel): number {\n        return a.name.localeCompare(b.name);\n    }\n\n    setSelected(idx: number, isSelected: boolean): void {\n        let el = this.activeTaskGroupsCollection.get(idx);\n        if (isSelected) {\n            this.activeTaskGroupsCollection.setSelected(el);\n        }\n        else {\n            this.activeTaskGroupsCollection.deselect(el);\n        }\n        this.activeTaskGroupsCollection.triggerUpdateAt(idx);\n    }\n    \n    isSelected(idx: number) {\n        return this.activeTaskGroupsCollection.isSelected(idx);\n    }\n    \n    getPromise(): Q.Promise<Result> {\n        return this.deferred.promise;\n    }\n    \n    getModel(): Model {\n        return {\n        };\n    }\n    \n    onViewClose(): void {\n        this.close();\n    }\n    \n    onViewSave(): void {\n        let activeIds: string[] = this.activeTaskGroupsCollection.getSelectedIndexes().filter(x => x >= 0).map(x => this.activeTaskGroupsCollection.get(x).id);\n        this.deferred.resolve({ taskGroupIds: activeIds });\n        this.close();\n    }\n    \n    onViewToggleSelected(id: string): void {\n        let idx = this.activeTaskGroupsCollection.indexOfBy(x => x.id == id);\n        if (idx >= 0) {\n            this.setSelected(idx, !this.isSelected(idx));\n        }\n    }\n    \n}\n\n(<any>TaskGroupSelectorWindowController.prototype).className = \"com.privmx.plugin.tasks.window.taskGroupSelector.TaskGroupSelectorWindowController\";"],"sourceRoot":"../../../src"}